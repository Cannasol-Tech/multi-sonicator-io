        -:    0:Source:test_hal.c
        -:    0:Graph:test_hal.gcno
        -:    0:Data:test_hal.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:/**
        -:    2: * @file test_hal.c
        -:    3: * @brief Comprehensive Unit Tests for Hardware Abstraction Layer (HAL)
        -:    4: * @author Cannasol Technologies
        -:    5: * @date 2025-09-04
        -:    6: * @version 1.0.0
        -:    7: *
        -:    8: * @details
        -:    9: * Unity-based unit tests for HAL module achieving 90% code coverage.
        -:   10: * Tests all HAL subsystems: GPIO, ADC, PWM, UART, Timer.
        -:   11: */
        -:   12:
        -:   13:#ifdef UNIT_TEST
        -:   14:
        -:   15:#include "../unity_config.h"
        -:   16:#include "../../../src/modules/hal/hal.h"
        -:   17:#include "../../../src/modules/hal/gpio.h"
        -:   18:#include "../../../src/modules/hal/adc.h"
        -:   19:#include "../../../src/modules/hal/pwm.h"
        -:   20:#include "../../../src/modules/hal/uart.h"
        -:   21:#include "../../../src/modules/hal/timer.h"
        -:   22:
        -:   23:// ============================================================================
        -:   24:// TEST FIXTURE SETUP
        -:   25:// ============================================================================
        -:   26:
       66:   27:void setUp(void) {
        -:   28:    // Reset HAL state before each test
        -:   29:    // Note: In native environment, this may be mocked
       66:   30:}
        -:   31:
       66:   32:void tearDown(void) {
        -:   33:    // Clean up after each test
        -:   34:    // Note: In native environment, this may be mocked
       66:   35:}
        -:   36:
        -:   37:// ============================================================================
        -:   38:// HAL CORE FUNCTIONALITY TESTS
        -:   39:// ============================================================================
        -:   40:
        6:   41:void test_hal_init_success(void) {
        6:   42:    hal_result_t result = hal_init();
        6:   43:    TEST_ASSERT_EQUAL(HAL_OK, result);
        6:   44:    COVERAGE_MARK_FUNCTION(hal_init);
        6:   45:}
        -:   46:
        6:   47:void test_hal_init_idempotent(void) {
        -:   48:    // Test that multiple init calls are safe
        6:   49:    TEST_ASSERT_EQUAL(HAL_OK, hal_init());
        6:   50:    TEST_ASSERT_EQUAL(HAL_OK, hal_init());
        6:   51:    COVERAGE_MARK_FUNCTION(hal_init_idempotent);
        6:   52:}
        -:   53:
        6:   54:void test_hal_self_test_all_modules(void) {
        6:   55:    hal_init();
        -:   56:
        -:   57:    bool gpio_ok, adc_ok, pwm_ok, uart_ok, timer_ok;
        6:   58:    hal_result_t result = hal_self_test(&gpio_ok, &adc_ok, &pwm_ok, &uart_ok, &timer_ok);
        -:   59:
        6:   60:    TEST_ASSERT_EQUAL(HAL_OK, result);
        6:   61:    TEST_ASSERT_VALID_POINTER(&gpio_ok);
        6:   62:    TEST_ASSERT_VALID_POINTER(&adc_ok);
        6:   63:    TEST_ASSERT_VALID_POINTER(&pwm_ok);
        6:   64:    TEST_ASSERT_VALID_POINTER(&uart_ok);
        6:   65:    TEST_ASSERT_VALID_POINTER(&timer_ok);
        6:   66:    COVERAGE_MARK_FUNCTION(hal_self_test);
        6:   67:}
        -:   68:
        6:   69:void test_hal_self_test_null_parameters(void) {
        6:   70:    hal_init();
        -:   71:
        -:   72:    // Test with NULL parameters - should handle gracefully
        6:   73:    hal_result_t result = hal_self_test(NULL, NULL, NULL, NULL, NULL);
        6:   74:    TEST_ASSERT_NOT_EQUAL(HAL_OK, result);
        6:   75:    COVERAGE_MARK_BRANCH(1);
        6:   76:}
        -:   77:
        6:   78:void test_hal_emergency_shutdown(void) {
        6:   79:    hal_init();
        6:   80:    hal_result_t result = hal_emergency_shutdown();
        6:   81:    TEST_ASSERT_EQUAL(HAL_OK, result);
        6:   82:    COVERAGE_MARK_FUNCTION(hal_emergency_shutdown);
        6:   83:}
        -:   84:
        6:   85:void test_hal_get_status_valid_parameters(void) {
        6:   86:    hal_init();
        -:   87:    bool initialized;
        -:   88:    uint32_t uptime_ms;
        -:   89:    uint16_t errors;
        -:   90:
        6:   91:    hal_result_t result = hal_get_status(&initialized, &uptime_ms, &errors);
        6:   92:    TEST_ASSERT_EQUAL(HAL_OK, result);
        6:   93:    TEST_ASSERT_TRUE(initialized);
        6:   94:    TEST_ASSERT_GREATER_OR_EQUAL_UINT32(0, uptime_ms);
        6:   95:    COVERAGE_MARK_FUNCTION(hal_get_status);
        6:   96:}
        -:   97:
        6:   98:void test_hal_get_status_null_parameters(void) {
        6:   99:    hal_init();
        -:  100:
        -:  101:    // Test with NULL parameters
        6:  102:    hal_result_t result = hal_get_status(NULL, NULL, NULL);
        6:  103:    TEST_ASSERT_NOT_EQUAL(HAL_OK, result);
        6:  104:    COVERAGE_MARK_BRANCH(2);
        6:  105:}
        -:  106:
        6:  107:void test_hal_read_all_sonicator_status(void) {
        6:  108:    hal_init();
        -:  109:    sonicator_status_t status_array[4];
        -:  110:
        6:  111:    hal_result_t result = hal_read_all_sonicator_status(status_array);
        6:  112:    TEST_ASSERT_EQUAL(HAL_OK, result);
        -:  113:
        -:  114:    // Verify status array is populated
       30:  115:    for (int i = 0; i < 4; i++) {
       24:  116:        TEST_ASSERT_GREATER_OR_EQUAL_FLOAT(0.0f, status_array[i].power_watts);
       24:  117:        TEST_ASSERT_GREATER_THAN_UINT16(0, status_array[i].frequency_hz);
       24:  118:    }
        6:  119:    COVERAGE_MARK_FUNCTION(hal_read_all_sonicator_status);
        6:  120:}
        -:  121:
        6:  122:void test_hal_read_single_sonicator_status_valid_id(void) {
        6:  123:    hal_init();
        -:  124:    sonicator_status_t status;
        -:  125:
       30:  126:    for (uint8_t id = 1; id <= 4; id++) {
       24:  127:        hal_result_t result = hal_read_sonicator_status(id, &status);
       24:  128:        TEST_ASSERT_EQUAL(HAL_OK, result);
       24:  129:        TEST_ASSERT_GREATER_OR_EQUAL_FLOAT(0.0f, status.power_watts);
       24:  130:        TEST_ASSERT_GREATER_THAN_UINT16(0, status.frequency_hz);
       24:  131:    }
        6:  132:    COVERAGE_MARK_FUNCTION(hal_read_sonicator_status);
        6:  133:}
        -:  134:
        6:  135:void test_hal_read_single_sonicator_status_invalid_id(void) {
        6:  136:    hal_init();
        -:  137:    sonicator_status_t status;
        -:  138:
        -:  139:    // Test invalid IDs
        6:  140:    TEST_ASSERT_NOT_EQUAL(HAL_OK, hal_read_sonicator_status(0, &status));
        6:  141:    TEST_ASSERT_NOT_EQUAL(HAL_OK, hal_read_sonicator_status(5, &status));
        6:  142:    COVERAGE_MARK_BRANCH(3);
        6:  143:}
        -:  144:
        6:  145:void test_hal_read_single_sonicator_status_null_status(void) {
        6:  146:    hal_init();
        -:  147:
        6:  148:    hal_result_t result = hal_read_sonicator_status(1, NULL);
        6:  149:    TEST_ASSERT_NOT_EQUAL(HAL_OK, result);
        6:  150:    COVERAGE_MARK_BRANCH(4);
        6:  151:}
        -:  152:
        -:  153:// ============================================================================
        -:  154:// MAIN TEST RUNNER
        -:  155:// ============================================================================
        -:  156:
        6:  157:int main(void) {
        6:  158:    UNITY_BEGIN();
        -:  159:
        -:  160:    // HAL Core Tests
        6:  161:    RUN_TEST(test_hal_init_success);
        6:  162:    RUN_TEST(test_hal_init_idempotent);
        6:  163:    RUN_TEST(test_hal_self_test_all_modules);
        6:  164:    RUN_TEST(test_hal_self_test_null_parameters);
        6:  165:    RUN_TEST(test_hal_emergency_shutdown);
        6:  166:    RUN_TEST(test_hal_get_status_valid_parameters);
        6:  167:    RUN_TEST(test_hal_get_status_null_parameters);
        6:  168:    RUN_TEST(test_hal_read_all_sonicator_status);
        6:  169:    RUN_TEST(test_hal_read_single_sonicator_status_valid_id);
        6:  170:    RUN_TEST(test_hal_read_single_sonicator_status_invalid_id);
        6:  171:    RUN_TEST(test_hal_read_single_sonicator_status_null_status);
        -:  172:
        6:  173:    return UNITY_END();
        -:  174:}
        -:  175:
        -:  176:#endif // UNIT_TEST
