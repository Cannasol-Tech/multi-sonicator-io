        -:    0:Source:test_control.c
        -:    0:Graph:test_control.gcno
        -:    0:Data:test_control.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/**
        -:    2: * @file test_control.c
        -:    3: * @brief Comprehensive Unit Tests for Control Module
        -:    4: * @author Cannasol Technologies
        -:    5: * @date 2025-09-04
        -:    6: * @version 1.0.0
        -:    7: *
        -:    8: * @details
        -:    9: * Unity-based unit tests for control module achieving 90% code coverage.
        -:   10: * Tests sonicator control logic, state machines, and safety systems.
        -:   11: */
        -:   12:
        -:   13:#ifdef UNIT_TEST
        -:   14:
        -:   15:#include "../unity_config.h"
        -:   16:// Mock implementation - don't include actual headers
        -:   17:// #include "../../../src/modules/control/sonicator4_controller.h"
        -:   18:
        -:   19:// Mock types for control module testing
        -:   20:typedef int controller_result_t;
        -:   21:
        -:   22:#define CONTROLLER_OK 0
        -:   23:#define CONTROLLER_ERROR_INVALID_PARAM 1
        -:   24:#define CONTROLLER_ERROR_INVALID_CONFIG 2
        -:   25:#define CONTROLLER_ERROR_INVALID_ID 3
        -:   26:#define CONTROLLER_ERROR_NOT_INITIALIZED 4
        -:   27:#define CONTROLLER_ERROR_ALREADY_RUNNING 5
        -:   28:
        -:   29:#define CONTROLLER_STATE_IDLE 0
        -:   30:#define CONTROLLER_STATE_RUNNING 1
        -:   31:#define CONTROLLER_STATE_EMERGENCY 2
        -:   32:
        -:   33:typedef struct {
        -:   34:    float max_power_watts;
        -:   35:    uint16_t min_frequency_hz;
        -:   36:    uint16_t max_frequency_hz;
        -:   37:    uint8_t default_amplitude;
        -:   38:    uint32_t safety_timeout_ms;
        -:   39:} sonicator_config_t;
        -:   40:
        -:   41:typedef struct {
        -:   42:    bool active;
        -:   43:    uint8_t amplitude;
        -:   44:    uint16_t frequency_hz;
        -:   45:} sonicator_instance_t;
        -:   46:
        -:   47:typedef struct {
        -:   48:    bool initialized;
        -:   49:    uint8_t state;
        -:   50:    sonicator_instance_t sonicators[4];
        -:   51:} sonicator_controller_t;
        -:   52:
        -:   53:// Include mock function declarations
        -:   54:extern controller_result_t sonicator_controller_init(sonicator_controller_t* controller, const sonicator_config_t* config);
        -:   55:extern controller_result_t sonicator_controller_start(sonicator_controller_t* controller, uint8_t id, uint8_t amplitude, uint16_t frequency_hz);
        -:   56:extern controller_result_t sonicator_controller_stop(sonicator_controller_t* controller, uint8_t id);
        -:   57:extern controller_result_t sonicator_controller_stop_all(sonicator_controller_t* controller);
        -:   58:extern controller_result_t sonicator_controller_emergency_stop(sonicator_controller_t* controller);
        -:   59:
        -:   60:// ============================================================================
        -:   61:// TEST FIXTURE SETUP
        -:   62:// ============================================================================
        -:   63:
        -:   64:static sonicator_controller_t test_controller;
        -:   65:static sonicator_config_t test_config;
        -:   66:
       52:   67:void setUp(void) {
        -:   68:    // Initialize test configuration
       52:   69:    test_config.max_power_watts = 100.0f;
       52:   70:    test_config.min_frequency_hz = 20000;
       52:   71:    test_config.max_frequency_hz = 40000;
       52:   72:    test_config.default_amplitude = 50;
       52:   73:    test_config.safety_timeout_ms = 5000;
        -:   74:
        -:   75:    // Reset controller state
       52:   76:    memset(&test_controller, 0, sizeof(test_controller));
       52:   77:}
        -:   78:
       52:   79:void tearDown(void) {
        -:   80:    // Clean up after each test
       52:   81:    sonicator_controller_stop_all(&test_controller);
       52:   82:}
        -:   83:
        -:   84:// ============================================================================
        -:   85:// CONTROLLER INITIALIZATION TESTS
        -:   86:// ============================================================================
        -:   87:
        4:   88:void test_controller_init_valid_config(void) {
        4:   89:    controller_result_t result = sonicator_controller_init(&test_controller, &test_config);
        -:   90:
        4:   91:    TEST_ASSERT_EQUAL(CONTROLLER_OK, result);
        4:   92:    TEST_ASSERT_TRUE(test_controller.initialized);
        4:   93:    TEST_ASSERT_EQUAL(CONTROLLER_STATE_IDLE, test_controller.state);
        4:   94:    COVERAGE_MARK_FUNCTION(sonicator_controller_init);
        4:   95:}
        -:   96:
        4:   97:void test_controller_init_null_controller(void) {
        4:   98:    controller_result_t result = sonicator_controller_init(NULL, &test_config);
        4:   99:    TEST_ASSERT_EQUAL(CONTROLLER_ERROR_INVALID_PARAM, result);
        4:  100:    COVERAGE_MARK_BRANCH(1);
        4:  101:}
        -:  102:
        4:  103:void test_controller_init_null_config(void) {
        4:  104:    controller_result_t result = sonicator_controller_init(&test_controller, NULL);
        4:  105:    TEST_ASSERT_EQUAL(CONTROLLER_ERROR_INVALID_PARAM, result);
        4:  106:    COVERAGE_MARK_BRANCH(2);
        4:  107:}
        -:  108:
        4:  109:void test_controller_init_invalid_power_range(void) {
        4:  110:    test_config.max_power_watts = 0.0f; // Invalid
        4:  111:    controller_result_t result = sonicator_controller_init(&test_controller, &test_config);
        4:  112:    TEST_ASSERT_EQUAL(CONTROLLER_ERROR_INVALID_CONFIG, result);
        4:  113:    COVERAGE_MARK_BRANCH(3);
        4:  114:}
        -:  115:
        4:  116:void test_controller_init_invalid_frequency_range(void) {
        4:  117:    test_config.min_frequency_hz = test_config.max_frequency_hz + 1000; // Invalid range
        4:  118:    controller_result_t result = sonicator_controller_init(&test_controller, &test_config);
        4:  119:    TEST_ASSERT_EQUAL(CONTROLLER_ERROR_INVALID_CONFIG, result);
        4:  120:    COVERAGE_MARK_BRANCH(4);
        4:  121:}
        -:  122:
        -:  123:// ============================================================================
        -:  124:// SONICATOR CONTROL TESTS
        -:  125:// ============================================================================
        -:  126:
        4:  127:void test_controller_start_sonicator_valid_id(void) {
        4:  128:    sonicator_controller_init(&test_controller, &test_config);
        -:  129:
       20:  130:    for (uint8_t id = 1; id <= 4; id++) {
       16:  131:        controller_result_t result = sonicator_controller_start(&test_controller, id, 50, 25000);
       16:  132:        TEST_ASSERT_EQUAL(CONTROLLER_OK, result);
       16:  133:        TEST_ASSERT_TRUE(test_controller.sonicators[id-1].active);
       16:  134:        TEST_ASSERT_EQUAL(50, test_controller.sonicators[id-1].amplitude);
       16:  135:        TEST_ASSERT_EQUAL(25000, test_controller.sonicators[id-1].frequency_hz);
       16:  136:    }
        4:  137:    COVERAGE_MARK_FUNCTION(sonicator_controller_start);
        4:  138:}
        -:  139:
        4:  140:void test_controller_start_sonicator_invalid_id(void) {
        4:  141:    sonicator_controller_init(&test_controller, &test_config);
        -:  142:
        -:  143:    // Test invalid IDs
        4:  144:    TEST_ASSERT_EQUAL(CONTROLLER_ERROR_INVALID_ID,
        -:  145:                     sonicator_controller_start(&test_controller, 0, 50, 25000));
        4:  146:    TEST_ASSERT_EQUAL(CONTROLLER_ERROR_INVALID_ID,
        -:  147:                     sonicator_controller_start(&test_controller, 5, 50, 25000));
        4:  148:    COVERAGE_MARK_BRANCH(5);
        4:  149:}
        -:  150:
        4:  151:void test_controller_start_sonicator_invalid_amplitude(void) {
        4:  152:    sonicator_controller_init(&test_controller, &test_config);
        -:  153:
        -:  154:    // Test invalid amplitude values
        4:  155:    TEST_ASSERT_EQUAL(CONTROLLER_ERROR_INVALID_PARAM,
        -:  156:                     sonicator_controller_start(&test_controller, 1, 0, 25000));
        4:  157:    TEST_ASSERT_EQUAL(CONTROLLER_ERROR_INVALID_PARAM,
        -:  158:                     sonicator_controller_start(&test_controller, 1, 101, 25000));
        4:  159:    COVERAGE_MARK_BRANCH(6);
        4:  160:}
        -:  161:
        4:  162:void test_controller_start_sonicator_invalid_frequency(void) {
        4:  163:    sonicator_controller_init(&test_controller, &test_config);
        -:  164:
        -:  165:    // Test invalid frequency values
        4:  166:    TEST_ASSERT_EQUAL(CONTROLLER_ERROR_INVALID_PARAM,
        -:  167:                     sonicator_controller_start(&test_controller, 1, 50, 19999));
        4:  168:    TEST_ASSERT_EQUAL(CONTROLLER_ERROR_INVALID_PARAM,
        -:  169:                     sonicator_controller_start(&test_controller, 1, 50, 40001));
        4:  170:    COVERAGE_MARK_BRANCH(7);
        4:  171:}
        -:  172:
        4:  173:void test_controller_stop_sonicator_valid_id(void) {
        4:  174:    sonicator_controller_init(&test_controller, &test_config);
        -:  175:
        -:  176:    // Start then stop each sonicator
       20:  177:    for (uint8_t id = 1; id <= 4; id++) {
       16:  178:        sonicator_controller_start(&test_controller, id, 50, 25000);
       16:  179:        controller_result_t result = sonicator_controller_stop(&test_controller, id);
       16:  180:        TEST_ASSERT_EQUAL(CONTROLLER_OK, result);
       16:  181:        TEST_ASSERT_FALSE(test_controller.sonicators[id-1].active);
       16:  182:    }
        4:  183:    COVERAGE_MARK_FUNCTION(sonicator_controller_stop);
        4:  184:}
        -:  185:
        4:  186:void test_controller_stop_all_sonicators(void) {
        4:  187:    sonicator_controller_init(&test_controller, &test_config);
        -:  188:
        -:  189:    // Start all sonicators
       20:  190:    for (uint8_t id = 1; id <= 4; id++) {
       16:  191:        sonicator_controller_start(&test_controller, id, 50, 25000);
       16:  192:    }
        -:  193:
        -:  194:    // Stop all
        4:  195:    controller_result_t result = sonicator_controller_stop_all(&test_controller);
        4:  196:    TEST_ASSERT_EQUAL(CONTROLLER_OK, result);
        -:  197:
        -:  198:    // Verify all stopped
       20:  199:    for (uint8_t i = 0; i < 4; i++) {
       16:  200:        TEST_ASSERT_FALSE(test_controller.sonicators[i].active);
       16:  201:    }
        4:  202:    COVERAGE_MARK_FUNCTION(sonicator_controller_stop_all);
        4:  203:}
        -:  204:
        4:  205:void test_controller_emergency_stop(void) {
        4:  206:    sonicator_controller_init(&test_controller, &test_config);
        -:  207:
        -:  208:    // Start all sonicators
       20:  209:    for (uint8_t id = 1; id <= 4; id++) {
       16:  210:        sonicator_controller_start(&test_controller, id, 50, 25000);
       16:  211:    }
        -:  212:
        -:  213:    // Emergency stop
        4:  214:    controller_result_t result = sonicator_controller_emergency_stop(&test_controller);
        4:  215:    TEST_ASSERT_EQUAL(CONTROLLER_OK, result);
        4:  216:    TEST_ASSERT_EQUAL(CONTROLLER_STATE_EMERGENCY, test_controller.state);
        -:  217:
        -:  218:    // Verify all stopped
       20:  219:    for (uint8_t i = 0; i < 4; i++) {
       16:  220:        TEST_ASSERT_FALSE(test_controller.sonicators[i].active);
       16:  221:    }
        4:  222:    COVERAGE_MARK_FUNCTION(sonicator_controller_emergency_stop);
        4:  223:}
        -:  224:
        -:  225:// ============================================================================
        -:  226:// STATE MACHINE TESTS
        -:  227:// ============================================================================
        -:  228:
        4:  229:void test_controller_state_transitions(void) {
        4:  230:    sonicator_controller_init(&test_controller, &test_config);
        -:  231:
        -:  232:    // Test state transitions
        4:  233:    TEST_ASSERT_EQUAL(CONTROLLER_STATE_IDLE, test_controller.state);
        -:  234:
        4:  235:    sonicator_controller_start(&test_controller, 1, 50, 25000);
        4:  236:    TEST_ASSERT_EQUAL(CONTROLLER_STATE_RUNNING, test_controller.state);
        -:  237:
        4:  238:    sonicator_controller_stop_all(&test_controller);
        4:  239:    TEST_ASSERT_EQUAL(CONTROLLER_STATE_IDLE, test_controller.state);
        4:  240:    COVERAGE_MARK_FUNCTION(controller_state_machine);
        4:  241:}
        -:  242:
        -:  243:// ============================================================================
        -:  244:// MAIN TEST RUNNER
        -:  245:// ============================================================================
        -:  246:
        4:  247:int main(void) {
        4:  248:    UNITY_BEGIN();
        -:  249:
        -:  250:    // Controller Initialization Tests
        4:  251:    RUN_TEST(test_controller_init_valid_config);
        4:  252:    RUN_TEST(test_controller_init_null_controller);
        4:  253:    RUN_TEST(test_controller_init_null_config);
        4:  254:    RUN_TEST(test_controller_init_invalid_power_range);
        4:  255:    RUN_TEST(test_controller_init_invalid_frequency_range);
        -:  256:
        -:  257:    // Sonicator Control Tests
        4:  258:    RUN_TEST(test_controller_start_sonicator_valid_id);
        4:  259:    RUN_TEST(test_controller_start_sonicator_invalid_id);
        4:  260:    RUN_TEST(test_controller_start_sonicator_invalid_amplitude);
        4:  261:    RUN_TEST(test_controller_start_sonicator_invalid_frequency);
        4:  262:    RUN_TEST(test_controller_stop_sonicator_valid_id);
        4:  263:    RUN_TEST(test_controller_stop_all_sonicators);
        4:  264:    RUN_TEST(test_controller_emergency_stop);
        -:  265:
        -:  266:    // State Machine Tests
        4:  267:    RUN_TEST(test_controller_state_transitions);
        -:  268:
        4:  269:    return UNITY_END();
        -:  270:}
        -:  271:
        -:  272:#endif // UNIT_TEST
