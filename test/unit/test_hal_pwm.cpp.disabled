/**
 * @file test_hal_pwm.cpp
 * @brief Unit tests for HAL PWM module
 * @author Cannasol Technologies
 * @date 2025-09-02
 * @version 1.0.0
 * 
 * Following unity-testing-guide.md patterns for comprehensive PWM testing
 * with mock objects and proper test organization.
 */

#include <unity.h>

#ifdef NATIVE_TEST
#include "../../../src/modules/hal/hal_mock_factory.h"
#else
#include "hal_mock_factory.h"
#endif

// ============================================================================
// TEST FIXTURES
// ============================================================================

static MockHalFactory* mock_factory;
static MockPwmGenerator* mock_pwm;

void setUp(void) {
    mock_factory = new MockHalFactory();
    mock_pwm = mock_factory->getMockPwm();
    mock_pwm->reset();
}

void tearDown(void) {
    delete mock_factory;
    mock_factory = nullptr;
    mock_pwm = nullptr;
}

// ============================================================================
// CORE PWM FUNCTION TESTS
// ============================================================================

void test_HalPwm_Init_Success_ReturnsTrue() {
    // Arrange & Act
    bool result = mock_pwm->init();
    
    // Assert
    TEST_ASSERT_TRUE(result);
}

void test_HalPwm_SetFrequency_ValidChannel_SetsFrequency() {
    // Arrange
    mock_pwm->init();
    uint8_t channel = 0;
    uint32_t frequency = 1000; // 1kHz
    
    // Act
    bool result = mock_pwm->setFrequency(channel, frequency);
    
    // Assert
    TEST_ASSERT_TRUE(result);
    TEST_ASSERT_EQUAL_UINT32(frequency, mock_pwm->getChannelFrequency(channel));
}

void test_HalPwm_SetFrequency_NotInitialized_ReturnsFalse() {
    // Arrange
    uint8_t channel = 0;
    uint32_t frequency = 1000;
    
    // Act
    bool result = mock_pwm->setFrequency(channel, frequency);
    
    // Assert
    TEST_ASSERT_FALSE(result);
}

void test_HalPwm_SetFrequency_EmergencyStopped_ReturnsFalse() {
    // Arrange
    mock_pwm->init();
    mock_pwm->emergencyStop();
    uint8_t channel = 0;
    uint32_t frequency = 1000;
    
    // Act
    bool result = mock_pwm->setFrequency(channel, frequency);
    
    // Assert
    TEST_ASSERT_FALSE(result);
}

void test_HalPwm_SetDutyCycle_ValidDuty_SetsDutyCycle() {
    // Arrange
    mock_pwm->init();
    uint8_t channel = 0;
    uint8_t duty_percent = 75;
    
    // Act
    bool result = mock_pwm->setDutyCycle(channel, duty_percent);
    
    // Assert
    TEST_ASSERT_TRUE(result);
    TEST_ASSERT_EQUAL_UINT8(duty_percent, mock_pwm->getChannelDutyCycle(channel));
}

void test_HalPwm_SetDutyCycle_InvalidDuty_ReturnsFalse() {
    // Arrange
    mock_pwm->init();
    uint8_t channel = 0;
    uint8_t duty_percent = 150; // Invalid: > 100%
    
    // Act
    bool result = mock_pwm->setDutyCycle(channel, duty_percent);
    
    // Assert
    TEST_ASSERT_FALSE(result);
}

void test_HalPwm_EnableChannel_ValidChannel_EnablesChannel() {
    // Arrange
    mock_pwm->init();
    uint8_t channel = 0;
    
    // Act
    bool result = mock_pwm->enableChannel(channel);
    
    // Assert
    TEST_ASSERT_TRUE(result);
    TEST_ASSERT_TRUE(mock_pwm->isChannelEnabled(channel));
}

void test_HalPwm_DisableChannel_ValidChannel_DisablesChannel() {
    // Arrange
    mock_pwm->init();
    uint8_t channel = 0;
    mock_pwm->enableChannel(channel);
    
    // Act
    bool result = mock_pwm->disableChannel(channel);
    
    // Assert
    TEST_ASSERT_TRUE(result);
    TEST_ASSERT_FALSE(mock_pwm->isChannelEnabled(channel));
}

// ============================================================================
// AMPLITUDE CONTROL TESTS
// ============================================================================

void test_HalPwm_SetAmplitude_ValidPercent_SetsAmplitude() {
    // Arrange
    mock_pwm->init();
    uint8_t amplitude_percent = 60;
    
    // Act
    bool result = mock_pwm->setAmplitude(amplitude_percent);
    
    // Assert
    TEST_ASSERT_TRUE(result);
    TEST_ASSERT_EQUAL_UINT8(amplitude_percent, mock_pwm->getAmplitude());
}

void test_HalPwm_SetAmplitude_InvalidPercent_ReturnsFalse() {
    // Arrange
    mock_pwm->init();
    uint8_t amplitude_percent = 120; // Invalid: > 100%
    
    // Act
    bool result = mock_pwm->setAmplitude(amplitude_percent);
    
    // Assert
    TEST_ASSERT_FALSE(result);
}

void test_HalPwm_SetAmplitude_NotInitialized_ReturnsFalse() {
    // Arrange
    uint8_t amplitude_percent = 60;
    
    // Act
    bool result = mock_pwm->setAmplitude(amplitude_percent);
    
    // Assert
    TEST_ASSERT_FALSE(result);
}

void test_HalPwm_SetAmplitude_EmergencyStopped_ReturnsFalse() {
    // Arrange
    mock_pwm->init();
    mock_pwm->emergencyStop();
    uint8_t amplitude_percent = 60;
    
    // Act
    bool result = mock_pwm->setAmplitude(amplitude_percent);
    
    // Assert
    TEST_ASSERT_FALSE(result);
}

// ============================================================================
// EMERGENCY STOP TESTS
// ============================================================================

void test_HalPwm_EmergencyStop_Active_StopsAllChannels() {
    // Arrange
    mock_pwm->init();
    mock_pwm->enableChannel(0);
    mock_pwm->setAmplitude(75);
    
    // Act
    bool result = mock_pwm->emergencyStop();
    
    // Assert
    TEST_ASSERT_TRUE(result);
    TEST_ASSERT_TRUE(mock_pwm->isEmergencyStopped());
    TEST_ASSERT_EQUAL_UINT8(0, mock_pwm->getAmplitude());
    TEST_ASSERT_FALSE(mock_pwm->isChannelEnabled(0));
}

void test_HalPwm_AfterEmergencyStop_AllOperationsFail() {
    // Arrange
    mock_pwm->init();
    mock_pwm->emergencyStop();
    
    // Act & Assert
    TEST_ASSERT_FALSE(mock_pwm->setFrequency(0, 1000));
    TEST_ASSERT_FALSE(mock_pwm->setDutyCycle(0, 50));
    TEST_ASSERT_FALSE(mock_pwm->enableChannel(0));
    TEST_ASSERT_FALSE(mock_pwm->setAmplitude(50));
    TEST_ASSERT_FALSE(mock_pwm->testPattern());
}

// ============================================================================
// TEST PATTERN TESTS
// ============================================================================

void test_HalPwm_TestPattern_Initialized_ReturnsTrue() {
    // Arrange
    mock_pwm->init();
    
    // Act
    bool result = mock_pwm->testPattern();
    
    // Assert
    TEST_ASSERT_TRUE(result);
}

void test_HalPwm_TestPattern_NotInitialized_ReturnsFalse() {
    // Arrange - not initialized
    
    // Act
    bool result = mock_pwm->testPattern();
    
    // Assert
    TEST_ASSERT_FALSE(result);
}

void test_HalPwm_TestPattern_EmergencyStopped_ReturnsFalse() {
    // Arrange
    mock_pwm->init();
    mock_pwm->emergencyStop();
    
    // Act
    bool result = mock_pwm->testPattern();
    
    // Assert
    TEST_ASSERT_FALSE(result);
}

// ============================================================================
// SEQUENCE TESTS
// ============================================================================

void test_HalPwm_AmplitudeRampUp_Sequence_CorrectProgression() {
    // Arrange
    mock_pwm->init();
    
    // Act - Ramp amplitude from 0 to 100% in 25% steps
    for (uint8_t amplitude = 0; amplitude <= 100; amplitude += 25) {
        bool result = mock_pwm->setAmplitude(amplitude);
        
        // Assert each step
        TEST_ASSERT_TRUE(result);
        TEST_ASSERT_EQUAL_UINT8(amplitude, mock_pwm->getAmplitude());
    }
}

void test_HalPwm_ChannelConfiguration_Complete_AllParametersSet() {
    // Arrange
    mock_pwm->init();
    uint8_t channel = 0;
    uint32_t frequency = 20000; // 20kHz
    uint8_t duty_cycle = 80;
    
    // Act - Configure channel completely
    TEST_ASSERT_TRUE(mock_pwm->setFrequency(channel, frequency));
    TEST_ASSERT_TRUE(mock_pwm->setDutyCycle(channel, duty_cycle));
    TEST_ASSERT_TRUE(mock_pwm->enableChannel(channel));
    
    // Assert - All parameters correctly set
    TEST_ASSERT_EQUAL_UINT32(frequency, mock_pwm->getChannelFrequency(channel));
    TEST_ASSERT_EQUAL_UINT8(duty_cycle, mock_pwm->getChannelDutyCycle(channel));
    TEST_ASSERT_TRUE(mock_pwm->isChannelEnabled(channel));
}

void test_HalPwm_AmplitudeControl_SharedChannel_AffectsAllSonicators() {
    // Arrange
    mock_pwm->init();
    
    // Test the shared amplitude control concept from pin matrix
    // PD7 (Pin 21) is AMPLITUDE_ALL - shared for all sonicators
    uint8_t amplitude_levels[] = {0, 25, 50, 75, 100};
    
    // Act & Assert - Test different amplitude levels
    for (uint8_t i = 0; i < 5; i++) {
        bool result = mock_pwm->setAmplitude(amplitude_levels[i]);
        TEST_ASSERT_TRUE(result);
        TEST_ASSERT_EQUAL_UINT8(amplitude_levels[i], mock_pwm->getAmplitude());
        
        // Verify duty cycle on amplitude channel (channel 0)
        TEST_ASSERT_EQUAL_UINT8(amplitude_levels[i], mock_pwm->getChannelDutyCycle(0));
    }
}

// ============================================================================
// BOUNDARY CONDITION TESTS
// ============================================================================

void test_HalPwm_SetDutyCycle_ZeroPercent_ValidSetting() {
    // Arrange
    mock_pwm->init();
    uint8_t channel = 0;
    uint8_t duty_percent = 0;
    
    // Act
    bool result = mock_pwm->setDutyCycle(channel, duty_percent);
    
    // Assert
    TEST_ASSERT_TRUE(result);
    TEST_ASSERT_EQUAL_UINT8(duty_percent, mock_pwm->getChannelDutyCycle(channel));
}

void test_HalPwm_SetDutyCycle_HundredPercent_ValidSetting() {
    // Arrange
    mock_pwm->init();
    uint8_t channel = 0;
    uint8_t duty_percent = 100;
    
    // Act
    bool result = mock_pwm->setDutyCycle(channel, duty_percent);
    
    // Assert
    TEST_ASSERT_TRUE(result);
    TEST_ASSERT_EQUAL_UINT8(duty_percent, mock_pwm->getChannelDutyCycle(channel));
}

void test_HalPwm_SetAmplitude_ZeroPercent_ValidSetting() {
    // Arrange
    mock_pwm->init();
    uint8_t amplitude_percent = 0;
    
    // Act
    bool result = mock_pwm->setAmplitude(amplitude_percent);
    
    // Assert
    TEST_ASSERT_TRUE(result);
    TEST_ASSERT_EQUAL_UINT8(amplitude_percent, mock_pwm->getAmplitude());
}

void test_HalPwm_SetAmplitude_HundredPercent_ValidSetting() {
    // Arrange
    mock_pwm->init();
    uint8_t amplitude_percent = 100;
    
    // Act
    bool result = mock_pwm->setAmplitude(amplitude_percent);
    
    // Assert
    TEST_ASSERT_TRUE(result);
    TEST_ASSERT_EQUAL_UINT8(amplitude_percent, mock_pwm->getAmplitude());
}

// ============================================================================
// ARDUINO FRAMEWORK ENTRY POINT
// ============================================================================

#ifdef ARDUINO
void setup() {
    delay(2000);  // Wait for serial connection
    UNITY_BEGIN();
    
    // Core PWM function tests
    RUN_TEST(test_HalPwm_Init_Success_ReturnsTrue);
    RUN_TEST(test_HalPwm_SetFrequency_ValidChannel_SetsFrequency);
    RUN_TEST(test_HalPwm_SetFrequency_NotInitialized_ReturnsFalse);
    RUN_TEST(test_HalPwm_SetFrequency_EmergencyStopped_ReturnsFalse);
    RUN_TEST(test_HalPwm_SetDutyCycle_ValidDuty_SetsDutyCycle);
    RUN_TEST(test_HalPwm_SetDutyCycle_InvalidDuty_ReturnsFalse);
    RUN_TEST(test_HalPwm_EnableChannel_ValidChannel_EnablesChannel);
    RUN_TEST(test_HalPwm_DisableChannel_ValidChannel_DisablesChannel);
    
    // Amplitude control tests
    RUN_TEST(test_HalPwm_SetAmplitude_ValidPercent_SetsAmplitude);
    RUN_TEST(test_HalPwm_SetAmplitude_InvalidPercent_ReturnsFalse);
    RUN_TEST(test_HalPwm_SetAmplitude_NotInitialized_ReturnsFalse);
    RUN_TEST(test_HalPwm_SetAmplitude_EmergencyStopped_ReturnsFalse);
    
    // Emergency stop tests
    RUN_TEST(test_HalPwm_EmergencyStop_Active_StopsAllChannels);
    RUN_TEST(test_HalPwm_AfterEmergencyStop_AllOperationsFail);
    
    // Test pattern tests
    RUN_TEST(test_HalPwm_TestPattern_Initialized_ReturnsTrue);
    RUN_TEST(test_HalPwm_TestPattern_NotInitialized_ReturnsFalse);
    RUN_TEST(test_HalPwm_TestPattern_EmergencyStopped_ReturnsFalse);
    
    // Sequence tests
    RUN_TEST(test_HalPwm_AmplitudeRampUp_Sequence_CorrectProgression);
    RUN_TEST(test_HalPwm_ChannelConfiguration_Complete_AllParametersSet);
    RUN_TEST(test_HalPwm_AmplitudeControl_SharedChannel_AffectsAllSonicators);
    
    // Boundary condition tests
    RUN_TEST(test_HalPwm_SetDutyCycle_ZeroPercent_ValidSetting);
    RUN_TEST(test_HalPwm_SetDutyCycle_HundredPercent_ValidSetting);
    RUN_TEST(test_HalPwm_SetAmplitude_ZeroPercent_ValidSetting);
    RUN_TEST(test_HalPwm_SetAmplitude_HundredPercent_ValidSetting);
    
    UNITY_END();
}

void loop() {
    // Empty loop for Arduino
}

// ============================================================================
// NATIVE PLATFORM ENTRY POINT
// ============================================================================

#else
int main(int argc, char **argv) {
    UNITY_BEGIN();
    
    // Core PWM function tests
    RUN_TEST(test_HalPwm_Init_Success_ReturnsTrue);
    RUN_TEST(test_HalPwm_SetFrequency_ValidChannel_SetsFrequency);
    RUN_TEST(test_HalPwm_SetFrequency_NotInitialized_ReturnsFalse);
    RUN_TEST(test_HalPwm_SetFrequency_EmergencyStopped_ReturnsFalse);
    RUN_TEST(test_HalPwm_SetDutyCycle_ValidDuty_SetsDutyCycle);
    RUN_TEST(test_HalPwm_SetDutyCycle_InvalidDuty_ReturnsFalse);
    RUN_TEST(test_HalPwm_EnableChannel_ValidChannel_EnablesChannel);
    RUN_TEST(test_HalPwm_DisableChannel_ValidChannel_DisablesChannel);
    
    // Amplitude control tests
    RUN_TEST(test_HalPwm_SetAmplitude_ValidPercent_SetsAmplitude);
    RUN_TEST(test_HalPwm_SetAmplitude_InvalidPercent_ReturnsFalse);
    RUN_TEST(test_HalPwm_SetAmplitude_NotInitialized_ReturnsFalse);
    RUN_TEST(test_HalPwm_SetAmplitude_EmergencyStopped_ReturnsFalse);
    
    // Emergency stop tests
    RUN_TEST(test_HalPwm_EmergencyStop_Active_StopsAllChannels);
    RUN_TEST(test_HalPwm_AfterEmergencyStop_AllOperationsFail);
    
    // Test pattern tests
    RUN_TEST(test_HalPwm_TestPattern_Initialized_ReturnsTrue);
    RUN_TEST(test_HalPwm_TestPattern_NotInitialized_ReturnsFalse);
    RUN_TEST(test_HalPwm_TestPattern_EmergencyStopped_ReturnsFalse);
    
    // Sequence tests
    RUN_TEST(test_HalPwm_AmplitudeRampUp_Sequence_CorrectProgression);
    RUN_TEST(test_HalPwm_ChannelConfiguration_Complete_AllParametersSet);
    RUN_TEST(test_HalPwm_AmplitudeControl_SharedChannel_AffectsAllSonicators);
    
    // Boundary condition tests
    RUN_TEST(test_HalPwm_SetDutyCycle_ZeroPercent_ValidSetting);
    RUN_TEST(test_HalPwm_SetDutyCycle_HundredPercent_ValidSetting);
    RUN_TEST(test_HalPwm_SetAmplitude_ZeroPercent_ValidSetting);
    RUN_TEST(test_HalPwm_SetAmplitude_HundredPercent_ValidSetting);
    
    return UNITY_END();
}
#endif
