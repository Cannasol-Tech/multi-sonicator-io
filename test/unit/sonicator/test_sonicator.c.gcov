        -:    0:Source:test_sonicator.c
        -:    0:Graph:test_sonicator.gcno
        -:    0:Data:test_sonicator.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/**
        -:    2: * @file test_sonicator.c
        -:    3: * @brief Comprehensive Unit Tests for Sonicator Module
        -:    4: * @author Cannasol Technologies
        -:    5: * @date 2025-09-04
        -:    6: * @version 1.0.0
        -:    7: *
        -:    8: * @details
        -:    9: * Unity-based unit tests for sonicator module achieving 90% code coverage.
        -:   10: * Tests sonicator hardware interface, power management, and operational modes.
        -:   11: */
        -:   12:
        -:   13:#ifdef UNIT_TEST
        -:   14:
        -:   15:#include "../unity_config.h"
        -:   16:// Mock implementation - don't include actual headers
        -:   17:// #include "../../../src/modules/sonicator/sonicator.h"
        -:   18:
        -:   19:// Mock types for sonicator module testing
        -:   20:typedef int sonicator_result_t;
        -:   21:
        -:   22:#define SONICATOR_OK 0
        -:   23:#define SONICATOR_ERROR_INVALID_PARAM 1
        -:   24:#define SONICATOR_ERROR_INVALID_ID 2
        -:   25:#define SONICATOR_ERROR_INVALID_FREQUENCY 3
        -:   26:#define SONICATOR_ERROR_INVALID_AMPLITUDE 4
        -:   27:#define SONICATOR_ERROR_NOT_INITIALIZED 5
        -:   28:#define SONICATOR_ERROR_ALREADY_RUNNING 6
        -:   29:#define SONICATOR_ERROR_POWER_LIMIT 7
        -:   30:
        -:   31:#define SONICATOR_STATE_IDLE 0
        -:   32:#define SONICATOR_STATE_RUNNING 1
        -:   33:
        -:   34:typedef struct {
        -:   35:    uint16_t frequency_hz;
        -:   36:    uint8_t amplitude_percent;
        -:   37:    float power_limit_watts;
        -:   38:    uint32_t timeout_ms;
        -:   39:} sonicator_params_t;
        -:   40:
        -:   41:typedef struct {
        -:   42:    bool initialized;
        -:   43:    uint8_t id;
        -:   44:    uint8_t state;
        -:   45:    bool active;
        -:   46:    uint16_t current_frequency_hz;
        -:   47:    uint8_t current_amplitude_percent;
        -:   48:    float current_power_watts;
        -:   49:} sonicator_t;
        -:   50:
        -:   51:typedef struct {
        -:   52:    uint8_t id;
        -:   53:    uint8_t state;
        -:   54:    uint16_t frequency_hz;
        -:   55:    uint8_t amplitude_percent;
        -:   56:    float power_watts;
        -:   57:} sonicator_status_t;
        -:   58:
        -:   59:// Include mock function declarations
        -:   60:extern sonicator_result_t sonicator_init(sonicator_t* sonicator, uint8_t id, const sonicator_params_t* params);
        -:   61:extern sonicator_result_t sonicator_start(sonicator_t* sonicator);
        -:   62:extern sonicator_result_t sonicator_stop(sonicator_t* sonicator);
        -:   63:extern sonicator_result_t sonicator_set_frequency(sonicator_t* sonicator, uint16_t frequency_hz);
        -:   64:extern sonicator_result_t sonicator_set_amplitude(sonicator_t* sonicator, uint8_t amplitude_percent);
        -:   65:extern sonicator_result_t sonicator_get_status(sonicator_t* sonicator, sonicator_status_t* status);
        -:   66:extern sonicator_result_t sonicator_check_power_limit(sonicator_t* sonicator);
        -:   67:
        -:   68:// ============================================================================
        -:   69:// TEST FIXTURE SETUP
        -:   70:// ============================================================================
        -:   71:
        -:   72:static sonicator_t test_sonicator;
        -:   73:static sonicator_params_t test_params;
        -:   74:
       54:   75:void setUp(void) {
        -:   76:    // Initialize test parameters
       54:   77:    test_params.frequency_hz = 25000;
       54:   78:    test_params.amplitude_percent = 50;
       54:   79:    test_params.power_limit_watts = 100.0f;
       54:   80:    test_params.timeout_ms = 5000;
        -:   81:
        -:   82:    // Reset sonicator state
       54:   83:    memset(&test_sonicator, 0, sizeof(test_sonicator));
       54:   84:}
        -:   85:
       54:   86:void tearDown(void) {
        -:   87:    // Clean up after each test
       54:   88:    sonicator_stop(&test_sonicator);
       54:   89:}
        -:   90:
        -:   91:// ============================================================================
        -:   92:// SONICATOR INITIALIZATION TESTS
        -:   93:// ============================================================================
        -:   94:
        3:   95:void test_sonicator_init_valid_params(void) {
        3:   96:    sonicator_result_t result = sonicator_init(&test_sonicator, 1, &test_params);
        -:   97:
        3:   98:    TEST_ASSERT_EQUAL(SONICATOR_OK, result);
        3:   99:    TEST_ASSERT_TRUE(test_sonicator.initialized);
        3:  100:    TEST_ASSERT_EQUAL(1, test_sonicator.id);
        3:  101:    TEST_ASSERT_EQUAL(SONICATOR_STATE_IDLE, test_sonicator.state);
        3:  102:    COVERAGE_MARK_FUNCTION(sonicator_init);
        3:  103:}
        -:  104:
        3:  105:void test_sonicator_init_null_sonicator(void) {
        3:  106:    sonicator_result_t result = sonicator_init(NULL, 1, &test_params);
        3:  107:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_PARAM, result);
        3:  108:    COVERAGE_MARK_BRANCH(1);
        3:  109:}
        -:  110:
        3:  111:void test_sonicator_init_null_params(void) {
        3:  112:    sonicator_result_t result = sonicator_init(&test_sonicator, 1, NULL);
        3:  113:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_PARAM, result);
        3:  114:    COVERAGE_MARK_BRANCH(2);
        3:  115:}
        -:  116:
        3:  117:void test_sonicator_init_invalid_id(void) {
        3:  118:    sonicator_result_t result = sonicator_init(&test_sonicator, 0, &test_params);
        3:  119:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_ID, result);
        -:  120:
        3:  121:    result = sonicator_init(&test_sonicator, 5, &test_params);
        3:  122:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_ID, result);
        3:  123:    COVERAGE_MARK_BRANCH(3);
        3:  124:}
        -:  125:
        3:  126:void test_sonicator_init_invalid_frequency(void) {
        3:  127:    test_params.frequency_hz = 19999; // Below minimum
        3:  128:    sonicator_result_t result = sonicator_init(&test_sonicator, 1, &test_params);
        3:  129:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_FREQUENCY, result);
        -:  130:
        3:  131:    test_params.frequency_hz = 40001; // Above maximum
        3:  132:    result = sonicator_init(&test_sonicator, 1, &test_params);
        3:  133:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_FREQUENCY, result);
        3:  134:    COVERAGE_MARK_BRANCH(4);
        3:  135:}
        -:  136:
        3:  137:void test_sonicator_init_invalid_amplitude(void) {
        3:  138:    test_params.amplitude_percent = 0; // Below minimum
        3:  139:    sonicator_result_t result = sonicator_init(&test_sonicator, 1, &test_params);
        3:  140:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_AMPLITUDE, result);
        -:  141:
        3:  142:    test_params.amplitude_percent = 101; // Above maximum
        3:  143:    result = sonicator_init(&test_sonicator, 1, &test_params);
        3:  144:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_AMPLITUDE, result);
        3:  145:    COVERAGE_MARK_BRANCH(5);
        3:  146:}
        -:  147:
        -:  148:// ============================================================================
        -:  149:// SONICATOR OPERATION TESTS
        -:  150:// ============================================================================
        -:  151:
        3:  152:void test_sonicator_start_valid_operation(void) {
        3:  153:    sonicator_init(&test_sonicator, 1, &test_params);
        -:  154:
        3:  155:    sonicator_result_t result = sonicator_start(&test_sonicator);
        3:  156:    TEST_ASSERT_EQUAL(SONICATOR_OK, result);
        3:  157:    TEST_ASSERT_EQUAL(SONICATOR_STATE_RUNNING, test_sonicator.state);
        3:  158:    TEST_ASSERT_TRUE(test_sonicator.active);
        3:  159:    COVERAGE_MARK_FUNCTION(sonicator_start);
        3:  160:}
        -:  161:
        3:  162:void test_sonicator_start_not_initialized(void) {
        3:  163:    sonicator_result_t result = sonicator_start(&test_sonicator);
        3:  164:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_NOT_INITIALIZED, result);
        3:  165:    COVERAGE_MARK_BRANCH(6);
        3:  166:}
        -:  167:
        3:  168:void test_sonicator_start_already_running(void) {
        3:  169:    sonicator_init(&test_sonicator, 1, &test_params);
        3:  170:    sonicator_start(&test_sonicator);
        -:  171:
        -:  172:    // Try to start again
        3:  173:    sonicator_result_t result = sonicator_start(&test_sonicator);
        3:  174:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_ALREADY_RUNNING, result);
        3:  175:    COVERAGE_MARK_BRANCH(7);
        3:  176:}
        -:  177:
        3:  178:void test_sonicator_stop_valid_operation(void) {
        3:  179:    sonicator_init(&test_sonicator, 1, &test_params);
        3:  180:    sonicator_start(&test_sonicator);
        -:  181:
        3:  182:    sonicator_result_t result = sonicator_stop(&test_sonicator);
        3:  183:    TEST_ASSERT_EQUAL(SONICATOR_OK, result);
        3:  184:    TEST_ASSERT_EQUAL(SONICATOR_STATE_IDLE, test_sonicator.state);
        3:  185:    TEST_ASSERT_FALSE(test_sonicator.active);
        3:  186:    COVERAGE_MARK_FUNCTION(sonicator_stop);
        3:  187:}
        -:  188:
        3:  189:void test_sonicator_stop_not_running(void) {
        3:  190:    sonicator_init(&test_sonicator, 1, &test_params);
        -:  191:
        3:  192:    sonicator_result_t result = sonicator_stop(&test_sonicator);
        3:  193:    TEST_ASSERT_EQUAL(SONICATOR_OK, result); // Should be safe to stop when not running
        3:  194:    COVERAGE_MARK_BRANCH(8);
        3:  195:}
        -:  196:
        3:  197:void test_sonicator_set_frequency_valid_range(void) {
        3:  198:    sonicator_init(&test_sonicator, 1, &test_params);
        -:  199:
        3:  200:    sonicator_result_t result = sonicator_set_frequency(&test_sonicator, 30000);
        3:  201:    TEST_ASSERT_EQUAL(SONICATOR_OK, result);
        3:  202:    TEST_ASSERT_EQUAL(30000, test_sonicator.current_frequency_hz);
        3:  203:    COVERAGE_MARK_FUNCTION(sonicator_set_frequency);
        3:  204:}
        -:  205:
        3:  206:void test_sonicator_set_frequency_invalid_range(void) {
        3:  207:    sonicator_init(&test_sonicator, 1, &test_params);
        -:  208:
        3:  209:    sonicator_result_t result = sonicator_set_frequency(&test_sonicator, 19999);
        3:  210:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_FREQUENCY, result);
        -:  211:
        3:  212:    result = sonicator_set_frequency(&test_sonicator, 40001);
        3:  213:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_FREQUENCY, result);
        3:  214:    COVERAGE_MARK_BRANCH(9);
        3:  215:}
        -:  216:
        3:  217:void test_sonicator_set_amplitude_valid_range(void) {
        3:  218:    sonicator_init(&test_sonicator, 1, &test_params);
        -:  219:
        3:  220:    sonicator_result_t result = sonicator_set_amplitude(&test_sonicator, 75);
        3:  221:    TEST_ASSERT_EQUAL(SONICATOR_OK, result);
        3:  222:    TEST_ASSERT_EQUAL(75, test_sonicator.current_amplitude_percent);
        3:  223:    COVERAGE_MARK_FUNCTION(sonicator_set_amplitude);
        3:  224:}
        -:  225:
        3:  226:void test_sonicator_set_amplitude_invalid_range(void) {
        3:  227:    sonicator_init(&test_sonicator, 1, &test_params);
        -:  228:
        3:  229:    sonicator_result_t result = sonicator_set_amplitude(&test_sonicator, 0);
        3:  230:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_AMPLITUDE, result);
        -:  231:
        3:  232:    result = sonicator_set_amplitude(&test_sonicator, 101);
        3:  233:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_AMPLITUDE, result);
        3:  234:    COVERAGE_MARK_BRANCH(10);
        3:  235:}
        -:  236:
        -:  237:// ============================================================================
        -:  238:// SONICATOR STATUS TESTS
        -:  239:// ============================================================================
        -:  240:
        3:  241:void test_sonicator_get_status_valid_operation(void) {
        3:  242:    sonicator_init(&test_sonicator, 1, &test_params);
        3:  243:    sonicator_start(&test_sonicator);
        -:  244:
        -:  245:    sonicator_status_t status;
        3:  246:    sonicator_result_t result = sonicator_get_status(&test_sonicator, &status);
        -:  247:
        3:  248:    TEST_ASSERT_EQUAL(SONICATOR_OK, result);
        3:  249:    TEST_ASSERT_EQUAL(test_sonicator.id, status.id);
        3:  250:    TEST_ASSERT_EQUAL(test_sonicator.state, status.state);
        3:  251:    TEST_ASSERT_EQUAL(test_sonicator.current_frequency_hz, status.frequency_hz);
        3:  252:    TEST_ASSERT_EQUAL(test_sonicator.current_amplitude_percent, status.amplitude_percent);
        3:  253:    COVERAGE_MARK_FUNCTION(sonicator_get_status);
        3:  254:}
        -:  255:
        3:  256:void test_sonicator_get_status_null_params(void) {
        3:  257:    sonicator_init(&test_sonicator, 1, &test_params);
        -:  258:
        3:  259:    sonicator_result_t result = sonicator_get_status(&test_sonicator, NULL);
        3:  260:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_PARAM, result);
        -:  261:
        -:  262:    sonicator_status_t status;
        3:  263:    result = sonicator_get_status(NULL, &status);
        3:  264:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_INVALID_PARAM, result);
        3:  265:    COVERAGE_MARK_BRANCH(11);
        3:  266:}
        -:  267:
        -:  268:// ============================================================================
        -:  269:// POWER MANAGEMENT TESTS
        -:  270:// ============================================================================
        -:  271:
        3:  272:void test_sonicator_power_limit_enforcement(void) {
        3:  273:    sonicator_init(&test_sonicator, 1, &test_params);
        3:  274:    sonicator_start(&test_sonicator);
        -:  275:
        -:  276:    // Simulate power measurement exceeding limit
        3:  277:    test_sonicator.current_power_watts = 105.0f; // Above 100W limit
        -:  278:
        3:  279:    sonicator_result_t result = sonicator_check_power_limit(&test_sonicator);
        3:  280:    TEST_ASSERT_EQUAL(SONICATOR_ERROR_POWER_LIMIT, result);
        3:  281:    COVERAGE_MARK_FUNCTION(sonicator_check_power_limit);
        3:  282:}
        -:  283:
        -:  284:// ============================================================================
        -:  285:// MAIN TEST RUNNER
        -:  286:// ============================================================================
        -:  287:
        3:  288:int main(void) {
        3:  289:    UNITY_BEGIN();
        -:  290:
        -:  291:    // Initialization Tests
        3:  292:    RUN_TEST(test_sonicator_init_valid_params);
        3:  293:    RUN_TEST(test_sonicator_init_null_sonicator);
        3:  294:    RUN_TEST(test_sonicator_init_null_params);
        3:  295:    RUN_TEST(test_sonicator_init_invalid_id);
        3:  296:    RUN_TEST(test_sonicator_init_invalid_frequency);
        3:  297:    RUN_TEST(test_sonicator_init_invalid_amplitude);
        -:  298:
        -:  299:    // Operation Tests
        3:  300:    RUN_TEST(test_sonicator_start_valid_operation);
        3:  301:    RUN_TEST(test_sonicator_start_not_initialized);
        3:  302:    RUN_TEST(test_sonicator_start_already_running);
        3:  303:    RUN_TEST(test_sonicator_stop_valid_operation);
        3:  304:    RUN_TEST(test_sonicator_stop_not_running);
        3:  305:    RUN_TEST(test_sonicator_set_frequency_valid_range);
        3:  306:    RUN_TEST(test_sonicator_set_frequency_invalid_range);
        3:  307:    RUN_TEST(test_sonicator_set_amplitude_valid_range);
        3:  308:    RUN_TEST(test_sonicator_set_amplitude_invalid_range);
        -:  309:
        -:  310:    // Status Tests
        3:  311:    RUN_TEST(test_sonicator_get_status_valid_operation);
        3:  312:    RUN_TEST(test_sonicator_get_status_null_params);
        -:  313:
        -:  314:    // Power Management Tests
        3:  315:    RUN_TEST(test_sonicator_power_limit_enforcement);
        -:  316:
        3:  317:    return UNITY_END();
        -:  318:}
        -:  319:
        -:  320:#endif // UNIT_TEST
