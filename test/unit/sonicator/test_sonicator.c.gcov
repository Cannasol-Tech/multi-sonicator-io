        -:    0:Source:test_sonicator.c
        -:    0:Graph:test_sonicator.gcno
        -:    0:Data:test_sonicator.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:/**
        -:    2: * @file test_sonicator_minimal.c
        -:    3: * @brief Minimal Interface Tests for Sonicator Control Module
        -:    4: * @author Cannasol Technologies
        -:    5: * @date 2025-09-12
        -:    6: * @version 1.0.0
        -:    7: *
        -:    8: * @details
        -:    9: * Basic Unity-based tests for sonicator control interface to boost coverage.
        -:   10: */
        -:   11:
        -:   12:#ifdef UNIT_TEST
        -:   13:
        -:   14:#include "../unity_system_config.h"
        -:   15:#include "../../../include/sonicator_control.h"
        -:   16:
        -:   17:// ============================================================================
        -:   18:// TEST FIXTURE SETUP
        -:   19:// ============================================================================
        -:   20:
       15:   21:void setUp(void) {
        -:   22:    // Basic setup for interface testing
       15:   23:}
        -:   24:
       15:   25:void tearDown(void) {
        -:   26:    // Basic cleanup
       15:   27:}
        -:   28:
        -:   29:// ============================================================================
        -:   30:// INTERFACE CONSTANTS TESTS
        -:   31:// ============================================================================
        -:   32:
        5:   33:void test_sonicator_interface_constants(void) {
        -:   34:    // Test that sonicator constants are properly defined
        5:   35:    TEST_ASSERT_GREATER_THAN(0, SONICATOR_MIN_AMPLITUDE_PERCENT);
        5:   36:    TEST_ASSERT_GREATER_THAN(SONICATOR_MIN_AMPLITUDE_PERCENT, SONICATOR_MAX_AMPLITUDE_PERCENT);
        5:   37:    TEST_ASSERT_GREATER_THAN(0, SONICATOR_START_DELAY_MS);
        5:   38:    TEST_ASSERT_GREATER_THAN(0, SONICATOR_STOP_DELAY_MS);
        5:   39:    COVERAGE_MARK_FUNCTION(sonicator_constants);
        5:   40:}
        -:   41:
        5:   42:void test_sonicator_fault_constants(void) {
        -:   43:    // Test fault constants
        5:   44:    TEST_ASSERT_NOT_EQUAL(SONICATOR_FAULT_NONE, SONICATOR_FAULT_OVERLOAD);
        5:   45:    TEST_ASSERT_NOT_EQUAL(SONICATOR_FAULT_NONE, SONICATOR_FAULT_FREQ_UNLOCK);
        5:   46:    TEST_ASSERT_NOT_EQUAL(SONICATOR_FAULT_NONE, SONICATOR_FAULT_COMM_TIMEOUT);
        5:   47:    COVERAGE_MARK_FUNCTION(sonicator_fault_constants);
        5:   48:}
        -:   49:
        5:   50:void test_sonicator_state_constants(void) {
        -:   51:    // Test state constants
        5:   52:    TEST_ASSERT_NOT_EQUAL(SONICATOR_STATE_IDLE, SONICATOR_STATE_STARTING);
        5:   53:    TEST_ASSERT_NOT_EQUAL(SONICATOR_STATE_IDLE, SONICATOR_STATE_RUNNING);
        5:   54:    TEST_ASSERT_NOT_EQUAL(SONICATOR_STATE_IDLE, SONICATOR_STATE_FAULT);
        5:   55:    COVERAGE_MARK_FUNCTION(sonicator_state_constants);
        5:   56:}
        -:   57:
        -:   58:// ============================================================================
        -:   59:// MAIN TEST RUNNER
        -:   60:// ============================================================================
        -:   61:
        5:   62:int main(void) {
        5:   63:    UNITY_BEGIN();
        -:   64:    
        -:   65:    // Basic Interface Tests
        5:   66:    RUN_TEST(test_sonicator_interface_constants);
        5:   67:    RUN_TEST(test_sonicator_fault_constants);
        5:   68:    RUN_TEST(test_sonicator_state_constants);
        -:   69:    
        5:   70:    return UNITY_END();
        -:   71:}
        -:   72:
        -:   73:#endif // UNIT_TEST
