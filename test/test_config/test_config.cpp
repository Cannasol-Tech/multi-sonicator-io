/**
 * @file test_config.cpp
 * @brief Configuration validation tests
 * @author Cannasol Technologies
 * @date 2025-07-17
 */

#include <unity.h>
#include <Arduino.h>
#include "../../include/config.h"
#include "../../include/types.h"

/**
 * @brief Test project information constants
 */
void test_config_constants() {
    TEST_ASSERT_EQUAL_STRING("Multi Sonicator I/O Controller", PROJECT_NAME);
    TEST_ASSERT_EQUAL_STRING("CAN-SON-CTRL-4", PROJECT_MODEL);
    TEST_ASSERT_EQUAL_STRING("1.0.0", PROJECT_VERSION);
    TEST_ASSERT_EQUAL_STRING("Cannasol Technologies", MANUFACTURER);
    TEST_ASSERT_EQUAL_STRING("ATmega32A-PU", MCU_TYPE);
    TEST_ASSERT_EQUAL_INT32(16000000L, MCU_FREQUENCY);
    TEST_ASSERT_EQUAL_INT(4, MAX_SONICATORS);
    TEST_ASSERT_EQUAL_INT(2, MODBUS_SLAVE_ID);
    TEST_ASSERT_EQUAL_INT(115200, MODBUS_BAUD_RATE);
}

/**
 * @brief Test pin definitions are within valid range
 */
void test_pin_definitions() {
    // Test status LED pins
    TEST_ASSERT_TRUE(LED_POWER_PIN >= 0 && LED_POWER_PIN <= 31);
    TEST_ASSERT_TRUE(LED_RUN_PIN >= 0 && LED_RUN_PIN <= 31);
    TEST_ASSERT_TRUE(LED_ERROR_PIN >= 0 && LED_ERROR_PIN <= 31);
    TEST_ASSERT_TRUE(LED_COMM_PIN >= 0 && LED_COMM_PIN <= 31);
    
    // Test sonicator LED pins
    TEST_ASSERT_TRUE(LED_SONICATOR_1 >= 0 && LED_SONICATOR_1 <= 31);
    TEST_ASSERT_TRUE(LED_SONICATOR_2 >= 0 && LED_SONICATOR_2 <= 31);
    TEST_ASSERT_TRUE(LED_SONICATOR_3 >= 0 && LED_SONICATOR_3 <= 31);
    TEST_ASSERT_TRUE(LED_SONICATOR_4 >= 0 && LED_SONICATOR_4 <= 31);
    
    // Test UART pins
    TEST_ASSERT_TRUE(UART_RX_PIN >= 0 && UART_RX_PIN <= 31);
    TEST_ASSERT_TRUE(UART_TX_PIN >= 0 && UART_TX_PIN <= 31);
    
    // Test I2C pins
    TEST_ASSERT_TRUE(I2C_SDA_PIN >= 0 && I2C_SDA_PIN <= 31);
    TEST_ASSERT_TRUE(I2C_SCL_PIN >= 0 && I2C_SCL_PIN <= 31);
}

/**
 * @brief Test sonicator specification limits
 */
void test_sonicator_limits() {
    TEST_ASSERT_EQUAL_INT(20000, SONICATOR_FREQ_NOMINAL);
    TEST_ASSERT_EQUAL_INT(20, SONICATOR_FREQ_TOLERANCE);
    TEST_ASSERT_EQUAL_INT(2000, SONICATOR_MAX_POWER);
    TEST_ASSERT_EQUAL_INT(20, SONICATOR_MIN_AMPLITUDE);
    TEST_ASSERT_EQUAL_INT(100, SONICATOR_MAX_AMPLITUDE);
    
    // Test validation ranges
    TEST_ASSERT_EQUAL_INT(19900, MIN_VALID_FREQUENCY_HZ);
    TEST_ASSERT_EQUAL_INT(20100, MAX_VALID_FREQUENCY_HZ);
    TEST_ASSERT_EQUAL_INT(0, MIN_VALID_POWER_WATTS);
    TEST_ASSERT_EQUAL_INT(2200, MAX_VALID_POWER_WATTS);
    TEST_ASSERT_EQUAL_INT(20, MIN_VALID_AMPLITUDE_PERCENT);
    TEST_ASSERT_EQUAL_INT(100, MAX_VALID_AMPLITUDE_PERCENT);
}

/**
 * @brief Test MODBUS register addresses
 */
void test_modbus_registers() {
    // Test control register ranges
    TEST_ASSERT_TRUE(REG_SONICATOR_1_AMPLITUDE >= 40001 && REG_SONICATOR_1_AMPLITUDE <= 49999);
    TEST_ASSERT_TRUE(REG_SONICATOR_2_AMPLITUDE >= 40001 && REG_SONICATOR_2_AMPLITUDE <= 49999);
    TEST_ASSERT_TRUE(REG_SONICATOR_3_AMPLITUDE >= 40001 && REG_SONICATOR_3_AMPLITUDE <= 49999);
    TEST_ASSERT_TRUE(REG_SONICATOR_4_AMPLITUDE >= 40001 && REG_SONICATOR_4_AMPLITUDE <= 49999);
    
    // Test register uniqueness
    TEST_ASSERT_NOT_EQUAL(REG_SONICATOR_1_AMPLITUDE, REG_SONICATOR_2_AMPLITUDE);
    TEST_ASSERT_NOT_EQUAL(REG_SONICATOR_1_AMPLITUDE, REG_SONICATOR_3_AMPLITUDE);
    TEST_ASSERT_NOT_EQUAL(REG_SONICATOR_1_AMPLITUDE, REG_SONICATOR_4_AMPLITUDE);
    
    // Test system registers
    TEST_ASSERT_TRUE(REG_SYSTEM_STATUS >= 40001 && REG_SYSTEM_STATUS <= 49999);
    TEST_ASSERT_TRUE(REG_EMERGENCY_STOP >= 40001 && REG_EMERGENCY_STOP <= 49999);
}

/**
 * @brief Test error code enumeration
 */
void test_error_codes() {
    TEST_ASSERT_EQUAL_INT(0, ERROR_NONE);
    TEST_ASSERT_EQUAL_INT(1, ERROR_MODBUS_TIMEOUT);
    TEST_ASSERT_EQUAL_INT(2, ERROR_MODBUS_CRC);
    TEST_ASSERT_EQUAL_INT(3, ERROR_SONICATOR_OVERLOAD);
    TEST_ASSERT_EQUAL_INT(4, ERROR_FREQUENCY_LOCK_LOST);
    TEST_ASSERT_EQUAL_INT(5, ERROR_POWER_OUT_OF_RANGE);
    TEST_ASSERT_EQUAL_INT(6, ERROR_PWM_AMPLITUDE_FAILURE);
    TEST_ASSERT_EQUAL_INT(7, ERROR_ADC_POWER_FAILURE);
    TEST_ASSERT_EQUAL_INT(8, ERROR_WATCHDOG_TIMEOUT);
    TEST_ASSERT_EQUAL_INT(9, ERROR_EMERGENCY_STOP);
    TEST_ASSERT_EQUAL_INT(10, ERROR_SYSTEM_FAULT);
}