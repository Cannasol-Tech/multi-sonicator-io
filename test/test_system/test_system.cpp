/**
 * @file test_system.cpp
 * @brief System initialization and integration tests
 * @author Cannasol Technologies
 * @date 2025-07-17
 */

#include <unity.h>
#include <Arduino.h>
#include "../../include/config.h"
#include "../../include/types.h"

/**
 * @brief Test system initialization sequence
 */
void test_system_initialization() {
    // Test that critical constants are properly defined
    TEST_ASSERT_TRUE(MAX_SONICATORS > 0);
    TEST_ASSERT_TRUE(MAX_SONICATORS <= 4);
    TEST_ASSERT_TRUE(MODBUS_BAUD_RATE > 0);
    TEST_ASSERT_TRUE(MCU_FREQUENCY > 0);
    
    // Test timing requirements
    TEST_ASSERT_TRUE(EMERGENCY_STOP_RESPONSE_US <= 100);
    TEST_ASSERT_TRUE(WATCHDOG_TIMEOUT_MS >= 500);
    TEST_ASSERT_TRUE(SAFETY_MONITOR_INTERVAL_MS <= 10);
    TEST_ASSERT_TRUE(MAIN_LOOP_INTERVAL_MS <= 20);
    
    // Test that status flags are properly defined
    TEST_ASSERT_EQUAL_INT(0x0001, STATUS_SYSTEM_OK);
    TEST_ASSERT_EQUAL_INT(0x0002, STATUS_EMERGENCY_STOP);
    TEST_ASSERT_EQUAL_INT(0x0004, STATUS_COMMUNICATION_ERROR);
    TEST_ASSERT_EQUAL_INT(0x0008, STATUS_POWER_FAULT);
    TEST_ASSERT_EQUAL_INT(0x0010, STATUS_OVERLOAD_ACTIVE);
    TEST_ASSERT_EQUAL_INT(0x0020, STATUS_WATCHDOG_RESET);
}

/**
 * @brief Test sonicator state enumeration
 */
void test_sonicator_states() {
    TEST_ASSERT_EQUAL_INT(0, SONICATOR_STATE_STOPPED);
    TEST_ASSERT_EQUAL_INT(1, SONICATOR_STATE_STARTING);
    TEST_ASSERT_EQUAL_INT(2, SONICATOR_STATE_RUNNING);
    TEST_ASSERT_EQUAL_INT(3, SONICATOR_STATE_STOPPING);
    TEST_ASSERT_EQUAL_INT(4, SONICATOR_STATE_OVERLOAD);
    TEST_ASSERT_EQUAL_INT(5, SONICATOR_STATE_FAULT);
    TEST_ASSERT_EQUAL_INT(6, SONICATOR_STATE_UNKNOWN);
}

/**
 * @brief Test system mode enumeration
 */
void test_system_modes() {
    TEST_ASSERT_EQUAL_INT(0, SYSTEM_MODE_INIT);
    TEST_ASSERT_EQUAL_INT(1, SYSTEM_MODE_NORMAL);
    TEST_ASSERT_EQUAL_INT(2, SYSTEM_MODE_SAFETY);
    TEST_ASSERT_EQUAL_INT(3, SYSTEM_MODE_MAINTENANCE);
    TEST_ASSERT_EQUAL_INT(4, SYSTEM_MODE_ERROR);
}

/**
 * @brief Test safety event enumeration
 */
void test_safety_events() {
    TEST_ASSERT_EQUAL_INT(0, SAFETY_EVENT_NONE);
    TEST_ASSERT_EQUAL_INT(1, SAFETY_EVENT_EMERGENCY_STOP);
    TEST_ASSERT_EQUAL_INT(2, SAFETY_EVENT_OVERLOAD_DETECTED);
    TEST_ASSERT_EQUAL_INT(3, SAFETY_EVENT_FREQUENCY_LOCK_LOST);
    TEST_ASSERT_EQUAL_INT(4, SAFETY_EVENT_POWER_FAULT);
    TEST_ASSERT_EQUAL_INT(5, SAFETY_EVENT_COMMUNICATION_TIMEOUT);
    TEST_ASSERT_EQUAL_INT(6, SAFETY_EVENT_WATCHDOG_TIMEOUT);
    TEST_ASSERT_EQUAL_INT(7, SAFETY_EVENT_SYSTEM_FAULT);
}

/**
 * @brief Test DB9 pin mapping constants
 */
void test_db9_pin_mapping() {
    TEST_ASSERT_EQUAL_INT(1, DB9_OVERLOAD_INDICATION);
    TEST_ASSERT_EQUAL_INT(2, DB9_OVERLOAD_RESET);
    TEST_ASSERT_EQUAL_INT(3, DB9_FREQUENCY_LOCK);
    TEST_ASSERT_EQUAL_INT(4, DB9_FREQUENCY_OUTPUT);
    TEST_ASSERT_EQUAL_INT(5, DB9_POWER_OUTPUT);
    TEST_ASSERT_EQUAL_INT(6, DB9_SIGNAL_GROUND);
    TEST_ASSERT_EQUAL_INT(7, DB9_SONICS_START);
    TEST_ASSERT_EQUAL_INT(8, DB9_AMPLITUDE_CONTROL);
    TEST_ASSERT_EQUAL_INT(9, DB9_EMITTER_COMMON);
}

// Unity harness for this suite
void setUp() {}
void tearDown() {}

int main() {
    UNITY_BEGIN();
    RUN_TEST(test_system_initialization);
    RUN_TEST(test_sonicator_states);
    RUN_TEST(test_system_modes);
    RUN_TEST(test_safety_events);
    RUN_TEST(test_db9_pin_mapping);
    return UNITY_END();
}