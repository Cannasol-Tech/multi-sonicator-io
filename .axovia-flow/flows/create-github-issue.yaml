# Generated by Axovia Flow™ Agentic Framework
# file: .axovia-flow/flows/create-github-issue.yaml
# title: GitHub Issue Creation Flow
# author: Axovia AI
# company: Axovia AI
# date: 2025-09-12
# brief: Automated GitHub issue creation following repository issue template standards
# version: 1.0

flow:
  id: create-github-issue-v1
  name: Create GitHub Issue
  description: Create GitHub issues following repository issue template standards
  framework: "Axovia Flow™"
  
inputs:
  issue_type:
    type: select
    description: "Type of issue to create"
    options:
      - bug_report
      - feature_request
      - enhancement
      - documentation
      - question
    default: bug_report
    required: true
    
  title:
    type: text
    description: "Issue title (will be prefixed with appropriate label)"
    required: true
    validation:
      min_length: 10
      max_length: 100
      
  repository:
    type: text
    description: "Repository name (owner/repo format)"
    default: "Cannasol-Tech/multi-sonicator-io"
    required: true
    
  assignees:
    type: list(text)
    description: "GitHub usernames to assign (optional)"
    default: []
    
  labels:
    type: list(text)
    description: "Additional labels beyond template defaults"
    default: []
    
  milestone:
    type: text
    description: "Milestone to assign (optional)"
    required: false

steps:
  - id: validate_template
    name: Validate Issue Template Exists
    description: Check if the selected issue template exists in .github/ISSUE_TEMPLATE/
    implementation: |
      # Check for template file existence
      template_path = f".github/ISSUE_TEMPLATE/{inputs.issue_type}.md"
      if not file_exists(template_path):
        # Fall back to bug_report.md if specific template doesn't exist
        template_path = ".github/ISSUE_TEMPLATE/bug_report.md"
        if not file_exists(template_path):
          error("No issue templates found in .github/ISSUE_TEMPLATE/")
      
      set_variable("template_path", template_path)
    
  - id: load_template
    name: Load Issue Template
    description: Parse the issue template frontmatter and body
    implementation: |
      # Parse template file
      template_content = read_file(get_variable("template_path"))
      frontmatter, body = parse_frontmatter(template_content)
      
      # Extract template metadata
      template_name = frontmatter.get("name", "Issue")
      template_about = frontmatter.get("about", "")
      template_title = frontmatter.get("title", "[ISSUE] {title}")
      template_labels = frontmatter.get("labels", [])
      template_assignees = frontmatter.get("assignees", "")
      
      # Store template data
      set_variable("template_name", template_name)
      set_variable("template_about", template_about)
      set_variable("template_title", template_title)
      set_variable("template_labels", template_labels)
      set_variable("template_body", body)
      
  - id: format_title
    name: Format Issue Title
    description: Apply template title formatting
    implementation: |
      # Format title using template pattern
      template_title = get_variable("template_title")
      formatted_title = template_title.replace("{title}", inputs.title)
      
      # Handle different issue type prefixes
      if inputs.issue_type == "bug_report":
        if not formatted_title.startswith("[BUG]"):
          formatted_title = f"[BUG] {inputs.title}"
      elif inputs.issue_type == "feature_request":
        if not formatted_title.startswith("[FEATURE]"):
          formatted_title = f"[FEATURE] {inputs.title}"
      elif inputs.issue_type == "enhancement":
        if not formatted_title.startswith("[ENHANCEMENT]"):
          formatted_title = f"[ENHANCEMENT] {inputs.title}"
      elif inputs.issue_type == "documentation":
        if not formatted_title.startswith("[DOCS]"):
          formatted_title = f"[DOCS] {inputs.title}"
      elif inputs.issue_type == "question":
        if not formatted_title.startswith("[QUESTION]"):
          formatted_title = f"[QUESTION] {inputs.title}"
      
      set_variable("final_title", formatted_title)
      
  - id: prepare_labels
    name: Prepare Issue Labels
    description: Combine template labels with user-provided labels
    implementation: |
      # Combine template and user labels
      template_labels = get_variable("template_labels")
      all_labels = list(set(template_labels + inputs.labels))
      
      # Add issue type label if not present
      type_label = inputs.issue_type.replace("_", "-")
      if type_label not in all_labels:
        all_labels.append(type_label)
        
      set_variable("final_labels", all_labels)
      
  - id: prepare_assignees
    name: Prepare Issue Assignees
    description: Format assignees for GitHub API
    implementation: |
      # Use user-provided assignees or fall back to template
      assignees = inputs.assignees if inputs.assignees else []
      set_variable("final_assignees", assignees)
      
  - id: create_issue_body
    name: Create Issue Body
    description: Generate the issue body from template
    implementation: |
      # Get template body and add metadata
      body = get_variable("template_body")
      
      # Add flow metadata footer
      footer = f"""
---
*Created via Axovia Flow™ GitHub Issue Creation Flow*
- Flow ID: {flow.id}
- Template: {get_variable("template_path")}
- Created: {current_timestamp()}
"""
      
      final_body = body + footer
      set_variable("final_body", final_body)
      
  - id: preview_issue
    name: Preview Issue
    description: Show user the issue details before creation
    action: prompt
    prompt: |
      Ready to create GitHub issue with the following details:
      
      **Repository:** {{inputs.repository}}
      **Title:** {{get_variable("final_title")}}
      **Labels:** {{get_variable("final_labels")}}
      **Assignees:** {{get_variable("final_assignees")}}
      **Milestone:** {{inputs.milestone or "None"}}
      
      **Body Preview:**
      ```
      {{get_variable("final_body")[:500]}}...
      ```
      
      Proceed with issue creation? (yes/no)
    validation:
      accepted_values: ["yes", "y", "no", "n"]
    on_answer:
      yes: next
      y: next
      no: end
      n: end
      
  - id: create_github_issue
    name: Create GitHub Issue
    description: Create the issue using GitHub API
    implementation: |
      # Prepare GitHub API payload
      payload = {
        "title": get_variable("final_title"),
        "body": get_variable("final_body"),
        "labels": get_variable("final_labels"),
        "assignees": get_variable("final_assignees")
      }
      
      # Add milestone if provided
      if inputs.milestone:
        payload["milestone"] = inputs.milestone
        
      # Create issue via GitHub API
      response = github_api_call(
        method="POST",
        path=f"/repos/{inputs.repository}/issues",
        data=payload
      )
      
      if response.status_code == 201:
        issue_data = response.json()
        issue_url = issue_data["html_url"]
        issue_number = issue_data["number"]
        
        set_variable("issue_url", issue_url)
        set_variable("issue_number", issue_number)
        
        success(f"Issue #{issue_number} created successfully: {issue_url}")
      else:
        error(f"Failed to create issue: {response.status_code} - {response.text}")
        
  - id: completion_summary
    name: Completion Summary
    description: Provide summary of created issue
    action: output
    content: |
      ✅ **GitHub Issue Created Successfully**
      
      - **Issue #:** {{get_variable("issue_number")}}
      - **URL:** {{get_variable("issue_url")}}
      - **Repository:** {{inputs.repository}}
      - **Title:** {{get_variable("final_title")}}
      - **Template Used:** {{get_variable("template_path")}}
      
      The issue has been created following your repository's issue template standards.

outputs:
  issue_url:
    description: "URL of the created GitHub issue"
    value: "{{get_variable('issue_url')}}"
  issue_number:
    description: "GitHub issue number"
    value: "{{get_variable('issue_number')}}"
  template_used:
    description: "Path to the issue template that was used"
    value: "{{get_variable('template_path')}}"

# Integration with Axovia Flow framework
integration:
  agents: ["bmad-master", "pm", "qa"]
  requires_interaction: true
  template_dependencies:
    - ".github/ISSUE_TEMPLATE/*.md"
  api_dependencies:
    - "GitHub API"
    
# Quality gates
quality_gates:
  - name: "Template Validation"
    description: "Ensure issue template exists and is valid"
    required: true
  - name: "Title Format"
    description: "Title follows repository naming conventions"
    required: true
  - name: "Label Compliance"
    description: "Labels match repository standards"
    required: true
