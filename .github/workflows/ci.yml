name: Multi-Sonicator CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_candidate:
        description: 'Mark as release candidate'
        required: false
        type: boolean

env:
  PLATFORMIO_CORE_DIR: ~/.platformio
  ARTIFACT_NAME: multi-sonicator-firmware

jobs:
  detect-hardware:
    runs-on: ubuntu-latest
    outputs:
      hardware_available: ${{ steps.detect.outputs.available }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Detect Hardware
        id: detect
        run: |
          # For now, hardware is never available in CI environment
          echo "available=false" >> $GITHUB_OUTPUT
          echo "Hardware detection: false (CI environment)"

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio
      - name: Run Unit Tests
        run: |
          mkdir -p test_results
          echo "Running unit tests with detailed output..."
          pio test -e test_desktop --verbose --junit-output-path test_results/unit_tests.xml || true
          
      - name: Generate Test Report
        if: always()
        run: |
          python scripts/ci/generate_reports.py --test-results test_results --output-dir reports
          
      - name: Check Test Results
        run: |
          if [ -f test_results/unit_tests.xml ]; then
            echo "✓ Unit tests completed"
            # Check for any failures
            if grep -q 'failures="[^0]"' test_results/unit_tests.xml; then
              echo "❌ Unit tests have failures"
              echo "See detailed report in artifacts"
            else
              echo "✓ All unit tests passed"
            fi
          else
            echo "❌ No unit test results found"
            exit 1
          fi
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            test_results/
            reports/

  integration-tests:
    needs: [detect-hardware, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio
      - name: Setup Test Environment
        run: |
          if [[ "${{ needs.detect-hardware.outputs.hardware_available }}" == "true" ]]; then
            echo "Setting up hardware tests..."
            echo "Hardware tests not yet implemented"
          else
            echo "Setting up simulation tests..."
            echo "Simulation tests not yet implemented"
          fi
      - name: Run Integration Tests
        run: |
          mkdir -p test_results
          if [[ "${{ needs.detect-hardware.outputs.hardware_available }}" == "true" ]]; then
            echo "Running hardware integration tests..."
            pio test -e test_embedded --verbose --junit-output-path test_results/hardware_integration_tests.xml || true
          else
            echo "Running simulation integration tests..."
            pio test -e test_desktop --filter test_simulation_integration --verbose --junit-output-path test_results/simulation_integration_tests.xml || true
            pio test -e test_desktop --filter test_virtual_sonicator --verbose --junit-output-path test_results/virtual_sonicator_tests.xml || true
          fi
      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test_results/

  build-firmware:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio
      - name: Build Development Firmware
        run: |
          pio run -e development
      - name: Build Production Firmware
        run: |
          pio run -e production
      - name: Generate Build Manifest
        run: |
          # Get version information
          python scripts/release/version_bump.py --current
          
          cat > manifest.json << EOF
          {
            "version": "1.0.0-build.${{ github.run_number }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environments": {
              "development": {
                "firmware": ".pio/build/development/firmware.hex",
                "size": "$(stat -c%s .pio/build/development/firmware.hex 2>/dev/null || echo 0)"
              },
              "production": {
                "firmware": ".pio/build/production/firmware.hex", 
                "size": "$(stat -c%s .pio/build/production/firmware.hex 2>/dev/null || echo 0)"
              }
            },
            "configuration": {
              "target": "atmega32a",
              "max_sonicators": 4,
              "modbus_slave_id": 2,
              "modbus_baud_rate": 115200
            }
          }
          EOF
          
      - name: Generate Build Report
        run: |
          python scripts/ci/generate_reports.py --build-dir .pio/build --output-dir reports
          
      - name: Generate Documentation
        run: |
          python scripts/generate_docs.py --output reports/docs
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}-${{ github.sha }}
          path: |
            .pio/build/development/firmware.hex
            .pio/build/production/firmware.hex
            manifest.json
            reports/

  stage-release:
    needs: build-firmware
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}-${{ github.sha }}
      - name: Stage to Latest
        run: |
          echo "Staging build ${{ github.sha }} as latest"
          ls -la
      - name: Prepare Release Candidate
        if: github.event.inputs.release_candidate == 'true'
        run: |
          echo "Release candidate ready for approval"
          echo "Future: Trigger Azure DevOps release approval pipeline"