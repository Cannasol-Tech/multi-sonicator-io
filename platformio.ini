[env:atmega32a]
platform = atmelavr
board = ATmega32
framework = arduino

; ATmega32A @ 16MHz external crystal
board_build.mcu = atmega32a
board_build.f_cpu = 16000000L

; Fuse settings for external 16MHz crystal
; LFUSE: 0xFF (external crystal, slow rising power)
; HFUSE: 0xD9 (JTAG disabled, SPI enabled, watchdog disabled)  
; EFUSE: 0xFF (default)
board_fuses.lfuse = 0xFF
board_fuses.hfuse = 0xD9
board_fuses.efuse = 0xFF

; Upload settings for Arduino Uno R4 WiFi as ISP programmer
; Wiring per uno-r4-isp-wiring.md:
; D10 -> Pin 9 (/RESET), D11 -> Pin 6 (MOSI), D12 -> Pin 7 (MISO), D13 -> Pin 8 (SCK)
; 5V -> Pin 10/30 (VCC), GND -> Pin 11/31 (GND)
; NOTE: Add 10ÂµF cap between RESET-GND on UNO R4 to prevent auto-reset
upload_protocol = custom
upload_port = /dev/cu.usbmodem*
upload_flags = 
    -C
    $PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
    -p
    $BOARD_MCU
    -P
    $UPLOAD_PORT
    -c
    arduino
    -b
    19200
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i

; Debug settings
debug_tool = avr-stub
debug_port = /dev/cu.usbserial*

; Build flags
build_flags = 
    -DARDUINO_AVR_ATMEGA32A
    -Wall
    -Wextra
    -DMODBUS_SLAVE_ID=2
    -DMAX_SONICATORS=4
    -fno-lto
    
build_unflags = 
    -flto
    -fuse-linker-plugin

; Library dependencies
lib_deps = 
    Wire
    EEPROM

; Monitor settings
monitor_speed = 115200
monitor_port = /dev/cu.usbserial*

; Development environment
[env:development]
extends = env:atmega32a
build_type = debug
build_flags = 
    ${env:atmega32a.build_flags}
    -DDEBUG_MODE=1
    -DSERIAL_DEBUG=1

; Production environment
[env:production]
extends = env:atmega32a
build_type = release
build_flags = 
    ${env:atmega32a.build_flags}
    -DPRODUCTION_MODE=1
    -DSERIAL_DEBUG=0
