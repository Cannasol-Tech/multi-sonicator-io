; PlatformIO Project Configuration File

[platformio]
default_envs = atmega32a

; Shared configuration
[env]
platform = atmelavr
framework = arduino
test_framework = unity
monitor_speed = 115200

; Development environment for ATMEGA32A
[env:atmega32a]
board = ATmega32
board_build.mcu = atmega32a
board_build.f_cpu = 16000000L

; MightyCore specific settings
board_hardware.oscillator = external
board_hardware.uart = uart0
board_hardware.bod = 2.7v
board_hardware.eeprom = keep

; Fuse settings for external 16MHz crystal
; LFUSE: 0xFF (external crystal, full swing)
; HFUSE: 0xD9 (JTAG disabled, SPI enabled, watchdog disabled)
; EFUSE: 0xFF (default)
board_fuses.lfuse = 0xFF
board_fuses.hfuse = 0xD9
board_fuses.efuse = 0xFF

; Upload settings for Arduino as ISP programmer
upload_protocol = custom
upload_port = /dev/cu.usbmodem*
upload_flags =
    -C
    $PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
    -p
    m32
    -P
    $UPLOAD_PORT
    -c
    stk500v1
    -b
    19200
    -B
    125kHz
    -F
    -D
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i -V

; Debug settings
debug_tool = avr-stub
debug_port = /dev/cu.usbserial*

; Build flags for Arduino framework
build_flags =
    -DARDUINO_AVR_ATMEGA32A
    -DF_CPU=16000000L
    -DARDUINO_ARCH_AVR
    -Wall
    -Wextra
    -std=c++11

; Limit sources to exclude example that defines its own setup/loop
build_src_filter =
    +<*>
    -<modules/communication/modbus_example.cpp>


; Library dependencies
lib_deps =
    Wire
    EEPROM

; Test environment for native testing (host machine)
[env:native_test]
platform = native
framework =
test_framework = unity
build_flags =
    -DUNIT_TEST
    -DNATIVE_TEST
    -DF_CPU=16000000L
    -std=c++11
    -Wall
    -Wextra
    -I src/
    -I test/
    -I include/
lib_deps =
test_filter = unit/test_modbus*
build_src_filter =
    +<modules/communication/>
    -<modules/hal/>
    -<modules/control/>
    -<modules/sonicator/>
test_build_src = no
lib_compat_mode = off

; Comprehensive test environment for HAL + Communication (90%+ coverage)
[env:comprehensive_test]
platform = native
framework =
test_framework = unity
build_flags =
    -DUNIT_TEST
    -DNATIVE_TEST
    -DF_CPU=16000000L
    -std=c++11
    -Wall
    -Wextra
    -I src/
    -I test/
    -I include/
lib_deps =
test_filter = test_comprehensive_coverage.cpp
build_src_filter =
    +<modules/communication/>
    +<modules/hal/>
    -<main.cpp>
    -<modules/control/>
    -<modules/sonicator/>
test_ignore =
    test_hal_complete_coverage.cpp
    unit/test_modbus_communication.cpp
    unit/test_project_structure.cpp
test_build_src = no
lib_compat_mode = off