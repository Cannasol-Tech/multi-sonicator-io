/**
 * Generated by Agile Flow‚Ñ¢ Agentic Framework
 * Modular Configuration Panel for Multi-Sonicator-IO Web UI
 * Provides comprehensive interface for modular YAML configuration management
 */

import React, { useState, useEffect } from 'react';
import './ModularConfigPanel.css';

interface ConfigModule {
  name: string;
  loaded: boolean;
  lastUpdated: string;
}

interface ValidationError {
  type: string;
  message: string;
  module?: string;
  severity: 'error' | 'warning' | 'info';
}

interface ConfigSummary {
  masterConfig: any;
  modules: ConfigModule[];
  validationErrors: ValidationError[];
  lastLoadTime: string | null;
}

const ModularConfigPanel: React.FC = () => {
  const [configSummary, setConfigSummary] = useState<ConfigSummary | null>(null);
  const [selectedModule, setSelectedModule] = useState<string>('');
  const [moduleData, setModuleData] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [validationResults, setValidationResults] = useState<any>(null);
  const [activeTab, setActiveTab] = useState<'overview' | 'modules' | 'pins' | 'sonicators' | 'validation'>('overview');

  // Load configuration summary on component mount
  useEffect(() => {
    loadConfigurationSummary();
  }, []);

  const loadConfigurationSummary = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch('/api/config/modular');
      if (!response.ok) throw new Error('Failed to load configuration');

      const result = await response.json();
      setConfigSummary(result.data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
      console.error('Failed to load configuration summary:', err);
    } finally {
      setLoading(false);
    }
  };

  const loadModuleData = async (moduleName: string) => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch(`/api/config/modules/${moduleName}`);
      if (!response.ok) throw new Error(`Failed to load module: ${moduleName}`);

      const result = await response.json();
      setModuleData(result.data);
      setSelectedModule(moduleName);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
      console.error(`Failed to load module ${moduleName}:`, err);
    } finally {
      setLoading(false);
    }
  };

  const validateConfiguration = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch('/api/config/validate', { method: 'POST' });
      if (!response.ok) throw new Error('Failed to validate configuration');

      const result = await response.json();
      setValidationResults(result.data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
      console.error('Failed to validate configuration:', err);
    } finally {
      setLoading(false);
    }
  };

  const reloadConfiguration = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch('/api/config/reload', { method: 'POST' });
      if (!response.ok) throw new Error('Failed to reload configuration');

      await loadConfigurationSummary();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
      console.error('Failed to reload configuration:', err);
    } finally {
      setLoading(false);
    }
  };

  const exportConfiguration = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch('/api/config/export', { 
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ outputPath: 'combined-config.yaml' })
      });
      
      if (!response.ok) throw new Error('Failed to export configuration');

      const result = await response.json();
      alert(`Configuration exported to: ${result.data.exportPath}`);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
      console.error('Failed to export configuration:', err);
    } finally {
      setLoading(false);
    }
  };

  const renderOverview = () => (
    <div className="config-overview">
      <div className="overview-header">
        <h3>üìã Configuration Overview</h3>
        <div className="overview-actions">
          <button onClick={validateConfiguration} className="btn-secondary">
            ‚úÖ Validate
          </button>
          <button onClick={reloadConfiguration} className="btn-secondary">
            üîÑ Reload
          </button>
          <button onClick={exportConfiguration} className="btn-secondary">
            üì§ Export
          </button>
        </div>
      </div>

      {configSummary && (
        <div className="overview-content">
          <div className="overview-stats">
            <div className="stat-card">
              <h4>Modules</h4>
              <div className="stat-value">{configSummary.modules.length}</div>
              <div className="stat-label">Configuration Modules</div>
            </div>
            <div className="stat-card">
              <h4>Status</h4>
              <div className="stat-value">
                {configSummary.modules.filter(m => m.loaded).length}/{configSummary.modules.length}
              </div>
              <div className="stat-label">Modules Loaded</div>
            </div>
            <div className="stat-card">
              <h4>Validation</h4>
              <div className={`stat-value ${configSummary.validationErrors.length === 0 ? 'success' : 'error'}`}>
                {configSummary.validationErrors.length === 0 ? '‚úÖ' : '‚ùå'}
              </div>
              <div className="stat-label">
                {configSummary.validationErrors.length} Errors
              </div>
            </div>
          </div>

          <div className="project-info">
            <h4>Project Information</h4>
            {configSummary.masterConfig?.project && (
              <div className="project-details">
                <p><strong>Name:</strong> {configSummary.masterConfig.project.name}</p>
                <p><strong>Version:</strong> {configSummary.masterConfig.project.version}</p>
                <p><strong>Description:</strong> {configSummary.masterConfig.project.description}</p>
                <p><strong>Status:</strong> {configSummary.masterConfig.project.status}</p>
              </div>
            )}
          </div>

          {configSummary.validationErrors.length > 0 && (
            <div className="validation-errors">
              <h4>‚ö†Ô∏è Validation Issues</h4>
              {configSummary.validationErrors.map((error, index) => (
                <div key={index} className={`error-item ${error.severity}`}>
                  <span className="error-type">{error.type}</span>
                  <span className="error-message">{error.message}</span>
                  {error.module && <span className="error-module">({error.module})</span>}
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );

  const renderModules = () => (
    <div className="config-modules">
      <div className="modules-header">
        <h3>üîß Configuration Modules</h3>
      </div>

      <div className="modules-content">
        <div className="modules-list">
          {configSummary?.modules.map((module) => (
            <div 
              key={module.name}
              className={`module-card ${selectedModule === module.name ? 'selected' : ''}`}
              onClick={() => loadModuleData(module.name)}
            >
              <div className="module-header">
                <h4>{module.name}</h4>
                <span className={`module-status ${module.loaded ? 'loaded' : 'not-loaded'}`}>
                  {module.loaded ? '‚úÖ' : '‚ùå'}
                </span>
              </div>
              <div className="module-info">
                <p>Last Updated: {module.lastUpdated}</p>
              </div>
            </div>
          ))}
        </div>

        {moduleData && (
          <div className="module-details">
            <div className="module-details-header">
              <h4>üìÑ {selectedModule} Configuration</h4>
              <button className="btn-secondary" onClick={() => setModuleData(null)}>
                ‚úñÔ∏è Close
              </button>
            </div>
            <div className="module-data">
              <pre>{JSON.stringify(moduleData, null, 2)}</pre>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  const renderValidation = () => (
    <div className="config-validation">
      <div className="validation-header">
        <h3>‚úÖ Configuration Validation</h3>
        <button onClick={validateConfiguration} className="btn-primary">
          üîç Run Validation
        </button>
      </div>

      {validationResults && (
        <div className="validation-results">
          <div className="validation-summary">
            <div className={`validation-status ${validationResults.valid ? 'valid' : 'invalid'}`}>
              {validationResults.valid ? '‚úÖ Configuration Valid' : '‚ùå Configuration Invalid'}
            </div>
            <div className="validation-stats">
              <span>Errors: {validationResults.errorCount}</span>
              <span>Warnings: {validationResults.warningCount}</span>
            </div>
          </div>

          {validationResults.errors.length > 0 && (
            <div className="validation-errors">
              <h4>Issues Found:</h4>
              {validationResults.errors.map((error: ValidationError, index: number) => (
                <div key={index} className={`validation-error ${error.severity}`}>
                  <div className="error-header">
                    <span className="error-severity">{error.severity.toUpperCase()}</span>
                    <span className="error-type">{error.type}</span>
                    {error.module && <span className="error-module">{error.module}</span>}
                  </div>
                  <div className="error-message">{error.message}</div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );

  return (
    <div className="modular-config-panel">
      <div className="config-header">
        <h2>üîß Modular Hardware Configuration</h2>
        <div className="config-status">
          {loading && <span className="loading">‚è≥ Loading...</span>}
          {error && <span className="error">‚ùå {error}</span>}
          {configSummary?.lastLoadTime && (
            <span className="last-updated">
              Last loaded: {new Date(configSummary.lastLoadTime).toLocaleString()}
            </span>
          )}
        </div>
      </div>

      <div className="config-tabs">
        <button 
          className={`tab-button ${activeTab === 'overview' ? 'active' : ''}`}
          onClick={() => setActiveTab('overview')}
        >
          üìã Overview
        </button>
        <button 
          className={`tab-button ${activeTab === 'modules' ? 'active' : ''}`}
          onClick={() => setActiveTab('modules')}
        >
          üîß Modules
        </button>
        <button 
          className={`tab-button ${activeTab === 'validation' ? 'active' : ''}`}
          onClick={() => setActiveTab('validation')}
        >
          ‚úÖ Validation
        </button>
      </div>

      <div className="config-content">
        {activeTab === 'overview' && renderOverview()}
        {activeTab === 'modules' && renderModules()}
        {activeTab === 'validation' && renderValidation()}
      </div>
    </div>
  );
};

export default ModularConfigPanel;
