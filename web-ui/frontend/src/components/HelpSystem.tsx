import { useState } from 'react'
import { HelpContent } from '../types'

interface HelpSystemProps {
  visible: boolean
  onClose: () => void
}

const helpContent: Record<string, HelpContent> = {
  overview: {
    title: 'Multi-Sonicator-IO Test Harness Overview',
    description: 'This web interface provides interactive control and monitoring of the ATmega32A sonicator multiplexer through an Arduino Test Wrapper. The system operates in full sandbox mode with continuous hardware monitoring.',
    examples: [
      'Click on pin connections in the diagram to interact with them',
      'Input pins can be toggled HIGH/LOW to control ATmega32A inputs',
      'Output pins are read-only and show ATmega32A output states',
      'Analog pins display ADC readings from 0-1023 (0-5V)'
    ]
  },
  
  pinMapping: {
    title: 'Pin Mapping (SOLE SOURCE OF TRUTH: docs/planning/pin-matrix.md)',
    description: 'Pin connections between Arduino Test Wrapper and ATmega32A DUT for Sonicator 4 (S4) single channel HIL mapping.',
    examples: [
      'D7 → ATmega32A PB0 (FREQ_DIV10_4): Frequency ÷10 input',
      'D8 → ATmega32A PB4 (FREQ_LOCK_4): Frequency lock input', 
      'A2 → ATmega32A PD3 (OVERLOAD_4): Overload detection input',
      'A3 → ATmega32A PC0 (START_4): Start control output',
      'A4 → ATmega32A PC1 (RESET_4): Reset control output',
      'A1 → ATmega32A PA7 (POWER_SENSE_4): Power sense analog input',
      'D9 → ATmega32A PD7 (AMPLITUDE_ALL): Amplitude PWM input',
      'D10 → ATmega32A PD0 (UART_RXD): UART receive',
      'D11 → ATmega32A PD1 (UART_TXD): UART transmit',
      'D12 → ATmega32A PD2 (STATUS_LED): Status LED output'
    ]
  },

  inputPins: {
    title: 'Input Pin Control',
    description: 'Input pins (IN) send control signals from Arduino to ATmega32A. These can be toggled HIGH (5V) or LOW (0V).',
    examples: [
      'Click pin buttons to toggle between HIGH and LOW states',
      'Use "All LOW" / "All HIGH" buttons for bulk operations',
      'FREQ_DIV10_4: Controls frequency division input',
      'FREQ_LOCK_4: Controls frequency lock detection',
      'OVERLOAD_4: Simulates overload condition',
      'AMPLITUDE_ALL: Controls amplitude PWM signal'
    ],
    relatedPins: ['FREQ_DIV10_4', 'FREQ_LOCK_4', 'OVERLOAD_4', 'AMPLITUDE_ALL', 'UART_RXD']
  },

  outputPins: {
    title: 'Output Pin Monitoring',
    description: 'Output pins (OUT) are read-only and show signals generated by the ATmega32A.',
    examples: [
      'Click "Read Pin" to get current state',
      'START_4: Sonicator start control signal',
      'RESET_4: Sonicator reset control signal', 
      'UART_TXD: UART transmission data',
      'STATUS_LED: System status indicator'
    ],
    relatedPins: ['START_4', 'RESET_4', 'UART_TXD', 'STATUS_LED']
  },

  analogPins: {
    title: 'Analog Pin Monitoring',
    description: 'Analog pins (ANALOG) provide ADC readings from 0-1023 representing 0-5V.',
    examples: [
      'Click "Read ADC" to get current analog value',
      'Values shown as: ADC_VALUE (VOLTAGE)',
      'POWER_SENSE_4: Monitors sonicator power consumption',
      'Readings update automatically in sandbox mode'
    ],
    relatedPins: ['POWER_SENSE_4']
  },

  pwmControl: {
    title: 'PWM (Pulse Width Modulation) Control',
    description: 'Generate PWM signals on input pins with configurable frequency and duty cycle.',
    examples: [
      'Select target pin from dropdown',
      'Set frequency: 1-50000 Hz',
      'Set duty cycle: 0-100%',
      'Commonly used for AMPLITUDE_ALL signal generation'
    ]
  },

  connection: {
    title: 'Hardware Connection Management',
    description: 'The system automatically detects and connects to the Arduino Test Harness.',
    examples: [
      'Green indicator: Connected and operational',
      'Red indicator: Disconnected or error',
      'Yellow indicator: Connecting/reconnecting',
      'Use "Reconnect" for quick retry',
      'Use "Retry (3x)" for multiple connection attempts'
    ]
  },

  troubleshooting: {
    title: 'Troubleshooting',
    description: 'Common issues and solutions for hardware testing.',
    examples: [
      'Connection failed: Check Arduino USB connection and port permissions',
      'Pin not responding: Verify wiring matches pin-matrix.md',
      'ADC readings unstable: Check power supply and ground connections',
      'PWM not working: Ensure pin supports PWM output',
      'WebSocket errors: Refresh browser and check backend server'
    ]
  },

  shortcuts: {
    title: 'Keyboard Shortcuts & Tips',
    description: 'Efficiency tips for power users.',
    examples: [
      'Click pin connections in diagram for quick interaction',
      'Use "Read All" to refresh all pin states',
      'Monitor timestamp to verify real-time updates',
      'Export pin history for debugging and analysis',
      'Use browser developer tools for advanced debugging'
    ]
  }
}

export default function HelpSystem({ visible, onClose }: HelpSystemProps) {
  const [selectedTopic, setSelectedTopic] = useState('overview')

  if (!visible) return null

  const currentHelp = helpContent[selectedTopic]

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      background: 'rgba(0, 0, 0, 0.5)',
      zIndex: 1000,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    }}>
      <div style={{
        background: 'white',
        borderRadius: '8px',
        width: '90%',
        maxWidth: '800px',
        height: '80%',
        display: 'flex',
        overflow: 'hidden'
      }}>
        {/* Help Topics Sidebar */}
        <div style={{
          width: '250px',
          background: '#f9fafb',
          borderRight: '1px solid #e5e7eb',
          padding: '20px',
          overflowY: 'auto'
        }}>
          <h3 className="font-semibold mb-4">Help Topics</h3>
          {Object.entries(helpContent).map(([key, content]) => (
            <button
              key={key}
              className={`btn w-full text-left mb-2 text-sm ${selectedTopic === key ? 'primary' : ''}`}
              onClick={() => setSelectedTopic(key)}
            >
              {content.title.split(':')[0]}
            </button>
          ))}
        </div>

        {/* Help Content */}
        <div style={{
          flex: 1,
          padding: '20px',
          overflowY: 'auto'
        }}>
          <div className="flex justify-between items-start mb-4">
            <h2 className="text-lg font-semibold">{currentHelp.title}</h2>
            <button
              className="btn"
              onClick={onClose}
              title="Close help"
            >
              ✕
            </button>
          </div>

          <p className="text-gray-700 mb-4">{currentHelp.description}</p>

          {currentHelp.examples && (
            <div className="mb-4">
              <h4 className="font-semibold mb-2">Examples & Usage:</h4>
              <ul className="text-sm text-gray-600 space-y-1">
                {currentHelp.examples.map((example, index) => (
                  <li key={index} className="flex items-start">
                    <span className="text-blue-500 mr-2">•</span>
                    <span>{example}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}

          {currentHelp.relatedPins && (
            <div className="mb-4">
              <h4 className="font-semibold mb-2">Related Pins:</h4>
              <div className="flex flex-wrap gap-2">
                {currentHelp.relatedPins.map(pin => (
                  <span key={pin} className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs font-mono">
                    {pin}
                  </span>
                ))}
              </div>
            </div>
          )}

          {selectedTopic === 'overview' && (
            <div className="mt-6 p-4 bg-blue-50 rounded">
              <h4 className="font-semibold text-blue-800 mb-2">Quick Start:</h4>
              <ol className="text-sm text-blue-700 space-y-1">
                <li>1. Verify hardware connection (green indicator in header)</li>
                <li>2. Click on pin connections in the diagram to interact</li>
                <li>3. Use control panel for advanced operations</li>
                <li>4. Monitor real-time pin states and history</li>
                <li>5. Use help tooltips throughout the interface</li>
              </ol>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
