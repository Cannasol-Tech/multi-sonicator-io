/**
 * Generated by Agile Flow‚Ñ¢ Agentic Framework
 * Pin Configuration Editor Component
 * Specialized editor for ATmega32A pin assignments and configurations
 */

import React, { useState, useEffect } from 'react';
import './ConfigEditor.css';

interface PinConfig {
  pin: number;
  signal: string;
  direction: string;
  sonicator?: number;
  function: string;
  modbus_register?: string;
  modbus_address?: string;
  adc_channel?: number;
  scaling?: string;
  test_point?: string;
  electrical?: string;
}

interface PinConfigEditorProps {
  onClose: () => void;
  onSave: (data: any) => void;
}

const PinConfigEditor: React.FC<PinConfigEditorProps> = ({ onClose, onSave }) => {
  const [pinConfigs, setPinConfigs] = useState<Record<string, PinConfig>>({});
  const [selectedPin, setSelectedPin] = useState<string>('');
  const [editingPin, setEditingPin] = useState<PinConfig | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterBy, setFilterBy] = useState<'all' | 'sonicator' | 'direction' | 'port'>('all');

  useEffect(() => {
    loadPinConfigs();
  }, []);

  const loadPinConfigs = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch('/api/config/pins');
      if (!response.ok) throw new Error('Failed to load pin configurations');

      const result = await response.json();
      setPinConfigs(result.data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
      console.error('Failed to load pin configurations:', err);
    } finally {
      setLoading(false);
    }
  };

  const handlePinSelect = (pinName: string) => {
    setSelectedPin(pinName);
    setEditingPin({ ...pinConfigs[pinName] });
  };

  const handlePinUpdate = (field: keyof PinConfig, value: any) => {
    if (editingPin) {
      setEditingPin({
        ...editingPin,
        [field]: value
      });
    }
  };

  const savePinConfig = async () => {
    if (!editingPin || !selectedPin) return;

    try {
      setLoading(true);
      setError(null);

      // Update local state
      const updatedConfigs = {
        ...pinConfigs,
        [selectedPin]: editingPin
      };

      setPinConfigs(updatedConfigs);
      
      // Prepare data for saving
      const moduleData = {
        metadata: {
          name: "pinout-configuration",
          description: "ATmega32A pin assignments updated via web UI",
          version: "1.0.0",
          last_updated: new Date().toISOString().split('T')[0],
          author: "Web UI User",
          company: "Axovia AI"
        },
        dut: {
          microcontroller: {
            type: "ATmega32A-PU",
            package: "DIP-40",
            clock_frequency: 16000000,
            voltage: 5.0,
            manufacturer: "Microchip"
          },
          pins: updatedConfigs
        }
      };

      onSave(moduleData);
      setEditingPin(null);
      setSelectedPin('');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
      console.error('Failed to save pin configuration:', err);
    } finally {
      setLoading(false);
    }
  };

  const getPortFromPin = (pinName: string): string => {
    return pinName.substring(0, 2); // PA, PB, PC, PD
  };

  const getPortColor = (port: string): string => {
    const colors = {
      'PA': '#e74c3c', // Red for Port A (Analog)
      'PB': '#3498db', // Blue for Port B (Frequency)
      'PC': '#2ecc71', // Green for Port C (Control)
      'PD': '#f39c12'  // Orange for Port D (Communication/Status)
    };
    return colors[port as keyof typeof colors] || '#95a5a6';
  };

  const filteredPins = Object.entries(pinConfigs).filter(([pinName, config]) => {
    const matchesSearch = pinName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         config.signal.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         config.function.toLowerCase().includes(searchTerm.toLowerCase());

    if (!matchesSearch) return false;

    switch (filterBy) {
      case 'sonicator':
        return config.sonicator !== undefined;
      case 'direction':
        return config.direction === 'IN' || config.direction === 'OUT';
      case 'port':
        return true; // Will be grouped by port anyway
      default:
        return true;
    }
  });

  const groupedPins = filteredPins.reduce((groups, [pinName, config]) => {
    const port = getPortFromPin(pinName);
    if (!groups[port]) groups[port] = [];
    groups[port].push([pinName, config]);
    return groups;
  }, {} as Record<string, [string, PinConfig][]>);

  return (
    <div className="config-editor pin-config-editor">
      <div className="editor-header">
        <h3>üîå Pin Configuration Editor</h3>
        <div className="editor-actions">
          <button onClick={onClose} className="btn-secondary">
            ‚úñÔ∏è Close
          </button>
        </div>
      </div>

      <div className="editor-content">
        <div className="editor-sidebar">
          <div className="search-filters">
            <input
              type="text"
              placeholder="Search pins..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
            <select
              value={filterBy}
              onChange={(e) => setFilterBy(e.target.value as any)}
              className="filter-select"
            >
              <option value="all">All Pins</option>
              <option value="sonicator">Sonicator Pins</option>
              <option value="direction">I/O Pins</option>
              <option value="port">By Port</option>
            </select>
          </div>

          <div className="pins-list">
            {Object.entries(groupedPins).map(([port, pins]) => (
              <div key={port} className="port-group">
                <div 
                  className="port-header"
                  style={{ backgroundColor: getPortColor(port) }}
                >
                  <h4>{port}</h4>
                  <span className="pin-count">{pins.length} pins</span>
                </div>
                <div className="port-pins">
                  {pins.map(([pinName, config]) => (
                    <div
                      key={pinName}
                      className={`pin-item ${selectedPin === pinName ? 'selected' : ''}`}
                      onClick={() => handlePinSelect(pinName)}
                    >
                      <div className="pin-header">
                        <span className="pin-name">{pinName}</span>
                        <span className="pin-number">#{config.pin}</span>
                      </div>
                      <div className="pin-signal">{config.signal}</div>
                      <div className="pin-direction">
                        <span className={`direction-badge ${config.direction.toLowerCase()}`}>
                          {config.direction}
                        </span>
                        {config.sonicator && (
                          <span className="sonicator-badge">S{config.sonicator}</span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="editor-main">
          {editingPin ? (
            <div className="pin-editor">
              <div className="pin-editor-header">
                <h4>üìù Editing {selectedPin}</h4>
                <div className="pin-editor-actions">
                  <button onClick={savePinConfig} className="btn-primary">
                    üíæ Save Changes
                  </button>
                  <button 
                    onClick={() => { setEditingPin(null); setSelectedPin(''); }}
                    className="btn-secondary"
                  >
                    ‚ùå Cancel
                  </button>
                </div>
              </div>

              <div className="pin-editor-form">
                <div className="form-row">
                  <div className="form-group">
                    <label>Physical Pin Number</label>
                    <input
                      type="number"
                      value={editingPin.pin}
                      onChange={(e) => handlePinUpdate('pin', parseInt(e.target.value))}
                      min="1"
                      max="40"
                    />
                  </div>
                  <div className="form-group">
                    <label>Signal Name</label>
                    <input
                      type="text"
                      value={editingPin.signal}
                      onChange={(e) => handlePinUpdate('signal', e.target.value)}
                    />
                  </div>
                </div>

                <div className="form-row">
                  <div className="form-group">
                    <label>Direction</label>
                    <select
                      value={editingPin.direction}
                      onChange={(e) => handlePinUpdate('direction', e.target.value)}
                    >
                      <option value="IN">Input</option>
                      <option value="OUT">Output</option>
                      <option value="ANALOG">Analog</option>
                    </select>
                  </div>
                  <div className="form-group">
                    <label>Sonicator ID (optional)</label>
                    <select
                      value={editingPin.sonicator || ''}
                      onChange={(e) => handlePinUpdate('sonicator', e.target.value ? parseInt(e.target.value) : undefined)}
                    >
                      <option value="">None</option>
                      <option value="1">Sonicator 1</option>
                      <option value="2">Sonicator 2</option>
                      <option value="3">Sonicator 3</option>
                      <option value="4">Sonicator 4</option>
                    </select>
                  </div>
                </div>

                <div className="form-group">
                  <label>Function Description</label>
                  <textarea
                    value={editingPin.function}
                    onChange={(e) => handlePinUpdate('function', e.target.value)}
                    rows={3}
                  />
                </div>

                <div className="form-row">
                  <div className="form-group">
                    <label>MODBUS Register (optional)</label>
                    <input
                      type="text"
                      value={editingPin.modbus_register || ''}
                      onChange={(e) => handlePinUpdate('modbus_register', e.target.value)}
                      placeholder="REG_SONx_..."
                    />
                  </div>
                  <div className="form-group">
                    <label>MODBUS Address (optional)</label>
                    <input
                      type="text"
                      value={editingPin.modbus_address || ''}
                      onChange={(e) => handlePinUpdate('modbus_address', e.target.value)}
                      placeholder="0x0100"
                    />
                  </div>
                </div>

                {editingPin.direction === 'ANALOG' && (
                  <div className="form-row">
                    <div className="form-group">
                      <label>ADC Channel</label>
                      <input
                        type="number"
                        value={editingPin.adc_channel || ''}
                        onChange={(e) => handlePinUpdate('adc_channel', e.target.value ? parseInt(e.target.value) : undefined)}
                        min="0"
                        max="7"
                      />
                    </div>
                    <div className="form-group">
                      <label>Scaling Factor</label>
                      <input
                        type="text"
                        value={editingPin.scaling || ''}
                        onChange={(e) => handlePinUpdate('scaling', e.target.value)}
                        placeholder="5.44 mV/W"
                      />
                    </div>
                  </div>
                )}

                <div className="form-row">
                  <div className="form-group">
                    <label>Test Point (optional)</label>
                    <input
                      type="text"
                      value={editingPin.test_point || ''}
                      onChange={(e) => handlePinUpdate('test_point', e.target.value)}
                      placeholder="TBD or specific test point"
                    />
                  </div>
                  <div className="form-group">
                    <label>Electrical Specs (optional)</label>
                    <input
                      type="text"
                      value={editingPin.electrical || ''}
                      onChange={(e) => handlePinUpdate('electrical', e.target.value)}
                      placeholder="5V logic, opto-isolated, etc."
                    />
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="pin-editor-placeholder">
              <div className="placeholder-content">
                <h4>üìå Select a Pin to Edit</h4>
                <p>Choose a pin from the list on the left to view and edit its configuration.</p>
                <div className="pin-stats">
                  <div className="stat">
                    <span className="stat-value">{Object.keys(pinConfigs).length}</span>
                    <span className="stat-label">Total Pins</span>
                  </div>
                  <div className="stat">
                    <span className="stat-value">
                      {Object.values(pinConfigs).filter(p => p.sonicator).length}
                    </span>
                    <span className="stat-label">Sonicator Pins</span>
                  </div>
                  <div className="stat">
                    <span className="stat-value">
                      {Object.values(pinConfigs).filter(p => p.direction === 'ANALOG').length}
                    </span>
                    <span className="stat-label">Analog Pins</span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {loading && (
        <div className="loading-overlay">
          <div className="loading-spinner">‚è≥ Loading...</div>
        </div>
      )}

      {error && (
        <div className="error-overlay">
          <div className="error-message">
            <h4>‚ùå Error</h4>
            <p>{error}</p>
            <button onClick={() => setError(null)} className="btn-secondary">
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default PinConfigEditor;
