/**
 * Configuration API Routes
 * Provides endpoints for modular hardware configuration management
 * Generated by Agile Flowâ„¢ Agentic Framework
 */

import { Router, Request, Response } from 'express';
import { configService } from '../config/ConfigService';
import { modularConfigService } from '../config/ModularConfigService';

const router = Router();

/**
 * GET /api/config
 * Get complete modular hardware configuration
 */
router.get('/', async (req: Request, res: Response) => {
  try {
    // Try modular config first, fallback to legacy
    if (!modularConfigService.isLoaded()) {
      await modularConfigService.loadConfiguration();
    }

    const config = modularConfigService.getConfigurationSummary();
    res.json({
      success: true,
      data: config,
      timestamp: Date.now(),
      type: 'modular'
    });
  } catch (error) {
    console.error('Failed to get modular configuration, falling back to legacy:', error);

    // Fallback to legacy configuration
    try {
      const legacyConfig = configService.getConfig();
      res.json({
        success: true,
        data: legacyConfig,
        timestamp: Date.now(),
        type: 'legacy',
        warning: 'Using legacy configuration - consider migrating to modular format'
      });
    } catch (legacyError) {
      console.error('Failed to get legacy configuration:', legacyError);
      res.status(500).json({
        success: false,
        error: 'Failed to load any configuration',
        message: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }
});

/**
 * GET /api/config/summary
 * Get configuration summary for dashboard
 */
router.get('/summary', (req: Request, res: Response) => {
  try {
    const summary = configService.getConfigSummary();
    res.json({
      success: true,
      data: summary,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get configuration summary:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get configuration summary',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/validate
 * Validate configuration integrity
 */
router.get('/validate', (req: Request, res: Response) => {
  try {
    const validation = configService.validateConfig();
    res.json({
      success: validation.valid,
      data: validation,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Configuration validation failed:', error);
    res.status(500).json({
      success: false,
      error: 'Configuration validation failed',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/pins
 * Get pin mapping for web UI
 */
router.get('/pins', (req: Request, res: Response) => {
  try {
    const pinMapping = configService.getPinMapping();
    res.json({
      success: true,
      data: pinMapping,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get pin mapping:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get pin mapping',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/sonicators
 * Get sonicator channel configuration
 */
router.get('/sonicators', (req: Request, res: Response) => {
  try {
    const config = configService.getConfig();
    const connectedSonicators = configService.getConnectedSonicators();
    
    res.json({
      success: true,
      data: {
        total: config.sonicators.count,
        channels: config.sonicators.channels,
        connected: connectedSonicators,
        connected_count: connectedSonicators.length
      },
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get sonicator configuration:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get sonicator configuration',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/sonicators/:id
 * Get specific sonicator channel configuration
 */
router.get('/sonicators/:id', (req: Request, res: Response) => {
  try {
    const channelId = parseInt(req.params.id);
    if (isNaN(channelId) || channelId < 1 || channelId > 4) {
      return res.status(400).json({
        success: false,
        error: 'Invalid sonicator channel ID',
        message: 'Channel ID must be between 1 and 4'
      });
    }

    const sonicator = configService.getSonicatorChannel(channelId);
    if (!sonicator) {
      return res.status(404).json({
        success: false,
        error: 'Sonicator channel not found',
        message: `Channel ${channelId} not configured`
      });
    }

    res.json({
      success: true,
      data: sonicator,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get sonicator channel:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get sonicator channel',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/capabilities
 * Get test capabilities
 */
router.get('/capabilities', (req: Request, res: Response) => {
  try {
    const config = configService.getConfig();
    const supportedCapabilities = configService.getSupportedCapabilities();
    
    res.json({
      success: true,
      data: {
        all: config.test_capabilities,
        supported: supportedCapabilities,
        supported_count: supportedCapabilities.length
      },
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get test capabilities:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get test capabilities',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/communication
 * Get communication settings
 */
router.get('/communication', (req: Request, res: Response) => {
  try {
    const modbusConfig = configService.getModbusConfig();
    const serialConfig = configService.getSerialConfig();
    
    res.json({
      success: true,
      data: {
        modbus: modbusConfig,
        serial: serialConfig
      },
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get communication configuration:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get communication configuration',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * POST /api/config/simulation
 * Toggle simulation mode
 */
router.post('/simulation', (req: Request, res: Response) => {
  try {
    const { enabled } = req.body;
    
    if (typeof enabled !== 'boolean') {
      return res.status(400).json({
        success: false,
        error: 'Invalid request',
        message: 'enabled field must be a boolean'
      });
    }

    configService.setSimulationMode(enabled);
    
    res.json({
      success: true,
      data: {
        simulation_mode: enabled,
        message: `Simulation mode ${enabled ? 'enabled' : 'disabled'}`
      },
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to set simulation mode:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to set simulation mode',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/limitations
 * Get current hardware limitations
 */
router.get('/limitations', (req: Request, res: Response) => {
  try {
    const config = configService.getConfig();
    
    res.json({
      success: true,
      data: config.limitations,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get limitations:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get limitations',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * POST /api/config/save
 * Save configuration changes to YAML file
 */
router.post('/save', (req: Request, res: Response) => {
  try {
    const { config } = req.body;

    if (!config) {
      return res.status(400).json({
        success: false,
        error: 'Invalid request',
        message: 'Configuration data is required'
      });
    }

    configService.saveConfig(config);

    res.json({
      success: true,
      data: {
        message: 'Configuration saved successfully'
      },
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to save configuration:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to save configuration',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * POST /api/config/reload
 * Reload configuration from file
 */
router.post('/reload', (req: Request, res: Response) => {
  try {
    const config = configService.loadConfig();
    const summary = configService.getConfigSummary();
    
    res.json({
      success: true,
      data: {
        message: 'Configuration reloaded successfully',
        summary: summary
      },
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to reload configuration:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to reload configuration',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// ============================================================================
// MODULAR CONFIGURATION ENDPOINTS
// ============================================================================

/**
 * GET /api/config/modular
 * Get complete modular configuration with all modules
 */
router.get('/modular', async (req: Request, res: Response) => {
  try {
    if (!modularConfigService.isLoaded()) {
      await modularConfigService.loadConfiguration();
    }

    const config = modularConfigService.getConfigurationSummary();
    res.json({
      success: true,
      data: config,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get modular configuration:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to load modular configuration',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/modules
 * Get list of all configuration modules
 */
router.get('/modules', async (req: Request, res: Response) => {
  try {
    if (!modularConfigService.isLoaded()) {
      await modularConfigService.loadConfiguration();
    }

    const summary = modularConfigService.getConfigurationSummary();
    res.json({
      success: true,
      data: {
        modules: summary.modules,
        lastLoadTime: summary.lastLoadTime
      },
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get configuration modules:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get configuration modules',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/modules/:moduleName
 * Get specific configuration module data
 */
router.get('/modules/:moduleName', async (req: Request, res: Response) => {
  try {
    const { moduleName } = req.params;

    if (!modularConfigService.isLoaded()) {
      await modularConfigService.loadConfiguration();
    }

    const moduleData = modularConfigService.getModuleData(moduleName);

    if (!moduleData) {
      return res.status(404).json({
        success: false,
        error: `Module not found: ${moduleName}`,
        availableModules: Object.keys(modularConfigService.getConfigurationSummary().masterConfig?.configuration_modules || {})
      });
    }

    res.json({
      success: true,
      data: moduleData,
      module: moduleName,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error(`Failed to get module ${req.params.moduleName}:`, error);
    res.status(500).json({
      success: false,
      error: `Failed to get module ${req.params.moduleName}`,
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * PUT /api/config/modules/:moduleName
 * Update specific configuration module
 */
router.put('/modules/:moduleName', async (req: Request, res: Response) => {
  try {
    const { moduleName } = req.params;
    const { data } = req.body;

    if (!data) {
      return res.status(400).json({
        success: false,
        error: 'Missing configuration data in request body'
      });
    }

    const success = await modularConfigService.saveModule(moduleName, data);

    if (success) {
      res.json({
        success: true,
        message: `Module ${moduleName} updated successfully`,
        module: moduleName,
        timestamp: Date.now()
      });
    } else {
      res.status(400).json({
        success: false,
        error: `Failed to update module ${moduleName} - validation errors`,
        validationErrors: modularConfigService.getConfigurationSummary().validationErrors
      });
    }
  } catch (error) {
    console.error(`Failed to update module ${req.params.moduleName}:`, error);
    res.status(500).json({
      success: false,
      error: `Failed to update module ${req.params.moduleName}`,
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * POST /api/config/validate
 * Validate complete modular configuration
 */
router.post('/validate', async (req: Request, res: Response) => {
  try {
    const validation = await modularConfigService.validateConfiguration();

    res.json({
      success: true,
      data: {
        valid: validation.valid,
        errors: validation.errors,
        errorCount: validation.errors.length,
        warningCount: validation.errors.filter(e => e.severity === 'warning').length
      },
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to validate configuration:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to validate configuration',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * POST /api/config/reload
 * Reload complete modular configuration
 */
router.post('/reload', async (req: Request, res: Response) => {
  try {
    const config = await modularConfigService.reloadConfiguration();

    res.json({
      success: true,
      data: config,
      message: 'Configuration reloaded successfully',
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to reload configuration:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to reload configuration',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// ============================================================================
// SPECIALIZED CONFIGURATION ENDPOINTS
// ============================================================================

/**
 * GET /api/config/pins
 * Get all pin configurations
 */
router.get('/pins', async (req: Request, res: Response) => {
  try {
    if (!modularConfigService.isLoaded()) {
      await modularConfigService.loadConfiguration();
    }

    const pins = modularConfigService.getAllPinConfigs();
    res.json({
      success: true,
      data: pins,
      count: Object.keys(pins).length,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get pin configurations:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get pin configurations',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/pins/:pinName
 * Get specific pin configuration
 */
router.get('/pins/:pinName', async (req: Request, res: Response) => {
  try {
    const { pinName } = req.params;
    const pinConfig = await modularConfigService.getPinConfig(pinName);

    if (!pinConfig) {
      return res.status(404).json({
        success: false,
        error: `Pin not found: ${pinName}`,
        availablePins: Object.keys(modularConfigService.getAllPinConfigs())
      });
    }

    res.json({
      success: true,
      data: pinConfig,
      pin: pinName,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error(`Failed to get pin ${req.params.pinName}:`, error);
    res.status(500).json({
      success: false,
      error: `Failed to get pin ${req.params.pinName}`,
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/sonicators
 * Get all sonicator configurations
 */
router.get('/sonicators', async (req: Request, res: Response) => {
  try {
    if (!modularConfigService.isLoaded()) {
      await modularConfigService.loadConfiguration();
    }

    const sonicators = modularConfigService.getAllSonicatorConfigs();
    res.json({
      success: true,
      data: sonicators,
      count: sonicators.length,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get sonicator configurations:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get sonicator configurations',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/sonicators/:sonicatorId
 * Get specific sonicator configuration
 */
router.get('/sonicators/:sonicatorId', async (req: Request, res: Response) => {
  try {
    const sonicatorId = parseInt(req.params.sonicatorId);

    if (isNaN(sonicatorId) || sonicatorId < 1 || sonicatorId > 4) {
      return res.status(400).json({
        success: false,
        error: 'Invalid sonicator ID - must be 1, 2, 3, or 4'
      });
    }

    const sonicatorConfig = await modularConfigService.getSonicatorConfig(sonicatorId);

    if (!sonicatorConfig) {
      return res.status(404).json({
        success: false,
        error: `Sonicator not found: ${sonicatorId}`,
        availableSonicators: [1, 2, 3, 4]
      });
    }

    res.json({
      success: true,
      data: sonicatorConfig,
      sonicatorId,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error(`Failed to get sonicator ${req.params.sonicatorId}:`, error);
    res.status(500).json({
      success: false,
      error: `Failed to get sonicator ${req.params.sonicatorId}`,
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/db9
 * Get all DB9 connector configurations
 */
router.get('/db9', async (req: Request, res: Response) => {
  try {
    if (!modularConfigService.isLoaded()) {
      await modularConfigService.loadConfiguration();
    }

    const db9Configs = modularConfigService.getAllDB9Configs();
    res.json({
      success: true,
      data: db9Configs,
      count: Object.keys(db9Configs).length,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get DB9 configurations:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get DB9 configurations',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/db9/:connectorName
 * Get specific DB9 connector configuration
 */
router.get('/db9/:connectorName', async (req: Request, res: Response) => {
  try {
    const { connectorName } = req.params;
    const db9Config = await modularConfigService.getDB9Config(connectorName);

    if (!db9Config) {
      return res.status(404).json({
        success: false,
        error: `DB9 connector not found: ${connectorName}`,
        availableConnectors: Object.keys(modularConfigService.getAllDB9Configs())
      });
    }

    res.json({
      success: true,
      data: db9Config,
      connector: connectorName,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error(`Failed to get DB9 ${req.params.connectorName}:`, error);
    res.status(500).json({
      success: false,
      error: `Failed to get DB9 ${req.params.connectorName}`,
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * GET /api/config/modbus
 * Get MODBUS configuration
 */
router.get('/modbus', async (req: Request, res: Response) => {
  try {
    if (!modularConfigService.isLoaded()) {
      await modularConfigService.loadConfiguration();
    }

    const modbusConfig = modularConfigService.getModbusConfig();

    if (!modbusConfig) {
      return res.status(404).json({
        success: false,
        error: 'MODBUS configuration not found'
      });
    }

    res.json({
      success: true,
      data: modbusConfig,
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to get MODBUS configuration:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get MODBUS configuration',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * POST /api/config/export
 * Export combined configuration for backward compatibility
 */
router.post('/export', async (req: Request, res: Response) => {
  try {
    const { outputPath } = req.body;
    const exportPath = await modularConfigService.exportCombinedConfig(outputPath);

    res.json({
      success: true,
      data: {
        exportPath,
        message: 'Configuration exported successfully'
      },
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Failed to export configuration:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to export configuration',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

export default router;
