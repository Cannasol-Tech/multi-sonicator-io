# Generated by Agile Flowâ„¢ Agentic Framework
# Multi-Sonicator-IO Communication Configuration
# SOLE SOURCE OF TRUTH for MODBUS RTU and serial communication settings

metadata:
  name: "communication-configuration"
  description: "MODBUS RTU and serial communication parameters and specifications"
  author: "Stephen Boyett"
  company: "Cannasol Technologies"
  last_updated: "2025-09-16"
  version: "1.0.0"


# ============================================================================
# MODBUS RTU CONFIGURATION
# ============================================================================
# Industrial-grade MODBUS RTU slave configuration for PLC/HMI integration

modbus:
  # Basic MODBUS RTU Parameters
  protocol: "MODBUS RTU"
  mode: "slave"
  slave_id: 2
  description: "Multi-Sonicator-IO MODBUS RTU slave interface"
  
  # Serial Communication Parameters
  serial:
    baud_rate: 115200
    data_bits: 8
    stop_bits: 1
    parity: "none"
    flow_control: "none"
    description: "High-speed serial for real-time response"
    
  # Timing Parameters
  timing:
    response_timeout_ms: 100      # NFR2 requirement: <100ms response time
    frame_timeout_ms: 1000        # Maximum time to wait for complete frame
    inter_frame_delay_ms: 4       # 3.5 character times at 115200 baud
    character_timeout_ms: 2       # 1.5 character times at 115200 baud
    turnaround_delay_ms: 1        # Minimum delay before response transmission
    
  # Performance Specifications
  performance:
    max_registers_per_request: 50  # Maximum registers in single read/write
    max_throughput_regs_per_sec: 1000  # Theoretical maximum throughput
    typical_response_time_ms: 20   # Typical response time under normal load
    max_concurrent_connections: 1  # Single master only
    
  # Supported Function Codes
  function_codes:
    - code: 0x03
      name: "Read Holding Registers"
      description: "Read multiple 16-bit registers"
      access_type: "read"
      max_registers: 125
      supported: true
      
    - code: 0x06
      name: "Write Single Register"
      description: "Write single 16-bit register"
      access_type: "write"
      max_registers: 1
      supported: true
      
    - code: 0x10
      name: "Write Multiple Registers"
      description: "Write multiple 16-bit registers"
      access_type: "write"
      max_registers: 123
      supported: true
      
    # Unsupported function codes (for reference)
    - code: 0x01
      name: "Read Coils"
      supported: false
      reason: "Not required for sonicator application"
      
    - code: 0x02
      name: "Read Discrete Inputs"
      supported: false
      reason: "Not required for sonicator application"
      
    - code: 0x04
      name: "Read Input Registers"
      supported: false
      reason: "All registers implemented as holding registers"
      
    - code: 0x05
      name: "Write Single Coil"
      supported: false
      reason: "Not required for sonicator application"
      
    - code: 0x0F
      name: "Write Multiple Coils"
      supported: false
      reason: "Not required for sonicator application"

  # Error Handling Configuration
  error_handling:
    enable_error_counters: true
    max_error_count: 65535        # 16-bit counter maximum
    error_counter_reset: "system_restart"
    
    # Exception codes returned by slave
    exception_codes:
      - code: 0x01
        name: "Illegal Function"
        description: "Function code not supported"
        
      - code: 0x02
        name: "Illegal Data Address"
        description: "Register address out of range"
        
      - code: 0x03
        name: "Illegal Data Value"
        description: "Data value out of acceptable range"
        
      - code: 0x04
        name: "Slave Device Failure"
        description: "Unrecoverable error in slave device"
        
      - code: 0x06
        name: "Slave Device Busy"
        description: "Slave is processing long-duration command"

  # Register Access Configuration
  register_access:
    validation_enabled: true
    bounds_checking: true
    read_only_protection: true
    write_validation: true
    
    # Access control by register range
    access_ranges:
      system_status:
        start_address: 0x0000
        end_address: 0x000F
        access_type: "read_only"
        description: "System status and diagnostic registers"
        
      global_control:
        start_address: 0x0010
        end_address: 0x001F
        access_type: "read_write"
        description: "Global system control registers"
        
      sonicator_registers:
        start_address: 0x0100
        end_address: 0x041F
        access_type: "mixed"
        description: "Per-sonicator control and status registers"
        control_range: "0xN00-0xN0F (read/write)"
        status_range: "0xN10-0xN1F (read only)"

  # Diagnostic and Monitoring
  diagnostics:
    enable_communication_stats: true
    enable_performance_monitoring: true
    enable_error_logging: true
    
    # Statistics tracked
    statistics:
      - "Total requests processed"
      - "Successful responses sent"
      - "Error responses sent"
      - "CRC errors detected"
      - "Timeout errors"
      - "Invalid function codes"
      - "Invalid register addresses"
      - "Average response time"
      - "Peak response time"
      - "Communication uptime"

# ============================================================================
# SERIAL PORT CONFIGURATION
# ============================================================================
# Development and testing serial port settings

serial:
  # Development Serial Port (for HIL testing)
  development:
    port: "/dev/tty.usbmodem2101"  # Arduino Uno R4 WiFi
    description: "Development HIL test harness connection"
    baud_rate: 115200
    data_bits: 8
    stop_bits: 1
    parity: "none"
    flow_control: "none"
    timeout_ms: 5000
    
  # Production Serial Port (placeholder)
  production:
    port: "/dev/ttyUSB0"  # Typical Linux USB-serial adapter
    description: "Production MODBUS RTU interface"
    baud_rate: 115200
    data_bits: 8
    stop_bits: 1
    parity: "none"
    flow_control: "none"
    timeout_ms: 1000
    
  # Serial Port Auto-Detection
  auto_detection:
    enabled: true
    search_patterns:
      - "/dev/tty.usbmodem*"      # macOS Arduino
      - "/dev/ttyUSB*"            # Linux USB-serial
      - "/dev/ttyACM*"            # Linux Arduino
      - "COM*"                    # Windows
    timeout_per_port_ms: 1000
    max_ports_to_scan: 10

# ============================================================================
# NETWORK CONFIGURATION (Future Expansion)
# ============================================================================
# TCP/IP MODBUS and Ethernet configuration for future expansion

network:
  # MODBUS TCP Configuration (future)
  modbus_tcp:
    enabled: false
    port: 502
    max_connections: 5
    connection_timeout_ms: 30000
    description: "Future MODBUS TCP/IP support"
    
  # Ethernet Configuration (future)
  ethernet:
    enabled: false
    dhcp: true
    static_ip: "192.168.1.100"
    subnet_mask: "255.255.255.0"
    gateway: "192.168.1.1"
    dns_primary: "8.8.8.8"
    dns_secondary: "8.8.4.4"
    description: "Future Ethernet connectivity"

# ============================================================================
# COMMUNICATION SECURITY (Future Enhancement)
# ============================================================================
# Security features for industrial communication

security:
  # Authentication (future)
  authentication:
    enabled: false
    method: "none"  # Options: none, password, certificate
    description: "Future authentication support"
    
  # Encryption (future)
  encryption:
    enabled: false
    method: "none"  # Options: none, TLS, custom
    description: "Future encryption support"
    
  # Access Control (future)
  access_control:
    enabled: false
    whitelist_enabled: false
    allowed_masters: []
    description: "Future access control features"

# ============================================================================
# COMMUNICATION TESTING AND VALIDATION
# ============================================================================
# Test configurations and validation parameters

testing:
  # Unit Test Configuration
  unit_tests:
    mock_serial_port: true
    simulate_communication_errors: true
    test_timeout_conditions: true
    test_invalid_requests: true
    
  # Integration Test Configuration
  integration_tests:
    real_hardware_testing: true
    loopback_testing: true
    stress_testing: true
    performance_benchmarking: true
    
  # Test Scenarios
  test_scenarios:
    - name: "Basic Communication"
      description: "Simple read/write operations"
      registers_to_test: ["0x0000", "0x0010", "0x0100"]
      
    - name: "Bulk Operations"
      description: "Large register read/write operations"
      max_registers: 50
      
    - name: "Error Conditions"
      description: "Invalid requests and error handling"
      test_invalid_addresses: true
      test_invalid_functions: true
      
    - name: "Performance Testing"
      description: "Response time and throughput testing"
      target_response_time_ms: 100
      target_throughput_regs_per_sec: 500
      
    - name: "Stress Testing"
      description: "High-load continuous operation"
      duration_minutes: 60
      requests_per_second: 10

# ============================================================================
# ENVIRONMENT-SPECIFIC SETTINGS
# ============================================================================
# Configuration for different deployment environments

environments:
  development:
    debug_logging: true
    verbose_errors: true
    simulation_mode: false
    hardware_timeout_ms: 5000
    log_level: "debug"
    
  testing:
    debug_logging: true
    verbose_errors: true
    simulation_mode: true
    hardware_timeout_ms: 1000
    log_level: "info"
    
  production:
    debug_logging: false
    verbose_errors: false
    simulation_mode: false
    hardware_timeout_ms: 1000
    log_level: "warning"

# Performance monitoring and optimization
performance_monitoring:
  enabled: true
  metrics_collection_interval_ms: 1000
  metrics_retention_hours: 24
  
  # Key Performance Indicators
  kpis:
    - name: "Average Response Time"
      target_ms: 50
      warning_threshold_ms: 80
      critical_threshold_ms: 100
      
    - name: "Communication Success Rate"
      target_percent: 99.9
      warning_threshold_percent: 99.0
      critical_threshold_percent: 95.0
      
    - name: "Throughput"
      target_regs_per_sec: 500
      warning_threshold_regs_per_sec: 300
      critical_threshold_regs_per_sec: 100

# References and cross-references
references:
  modbus_specification: "MODBUS Application Protocol Specification V1.1b3"
  pinout_config: "config/pinout-cfg.yaml"
  connections_config: "config/connections-cfg.yaml"
  register_definitions: "include/register_map.h"
  hal_uart_module: "src/modules/hal/uart.h"
  modbus_implementation: "src/modules/communication/modbus.h"

# Change management
change_management:
  update_requirements:
    - "Update MODBUS implementation constants"
    - "Update HAL UART configuration"
    - "Update test harness communication settings"
    - "Validate timing parameters against hardware"
    - "Update documentation and specifications"
    
  validation_checklist:
    - "Verify baud rate compatibility with hardware"
    - "Confirm timing parameters meet MODBUS specification"
    - "Validate function code support"
    - "Test error handling scenarios"
    - "Verify performance requirements compliance"
