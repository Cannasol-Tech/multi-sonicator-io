; ATmega32A-specific PlatformIO Configuration
; Inherits common settings from root platformio.ini

[platformio]
default_envs = atmega32a

[env:atmega32a]
; Board configuration
board = ATmega32
board_build.mcu = atmega32a
board_build.f_cpu = 16000000L
board_hardware.oscillator = external
board_hardware.uart = uart0
board_hardware.bod = 2.7v
board_hardware.eeprom = keep
board_fuses.lfuse = 0xFF
board_fuses.hfuse = 0xD9
board_fuses.efuse = 0xFF

; Upload configuration
upload_protocol = custom
upload_port = ${sysenv.ARDUINO_PORT}
upload_flags =
  -C
  $PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
  -p
  m32
  -P
  ${sysenv.ARDUINO_PORT}
  -c
  stk500v1
  -b
  19200
  -B
  8
  -F
  -D
upload_command = $PROJECT_PACKAGES_DIR/tool-avrdude/avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i -V

; Debug configuration
debug_tool = avr-stub
debug_port = ${sysenv.DEBUG_PORT:-/dev/cu.usbserial*}

; Build configuration
build_flags = ${env.build_flags}
  -DARDUINO_AVR_ATMEGA32A
  -DF_CPU=16000000L
  -DARDUINO_ARCH_AVR
  -Wall
  -Wextra
  -std=c++11

; Source filtering
build_src_filter =
  +<*>
  -<modules/communication/modbus_example.cpp>

; Dependencies
lib_deps = ${env.lib_deps}
  Wire
  EEPROM

[env:atmega32a-debug]
; Inherit all settings from atmega32a
extends = env:atmega32a

; Override debug-specific settings
debug_port = ${sysenv.DEBUG_PORT}
upload_protocol = arduino
build_flags = ${env.build_flags}
  -DDEBUG
  -Og
  -g

[env:atmega32a-test]
; Inherit all settings from atmega32a
extends = env:atmega32a
platform = atmelavr

; Test-specific settings
build_flags = ${env.build_flags}
  -DUNIT_TEST
  -DDEBUG
test_framework = unity
lib_deps = 
  throwtheswitch/Unity@^2.5.2

[env:native_test]
platform = native
framework = 
test_framework = unity
build_flags = 
	-DUNIT_TEST
	-DNATIVE_TEST
	-DF_CPU=16000000L
	-std=c++11
	-Wall
	-Wextra
	-O0
	-g
	-I src/
	-I test/
	-I test/mocks/
	-I include/
	-I test/unit/
;	--coverage  ; removed for macOS clang compatibility
lib_deps = throwtheswitch/Unity@^2.5.2
test_filter = unit/*
build_src_filter = 
	+<modules/>
	+<compat/>
	-<main.cpp>
	-<modules/communication/modbus_example.cpp>
test_build_src = yes
lib_compat_mode = off
extra_scripts = 
	post:scripts/generate_coverage_report.py

[env:comprehensive_test]
platform = native
framework = 
test_framework = unity
build_flags = 
	-DUNIT_TEST
	-DNATIVE_TEST
	-DF_CPU=16000000L
	-std=c++11
	-Wall
	-Wextra
	-I src/
	-I test/
	-I test/mocks/
	-I include/
lib_deps = throwtheswitch/Unity@^2.5.2
test_filter = test_comprehensive_coverage.cpp
build_src_filter = 
	+<modules/communication/>
	+<modules/hal/>
	+<compat/>
	-<modules/communication/modbus_example.cpp>
	-<main.cpp>
	-<modules/control/>
	-<modules/sonicator/>
test_ignore = 
	test_hal_complete_coverage.cpp
	unit/test_modbus_communication.cpp
	unit/test_project_structure.cpp
test_build_src = yes
lib_compat_mode = off
