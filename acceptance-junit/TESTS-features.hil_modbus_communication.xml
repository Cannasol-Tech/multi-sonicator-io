<testsuite name="features.hil_modbus_communication.MODBUS RTU Communication Hardware Validation" tests="9" errors="4" failures="0" skipped="5" time="155.640418" timestamp="2025-09-12T01:57:26.042251" hostname="Corbans-Mini.home"><testcase classname="features.hil_modbus_communication.MODBUS RTU Communication Hardware Validation" name="Read System Status Registers" status="cleanup_error" time="51.591122"><error type="NoneType" message="None">
<![CDATA[
Failing step: And the HIL framework is connected ... undefined in 0.000s
Location: test/acceptance/features/hil_modbus_communication.feature:8
None]]>
</error><system-out>
<![CDATA[
@scenario.begin

  @hil @modbus @hardware
  Scenario: Read System Status Registers
    Given the ATmega32A is programmed with MODBUS firmware ... failed in 51.591s
    And the HIL framework is connected ... undefined in 0.000s
    And the MODBUS slave ID is set to 2 ... skipped in 0.000s
    And communication is established at 115200 baud ... skipped in 0.000s
    When I read MODBUS register 0x0000 (system status) ... skipped in 0.000s
    Then the register value should be valid ... skipped in 0.000s
    And the response time should be less than 100ms ... skipped in 0.000s
    And the CRC should be correct ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
ðŸ”§ HIL scenario setup: Read System Status Registers


]]>
</system-out><system-err>
<![CDATA[
Captured stderr:

Programming failed: Avrdude version 8.1
Copyright see https://github.com/avrdudes/avrdude/blob/main/AUTHORS

System wide configuration file is /opt/homebrew/etc/avrdude.conf
User configuration file /Users/Stephen/.avrduderc does not exist

Using port            : /dev/cu.usbmodem2101
Using programmer      : stk500v1
Setting baud rate     : 19200
Setting bit clk period: 8.0 us
Error: programmer is not responding
Warning: attempt 1 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 2 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 3 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 4 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 5 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 6 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 7 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 8 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 9 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 10 of 10: not in sync: resp=0x00
Error: unable to open port /dev/cu.usbmodem2101 for programmer stk500v1

Avrdude done.  Thank you.


]]>
</system-err></testcase><testcase classname="features.hil_modbus_communication.MODBUS RTU Communication Hardware Validation" name="Write and Verify Control Register" status="cleanup_error" time="51.803693"><error type="NoneType" message="None">
<![CDATA[
Failing step: And the HIL framework is connected ... undefined in 0.000s
Location: test/acceptance/features/hil_modbus_communication.feature:8
None]]>
</error><system-out>
<![CDATA[
@scenario.begin

  @hil @modbus @hardware
  Scenario: Write and Verify Control Register
    Given the ATmega32A is programmed with MODBUS firmware ... failed in 51.804s
    And the HIL framework is connected ... undefined in 0.000s
    And the MODBUS slave ID is set to 2 ... skipped in 0.000s
    And communication is established at 115200 baud ... skipped in 0.000s
    When I write value 1 to MODBUS register 0x0010 (global enable) ... skipped in 0.000s
    Then reading register 0x0010 should return value 1 ... skipped in 0.000s
    And the register change should be reflected within 100ms ... skipped in 0.000s
    And the system status should update accordingly ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
ðŸ”§ HIL scenario setup: Write and Verify Control Register


]]>
</system-out><system-err>
<![CDATA[
Captured stderr:

Programming failed: Avrdude version 8.1
Copyright see https://github.com/avrdudes/avrdude/blob/main/AUTHORS

System wide configuration file is /opt/homebrew/etc/avrdude.conf
User configuration file /Users/Stephen/.avrduderc does not exist

Using port            : /dev/cu.usbmodem2101
Using programmer      : stk500v1
Setting baud rate     : 19200
Setting bit clk period: 8.0 us
Error: programmer is not responding
Warning: attempt 1 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 2 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 3 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 4 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 5 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 6 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 7 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 8 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 9 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 10 of 10: not in sync: resp=0x00
Error: unable to open port /dev/cu.usbmodem2101 for programmer stk500v1

Avrdude done.  Thank you.


]]>
</system-err></testcase><testcase classname="features.hil_modbus_communication.MODBUS RTU Communication Hardware Validation" name="Communication Fault Detection" status="cleanup_error" time="52.245603"><error type="NoneType" message="None">
<![CDATA[
Failing step: And the HIL framework is connected ... undefined in 0.000s
Location: test/acceptance/features/hil_modbus_communication.feature:8
None]]>
</error><system-out>
<![CDATA[
@scenario.begin

  @hil @modbus @hardware
  Scenario: Communication Fault Detection
    Given the ATmega32A is programmed with MODBUS firmware ... failed in 52.246s
    And the HIL framework is connected ... undefined in 0.000s
    And the MODBUS slave ID is set to 2 ... skipped in 0.000s
    And communication is established at 115200 baud ... skipped in 0.000s
    Given the MODBUS communication is established ... skipped in 0.000s
    When I disconnect the communication cable ... skipped in 0.000s
    And wait for 2 seconds ... skipped in 0.000s
    Then the system should detect communication fault ... skipped in 0.000s
    And enter failsafe mode per requirements ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
ðŸ”§ HIL scenario setup: Communication Fault Detection


]]>
</system-out><system-err>
<![CDATA[
Captured stderr:

Programming failed: Avrdude version 8.1
Copyright see https://github.com/avrdudes/avrdude/blob/main/AUTHORS

System wide configuration file is /opt/homebrew/etc/avrdude.conf
User configuration file /Users/Stephen/.avrduderc does not exist

Using port            : /dev/cu.usbmodem2101
Using programmer      : stk500v1
Setting baud rate     : 19200
Setting bit clk period: 8.0 us
Error: programmer is not responding
Warning: attempt 1 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 2 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 3 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 4 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 5 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 6 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 7 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 8 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 9 of 10: not in sync: resp=0x00
Error: programmer is not responding
Warning: attempt 10 of 10: not in sync: resp=0x00
Error: unable to open port /dev/cu.usbmodem2101 for programmer stk500v1

Avrdude done.  Thank you.


]]>
</system-err></testcase><testcase classname="features.hil_modbus_communication.MODBUS RTU Communication Hardware Validation" name="Multiple register read operation" status="hook_error" time="0"><error type="UnknownError" message="">
<![CDATA[Traceback:
]]>
</error><system-out>
<![CDATA[
@scenario.begin

  @hil @modbus @hardware
  Scenario: Multiple register read operation
    Given the ATmega32A is programmed with MODBUS firmware ... untested in 0.000s
    And the HIL framework is connected ... untested in 0.000s
    And the MODBUS slave ID is set to 2 ... untested in 0.000s
    And communication is established at 115200 baud ... untested in 0.000s
    When I read MODBUS registers 0x0000 to 0x0003 in sequence ... untested in 0.000s
    Then all reads should succeed ... untested in 0.000s
    And each response time should be less than 100ms ... untested in 0.000s
    And all CRC values should be correct ... untested in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out><system-err>
<![CDATA[
Captured stderr:
ABORTED: HOOK-ERROR in before_scenario: KeyboardInterrupt

]]>
</system-err></testcase><testcase classname="features.hil_modbus_communication.MODBUS RTU Communication Hardware Validation" name="Register write and immediate readback" status="untested" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @hil @modbus @hardware
  Scenario: Register write and immediate readback
    Given the ATmega32A is programmed with MODBUS firmware ... untested in 0.000s
    And the HIL framework is connected ... untested in 0.000s
    And the MODBUS slave ID is set to 2 ... untested in 0.000s
    And communication is established at 115200 baud ... untested in 0.000s
    When I write value 0x1234 to MODBUS register 0x0100 ... untested in 0.000s
    And immediately read MODBUS register 0x0100 ... untested in 0.000s
    Then the read value should be 0x1234 ... untested in 0.000s
    And the total operation time should be less than 200ms ... untested in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="features.hil_modbus_communication.MODBUS RTU Communication Hardware Validation" name="Invalid register access handling" status="untested" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @hil @modbus @hardware
  Scenario: Invalid register access handling
    Given the ATmega32A is programmed with MODBUS firmware ... untested in 0.000s
    And the HIL framework is connected ... untested in 0.000s
    And the MODBUS slave ID is set to 2 ... untested in 0.000s
    And communication is established at 115200 baud ... untested in 0.000s
    When I attempt to read MODBUS register 0xFFFF (invalid address) ... untested in 0.000s
    Then I should receive a MODBUS exception response ... untested in 0.000s
    And the exception code should indicate illegal address ... untested in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="features.hil_modbus_communication.MODBUS RTU Communication Hardware Validation" name="CRC error handling" status="untested" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @hil @modbus @hardware
  Scenario: CRC error handling
    Given the ATmega32A is programmed with MODBUS firmware ... untested in 0.000s
    And the HIL framework is connected ... untested in 0.000s
    And the MODBUS slave ID is set to 2 ... untested in 0.000s
    And communication is established at 115200 baud ... untested in 0.000s
    When I send a MODBUS request with invalid CRC ... untested in 0.000s
    Then the slave should not respond ... untested in 0.000s
    And no register values should change ... untested in 0.000s
    When I send the same request with valid CRC ... untested in 0.000s
    Then the slave should respond correctly ... untested in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="features.hil_modbus_communication.MODBUS RTU Communication Hardware Validation" name="Communication timeout handling" status="untested" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @hil @modbus @hardware
  Scenario: Communication timeout handling
    Given the ATmega32A is programmed with MODBUS firmware ... untested in 0.000s
    And the HIL framework is connected ... untested in 0.000s
    And the MODBUS slave ID is set to 2 ... untested in 0.000s
    And communication is established at 115200 baud ... untested in 0.000s
    When I stop sending MODBUS requests for 5 seconds ... untested in 0.000s
    Then the communication fault flag should be set ... untested in 0.000s
    When I resume MODBUS communication ... untested in 0.000s
    Then the communication fault flag should clear within 1 second ... untested in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="features.hil_modbus_communication.MODBUS RTU Communication Hardware Validation" name="Sonicator control via MODBUS" status="untested" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @hil @modbus @hardware
  Scenario: Sonicator control via MODBUS
    Given the ATmega32A is programmed with MODBUS firmware ... untested in 0.000s
    And the HIL framework is connected ... untested in 0.000s
    And the MODBUS slave ID is set to 2 ... untested in 0.000s
    And communication is established at 115200 baud ... untested in 0.000s
    When I write value 1 to MODBUS register 0x0160 (sonicator 4 start) ... untested in 0.000s
    Then pin "START_4" should go HIGH ... untested in 0.000s
    When I write value 0 to MODBUS register 0x0160 ... untested in 0.000s
    Then pin "START_4" should go LOW ... untested in 0.000s
    And the operation should complete within 50ms ... untested in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase></testsuite>