<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="da/dd9/hal__template__example_8h" kind="file" language="C++">
    <compoundname>hal_template_example.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/modules/hal/hal_template_example.h</label>
        <link refid="da/dd9/hal__template__example_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="d9/d2e/class_gpio_hal" prot="public">GpioHal</innerclass>
    <innerclass refid="db/daf/class_adc_hal" prot="public">AdcHal</innerclass>
    <innerclass refid="d8/d40/class_pwm_hal" prot="public">PwmHal</innerclass>
    <innerclass refid="d1/d54/class_hal_template" prot="public">HalTemplate</innerclass>
    <innerclass refid="d3/d3b/class_atmega_hal" prot="public">AtmegaHal</innerclass>
    <innerclass refid="d2/d0d/class_mock_hal" prot="public">MockHal</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="da/dd9/hal__template__example_8h_1a4e18e60b01d7a0255195b6f3f81f6ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void productionExample</definition>
        <argsstring>()</argsstring>
        <name>productionExample</name>
        <briefdescription>
<para>Example: Production Hardware Usage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/hal_template_example.h" line="262" column="6" bodyfile="src/modules/hal/hal_template_example.h" bodystart="262" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="da/dd9/hal__template__example_8h_1ad1bd2d596ba706727e0df1cb9991d87d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testingExample</definition>
        <argsstring>()</argsstring>
        <name>testingExample</name>
        <briefdescription>
<para>Example: Unit Testing with Mock. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/hal_template_example.h" line="286" column="6" bodyfile="src/modules/hal/hal_template_example.h" bodystart="286" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="da/dd9/hal__template__example_8h_1a7ba8bf638f85b06584a5543ce0d02752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void componentExample</definition>
        <argsstring>()</argsstring>
        <name>componentExample</name>
        <briefdescription>
<para>Example: Individual HAL Components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/hal_template_example.h" line="308" column="6" bodyfile="src/modules/hal/hal_template_example.h" bodystart="308" bodyend="319"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Template-Based HAL Example for Zero-Overhead Polymorphism. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Cannasol Technologies </para>
</simplesect>
<simplesect kind="date"><para>2025-09-16 </para>
</simplesect>
<simplesect kind="version"><para>1.0.0</para>
</simplesect>
This example demonstrates template-based HAL design that provides:<itemizedlist>
<listitem><para>Zero runtime overhead (no virtual methods)</para>
</listitem><listitem><para>Compile-time polymorphism</para>
</listitem><listitem><para>Type safety</para>
</listitem><listitem><para>Testability through template parameters</para>
</listitem><listitem><para>Perfect for embedded systems with limited resources </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAL_TEMPLATE_EXAMPLE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HAL_TEMPLATE_EXAMPLE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEMPLATE-BASED<sp/>HAL<sp/>DESIGN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HalImpl&gt;</highlight></codeline>
<codeline lineno="33" refid="d9/d2e/class_gpio_hal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d9/d2e/class_gpio_hal" kindref="compound">GpioHal</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Core<sp/>GPIO<sp/>operations<sp/>-<sp/>direct<sp/>calls<sp/>to<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="d9/d2e/class_gpio_hal_1a8ebef7395cb2e0c7482ee16a0feb3512" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d2e/class_gpio_hal_1a8ebef7395cb2e0c7482ee16a0feb3512" kindref="member">init</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::gpioInit();<sp/>}</highlight></codeline>
<codeline lineno="37" refid="d9/d2e/class_gpio_hal_1a5e3d7e61c5793c90d9aa3b87a9992985" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d2e/class_gpio_hal_1a5e3d7e61c5793c90d9aa3b87a9992985" kindref="member">setPinMode</ref>(uint8_t<sp/>pin,<sp/>uint8_t<sp/>mode)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::gpioSetPinMode(pin,<sp/>mode);<sp/>}</highlight></codeline>
<codeline lineno="38" refid="d9/d2e/class_gpio_hal_1aeb35f4b7481fbce73967fdd512139bca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d2e/class_gpio_hal_1aeb35f4b7481fbce73967fdd512139bca" kindref="member">digitalWrite</ref>(uint8_t<sp/>pin,<sp/>uint8_t<sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::gpioDigitalWrite(pin,<sp/>value);<sp/>}</highlight></codeline>
<codeline lineno="39" refid="d9/d2e/class_gpio_hal_1aa672e7d9f4bb045c5a4f1144dd7a28e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="d9/d2e/class_gpio_hal_1aa672e7d9f4bb045c5a4f1144dd7a28e7" kindref="member">digitalRead</ref>(uint8_t<sp/>pin)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::gpioDigitalRead(pin);<sp/>}</highlight></codeline>
<codeline lineno="40" refid="d9/d2e/class_gpio_hal_1a09ee6eb7e616a25b7a6e938c0b7c05f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d2e/class_gpio_hal_1a09ee6eb7e616a25b7a6e938c0b7c05f2" kindref="member">togglePin</ref>(uint8_t<sp/>pin)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::gpioTogglePin(pin);<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sonicator-specific<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="d9/d2e/class_gpio_hal_1a5d443f61902c789d4b7bf540687f705c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d2e/class_gpio_hal_1a5d443f61902c789d4b7bf540687f705c" kindref="member">sonicatorStart</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::gpioSonicatorStart(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="44" refid="d9/d2e/class_gpio_hal_1adfcbf6e7d087b84b12d8e7f8ee11e070" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d2e/class_gpio_hal_1adfcbf6e7d087b84b12d8e7f8ee11e070" kindref="member">sonicatorStop</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::gpioSonicatorStop(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="45" refid="d9/d2e/class_gpio_hal_1ae4798364bf9d2baf7de59a051055282f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d2e/class_gpio_hal_1ae4798364bf9d2baf7de59a051055282f" kindref="member">sonicatorReset</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::gpioSonicatorReset(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="46" refid="d9/d2e/class_gpio_hal_1ab37d3298282f5cba60e59b580b8d5f1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d2e/class_gpio_hal_1ab37d3298282f5cba60e59b580b8d5f1a" kindref="member">sonicatorReadOverload</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>state)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::gpioSonicatorReadOverload(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>state);<sp/>}</highlight></codeline>
<codeline lineno="47" refid="d9/d2e/class_gpio_hal_1a1d0058bccc765afffb3a86406100b083" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d2e/class_gpio_hal_1a1d0058bccc765afffb3a86406100b083" kindref="member">sonicatorReadFreqLock</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>state)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::gpioSonicatorReadFreqLock(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>state);<sp/>}</highlight></codeline>
<codeline lineno="48" refid="d9/d2e/class_gpio_hal_1a46f64cd8d60d323de47eabefe7b40d4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d2e/class_gpio_hal_1a46f64cd8d60d323de47eabefe7b40d4e" kindref="member">statusLed</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::gpioStatusLed(state);<sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HalImpl&gt;</highlight></codeline>
<codeline lineno="55" refid="db/daf/class_adc_hal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="db/daf/class_adc_hal" kindref="compound">AdcHal</ref><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="57" refid="db/daf/class_adc_hal_1a76fcb8d9943bff509c94fb7813be6dcc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/daf/class_adc_hal_1a76fcb8d9943bff509c94fb7813be6dcc" kindref="member">init</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::adcInit();<sp/>}</highlight></codeline>
<codeline lineno="58" refid="db/daf/class_adc_hal_1ae2010f52b72ee230a65c5bdaa6465b0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/daf/class_adc_hal_1ae2010f52b72ee230a65c5bdaa6465b0a" kindref="member">readChannel</ref>(uint8_t<sp/>channel,<sp/>uint16_t*<sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::adcReadChannel(channel,<sp/>value);<sp/>}</highlight></codeline>
<codeline lineno="59" refid="db/daf/class_adc_hal_1a98088769b06fb8037a99c5f410a09aca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="db/daf/class_adc_hal_1a98088769b06fb8037a99c5f410a09aca" kindref="member">rawToVoltage</ref>(uint16_t<sp/>raw)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::adcRawToVoltage(raw);<sp/>}</highlight></codeline>
<codeline lineno="60" refid="db/daf/class_adc_hal_1a7bed6fd2679c7e1d713ee3e2895719a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/daf/class_adc_hal_1a7bed6fd2679c7e1d713ee3e2895719a3" kindref="member">readSonicatorPower</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>power)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::adcReadSonicatorPower(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>power);<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HalImpl&gt;</highlight></codeline>
<codeline lineno="67" refid="d8/d40/class_pwm_hal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/d40/class_pwm_hal" kindref="compound">PwmHal</ref><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="69" refid="d8/d40/class_pwm_hal_1a02e48599f1854809ad2ce48bbdcedbf8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d8/d40/class_pwm_hal_1a02e48599f1854809ad2ce48bbdcedbf8" kindref="member">init</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::pwmInit();<sp/>}</highlight></codeline>
<codeline lineno="70" refid="d8/d40/class_pwm_hal_1a70131014a71b50d29ecb75970c40dd1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d8/d40/class_pwm_hal_1a70131014a71b50d29ecb75970c40dd1f" kindref="member">setDutyCycle</ref>(uint8_t<sp/>channel,<sp/>uint8_t<sp/>duty)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::pwmSetDutyCycle(channel,<sp/>duty);<sp/>}</highlight></codeline>
<codeline lineno="71" refid="d8/d40/class_pwm_hal_1aa0fa9fd798b9e1c7b6dd3d8e8ff75f79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d8/d40/class_pwm_hal_1aa0fa9fd798b9e1c7b6dd3d8e8ff75f79" kindref="member">setAmplitude</ref>(uint8_t<sp/>amplitude)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::pwmSetAmplitude(amplitude);<sp/>}</highlight></codeline>
<codeline lineno="72" refid="d8/d40/class_pwm_hal_1aad89f8ffbc0b184403a75d82320b7acc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d8/d40/class_pwm_hal_1aad89f8ffbc0b184403a75d82320b7acc" kindref="member">emergencyStop</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HalImpl::pwmEmergencyStop();<sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HalImpl&gt;</highlight></codeline>
<codeline lineno="79" refid="d1/d54/class_hal_template" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d54/class_hal_template" kindref="compound">HalTemplate</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d9/d2e/class_gpio_hal" kindref="compound">GpioHal</ref>&lt;HalImpl&gt;,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="db/daf/class_adc_hal" kindref="compound">AdcHal</ref>&lt;HalImpl&gt;,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d8/d40/class_pwm_hal" kindref="compound">PwmHal</ref>&lt;HalImpl&gt;<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unified<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="d1/d54/class_hal_template_1a1b7a2bc17bbb126417c3f382d9e340d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d54/class_hal_template_1a1b7a2bc17bbb126417c3f382d9e340d4" kindref="member">begin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gpio_ok<sp/>=<sp/><ref refid="d9/d2e/class_gpio_hal_1a8ebef7395cb2e0c7482ee16a0feb3512" kindref="member">GpioHal&lt;HalImpl&gt;::init</ref>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>adc_ok<sp/>=<sp/><ref refid="db/daf/class_adc_hal_1a76fcb8d9943bff509c94fb7813be6dcc" kindref="member">AdcHal&lt;HalImpl&gt;::init</ref>();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pwm_ok<sp/>=<sp/><ref refid="d8/d40/class_pwm_hal_1a02e48599f1854809ad2ce48bbdcedbf8" kindref="member">PwmHal&lt;HalImpl&gt;::init</ref>();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gpio_ok<sp/>&amp;&amp;<sp/>adc_ok<sp/>&amp;&amp;<sp/>pwm_ok;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONCRETE<sp/>IMPLEMENTATION<sp/>EXAMPLE<sp/>(ATmega32A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/d3b/class_atmega_hal" kindref="compound">AtmegaHal</ref><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GPIO<sp/>Implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="d3/d3b/class_atmega_hal_1acc7867c91075652d2fe02ad7089e1273" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1acc7867c91075652d2fe02ad7089e1273" kindref="member">gpioInit</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d31/gpio_8cpp_1a33d278bd8510192b4fdadf20fa22fe61" kindref="member">gpio_init</ref>()<sp/>==<sp/><ref refid="d6/d7c/gpio_8h_1ad485ad00e648009e6e48148732f780caa221c52bb468cb5191edcd5bd3fbd862c" kindref="member">GPIO_OK</ref>;<sp/>}</highlight></codeline>
<codeline lineno="106" refid="d3/d3b/class_atmega_hal_1acce57ae7cff865cade50de2de5e104cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1acce57ae7cff865cade50de2de5e104cf" kindref="member">gpioSetPinMode</ref>(uint8_t<sp/>pin,<sp/>uint8_t<sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d7c/gpio_8h_1a491a2cbfb4e94f2afcc0d5bdef2dc454" kindref="member">gpio_mode_t</ref><sp/>gpio_mode;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>gpio_mode<sp/>=<sp/><ref refid="d6/d7c/gpio_8h_1a491a2cbfb4e94f2afcc0d5bdef2dc454a61ddb59c5e9a9cc6d9cf99d11a36920b" kindref="member">GPIO_MODE_INPUT</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>gpio_mode<sp/>=<sp/><ref refid="d6/d7c/gpio_8h_1a491a2cbfb4e94f2afcc0d5bdef2dc454aa5824cd687ac84449b093087c25cec7c" kindref="member">GPIO_MODE_OUTPUT</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>gpio_mode<sp/>=<sp/><ref refid="d6/d7c/gpio_8h_1a491a2cbfb4e94f2afcc0d5bdef2dc454a946f5f8d0fa3b4199c28a63446095cb9" kindref="member">GPIO_MODE_INPUT_PULLUP</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d31/gpio_8cpp_1a6627ec6372faceba7b8edb638cc94580" kindref="member">gpio_set_pin_mode</ref>(pin,<sp/>gpio_mode)<sp/>==<sp/><ref refid="d6/d7c/gpio_8h_1ad485ad00e648009e6e48148732f780caa221c52bb468cb5191edcd5bd3fbd862c" kindref="member">GPIO_OK</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116" refid="d3/d3b/class_atmega_hal_1a4b98f311b471be23fc7c23e72ab6b286" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a4b98f311b471be23fc7c23e72ab6b286" kindref="member">gpioDigitalWrite</ref>(uint8_t<sp/>pin,<sp/>uint8_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d7c/gpio_8h_1a2ff5468d5ab752db6fa1fb95363392a6" kindref="member">gpio_state_t</ref><sp/>state<sp/>=<sp/>(value<sp/>==<sp/>0)<sp/>?<sp/><ref refid="d6/d7c/gpio_8h_1a2ff5468d5ab752db6fa1fb95363392a6ad41cdd897d9b8714ef45ed6e9eba0dfa" kindref="member">GPIO_LOW</ref><sp/>:<sp/><ref refid="d6/d7c/gpio_8h_1a2ff5468d5ab752db6fa1fb95363392a6ab05c5a854da4602143b6bd6096d86c4d" kindref="member">GPIO_HIGH</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d31/gpio_8cpp_1a3356861ebced78ebc885c06a9abad081" kindref="member">gpio_write_pin</ref>(pin,<sp/>state)<sp/>==<sp/><ref refid="d6/d7c/gpio_8h_1ad485ad00e648009e6e48148732f780caa221c52bb468cb5191edcd5bd3fbd862c" kindref="member">GPIO_OK</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120" refid="d3/d3b/class_atmega_hal_1af5b8f8c0dc9a1e4d8f95ebcd0b784709" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="d3/d3b/class_atmega_hal_1af5b8f8c0dc9a1e4d8f95ebcd0b784709" kindref="member">gpioDigitalRead</ref>(uint8_t<sp/>pin)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d7c/gpio_8h_1a2ff5468d5ab752db6fa1fb95363392a6" kindref="member">gpio_state_t</ref><sp/>state;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d31/gpio_8cpp_1af23d343920eacb1d974f8d9bed1c2fec" kindref="member">gpio_read_pin</ref>(pin,<sp/>&amp;state);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/><ref refid="d6/d7c/gpio_8h_1a2ff5468d5ab752db6fa1fb95363392a6ab05c5a854da4602143b6bd6096d86c4d" kindref="member">GPIO_HIGH</ref>)<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125" refid="d3/d3b/class_atmega_hal_1a63d10f63378a5ef62bbe9234c46df278" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a63d10f63378a5ef62bbe9234c46df278" kindref="member">gpioTogglePin</ref>(uint8_t<sp/>pin)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d31/gpio_8cpp_1a1044034cb78746356ec8ae1b4b33419e" kindref="member">gpio_toggle_pin</ref>(pin)<sp/>==<sp/><ref refid="d6/d7c/gpio_8h_1ad485ad00e648009e6e48148732f780caa221c52bb468cb5191edcd5bd3fbd862c" kindref="member">GPIO_OK</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128" refid="d3/d3b/class_atmega_hal_1a081390e1e4e209cf3774207a983da8f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a081390e1e4e209cf3774207a983da8f6" kindref="member">gpioSonicatorStart</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d31/gpio_8cpp_1a6697ca0fd5b0210af4d5c97e11efa3c9" kindref="member">gpio_sonicator_start</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="d6/d7c/gpio_8h_1ad485ad00e648009e6e48148732f780caa221c52bb468cb5191edcd5bd3fbd862c" kindref="member">GPIO_OK</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131" refid="d3/d3b/class_atmega_hal_1a7ace5f1c8a7248141d11b77d875e60d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a7ace5f1c8a7248141d11b77d875e60d0" kindref="member">gpioSonicatorStop</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d31/gpio_8cpp_1a33a32957b81034c07f3685b90580d482" kindref="member">gpio_sonicator_stop</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="d6/d7c/gpio_8h_1ad485ad00e648009e6e48148732f780caa221c52bb468cb5191edcd5bd3fbd862c" kindref="member">GPIO_OK</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134" refid="d3/d3b/class_atmega_hal_1ab182ff4edf29e3a200c6e68700ffbad9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1ab182ff4edf29e3a200c6e68700ffbad9" kindref="member">gpioSonicatorReset</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d31/gpio_8cpp_1a9b325245641aadf28c1c28e70fc3d355" kindref="member">gpio_sonicator_reset</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="d6/d7c/gpio_8h_1ad485ad00e648009e6e48148732f780caa221c52bb468cb5191edcd5bd3fbd862c" kindref="member">GPIO_OK</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137" refid="d3/d3b/class_atmega_hal_1a19575fab3faeb4302d098adaad0b69c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a19575fab3faeb4302d098adaad0b69c3" kindref="member">gpioSonicatorReadOverload</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d31/gpio_8cpp_1af4700a3e3d882c0cc3d14a3ba5e0c66d" kindref="member">gpio_sonicator_read_overload</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>state)<sp/>==<sp/><ref refid="d6/d7c/gpio_8h_1ad485ad00e648009e6e48148732f780caa221c52bb468cb5191edcd5bd3fbd862c" kindref="member">GPIO_OK</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140" refid="d3/d3b/class_atmega_hal_1a291b1d446e36455b269f53e0c24c9ecb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a291b1d446e36455b269f53e0c24c9ecb" kindref="member">gpioSonicatorReadFreqLock</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d31/gpio_8cpp_1af3b6ea8f9b5c77e43fa4d22fffc2c872" kindref="member">gpio_sonicator_read_freq_lock</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>state)<sp/>==<sp/><ref refid="d6/d7c/gpio_8h_1ad485ad00e648009e6e48148732f780caa221c52bb468cb5191edcd5bd3fbd862c" kindref="member">GPIO_OK</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143" refid="d3/d3b/class_atmega_hal_1af3a5a5c8140ebaef0cbbc278bc5f4337" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1af3a5a5c8140ebaef0cbbc278bc5f4337" kindref="member">gpioStatusLed</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d7c/gpio_8h_1a2ff5468d5ab752db6fa1fb95363392a6" kindref="member">gpio_state_t</ref><sp/>gpio_state<sp/>=<sp/>state<sp/>?<sp/><ref refid="d6/d7c/gpio_8h_1a2ff5468d5ab752db6fa1fb95363392a6ab05c5a854da4602143b6bd6096d86c4d" kindref="member">GPIO_HIGH</ref><sp/>:<sp/><ref refid="d6/d7c/gpio_8h_1a2ff5468d5ab752db6fa1fb95363392a6ad41cdd897d9b8714ef45ed6e9eba0dfa" kindref="member">GPIO_LOW</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d31/gpio_8cpp_1a868df198e014b5e9b2ab134a16384683" kindref="member">gpio_status_led</ref>(gpio_state)<sp/>==<sp/><ref refid="d6/d7c/gpio_8h_1ad485ad00e648009e6e48148732f780caa221c52bb468cb5191edcd5bd3fbd862c" kindref="member">GPIO_OK</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ADC<sp/>Implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="d3/d3b/class_atmega_hal_1a79f6c3a90f41a51c346380ac33f12a2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a79f6c3a90f41a51c346380ac33f12a2f" kindref="member">adcInit</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d33/adc_8cpp_1aa540e6dad1cfb7b5a1a70ac688003aee" kindref="member">adc_init</ref>()<sp/>==<sp/><ref refid="d7/d19/adc_8h_1a2e870a0e6f5efcac7b66ad2ede52ee52a58c6c49250945a68ba73bfe0428bc8b9" kindref="member">ADC_OK</ref>;<sp/>}</highlight></codeline>
<codeline lineno="150" refid="d3/d3b/class_atmega_hal_1a2b7947081abb07966e848ceb26f0bf28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a2b7947081abb07966e848ceb26f0bf28" kindref="member">adcReadChannel</ref>(uint8_t<sp/>channel,<sp/>uint16_t*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d33/adc_8cpp_1a9b6db774acc8d6f9333606ef726b2e19" kindref="member">adc_read_channel</ref>((<ref refid="d7/d19/adc_8h_1aafc4060027875f8fe46242b0656d7814" kindref="member">adc_channel_t</ref>)channel,<sp/>value)<sp/>==<sp/><ref refid="d7/d19/adc_8h_1a2e870a0e6f5efcac7b66ad2ede52ee52a58c6c49250945a68ba73bfe0428bc8b9" kindref="member">ADC_OK</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153" refid="d3/d3b/class_atmega_hal_1a55b04ed7f963978db20244fb60c1ee19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a55b04ed7f963978db20244fb60c1ee19" kindref="member">adcRawToVoltage</ref>(uint16_t<sp/>raw)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>voltage;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d33/adc_8cpp_1a9a3589be2e6a1f230b71db35c5a4aed0" kindref="member">adc_to_voltage</ref>(raw,<sp/>&amp;voltage);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>voltage;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158" refid="d3/d3b/class_atmega_hal_1ab04abe0a6242df2de3d4ad82bb3a4329" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1ab04abe0a6242df2de3d4ad82bb3a4329" kindref="member">adcReadSonicatorPower</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>power)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d19/adc_8h_1a9f0fae67bdf3bebce28e5f22dbc6c324" kindref="member">adc_read_sonicator_power</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>power)<sp/>==<sp/><ref refid="d7/d19/adc_8h_1a2e870a0e6f5efcac7b66ad2ede52ee52a58c6c49250945a68ba73bfe0428bc8b9" kindref="member">ADC_OK</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PWM<sp/>Implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="d3/d3b/class_atmega_hal_1ab21e232c0400f238affc8661e49de244" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1ab21e232c0400f238affc8661e49de244" kindref="member">pwmInit</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/d84/pwm_8cpp_1a335d3354861ef1af786744e1d00cf559" kindref="member">pwm_init</ref>()<sp/>==<sp/><ref refid="d6/db9/pwm_8h_1ae19268b163f42a214bd91ed7bf64e05fa50382d3888a143556f01a11409caf05c" kindref="member">PWM_OK</ref>;<sp/>}</highlight></codeline>
<codeline lineno="164" refid="d3/d3b/class_atmega_hal_1a6c573351a1d99882d9de401b3bdb20d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a6c573351a1d99882d9de401b3bdb20d3" kindref="member">pwmSetDutyCycle</ref>(uint8_t<sp/>channel,<sp/>uint8_t<sp/>duty)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/d84/pwm_8cpp_1a5d04f0bab99a934ca262108b3cbccea4" kindref="member">pwm_set_duty_cycle</ref>((<ref refid="d6/db9/pwm_8h_1a5113beb40c2e296de6af562228064afc" kindref="member">pwm_channel_t</ref>)channel,<sp/>duty)<sp/>==<sp/><ref refid="d6/db9/pwm_8h_1ae19268b163f42a214bd91ed7bf64e05fa50382d3888a143556f01a11409caf05c" kindref="member">PWM_OK</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167" refid="d3/d3b/class_atmega_hal_1a57dec5908103d10405f1f8949f22e892" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a57dec5908103d10405f1f8949f22e892" kindref="member">pwmSetAmplitude</ref>(uint8_t<sp/>amplitude)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/d84/pwm_8cpp_1abac8d7cfdc720fa135fae195ca9fe0a5" kindref="member">pwm_set_amplitude</ref>(amplitude)<sp/>==<sp/><ref refid="d6/db9/pwm_8h_1ae19268b163f42a214bd91ed7bf64e05fa50382d3888a143556f01a11409caf05c" kindref="member">PWM_OK</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170" refid="d3/d3b/class_atmega_hal_1a2a1dc6db939ed4c07e01767537aef9b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/class_atmega_hal_1a2a1dc6db939ed4c07e01767537aef9b9" kindref="member">pwmEmergencyStop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/d84/pwm_8cpp_1a193a9d45b4c3b39c0bdf3f071909d3f3" kindref="member">pwm_emergency_stop</ref>()<sp/>==<sp/><ref refid="d6/db9/pwm_8h_1ae19268b163f42a214bd91ed7bf64e05fa50382d3888a143556f01a11409caf05c" kindref="member">PWM_OK</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal">};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MOCK<sp/>IMPLEMENTATION<sp/>EXAMPLE<sp/>(for<sp/>testing)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="d2/d0d/class_mock_hal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d2/d0d/class_mock_hal" kindref="compound">MockHal</ref><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mock_gpio_initialized;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mock_adc_initialized;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mock_pwm_initialized;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>mock_pin_states[32];<sp/></highlight><highlight class="comment">//<sp/>Mock<sp/>pin<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GPIO<sp/>Mock<sp/>Implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="d2/d0d/class_mock_hal_1a78ae34eec4fe43bbde6726250a687de3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1a78ae34eec4fe43bbde6726250a687de3" kindref="member">gpioInit</ref>()<sp/>{<sp/>mock_gpio_initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="192" refid="d2/d0d/class_mock_hal_1a0239f12123835113d15c00fdf79c43e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1a0239f12123835113d15c00fdf79c43e7" kindref="member">gpioSetPinMode</ref>(uint8_t<sp/>pin,<sp/>uint8_t<sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mock_gpio_initialized)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mock<sp/>implementation<sp/>-<sp/>just<sp/>record<sp/>the<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197" refid="d2/d0d/class_mock_hal_1a0b1a8a781257caa68acf226154182d05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1a0b1a8a781257caa68acf226154182d05" kindref="member">gpioDigitalWrite</ref>(uint8_t<sp/>pin,<sp/>uint8_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mock_gpio_initialized)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mock_pin_states[pin]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202" refid="d2/d0d/class_mock_hal_1ae5f5c033d5956b817987286edacf5f79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="d2/d0d/class_mock_hal_1ae5f5c033d5956b817987286edacf5f79" kindref="member">gpioDigitalRead</ref>(uint8_t<sp/>pin)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mock_gpio_initialized)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mock_pin_states[pin];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206" refid="d2/d0d/class_mock_hal_1a18c43402e24956fed88656082a0fedd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1a18c43402e24956fed88656082a0fedd9" kindref="member">gpioTogglePin</ref>(uint8_t<sp/>pin)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mock_gpio_initialized)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mock_pin_states[pin]<sp/>=<sp/>!mock_pin_states[pin];</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mock<sp/>implementations<sp/>for<sp/>other<sp/>functions<sp/>(simplified)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="d2/d0d/class_mock_hal_1a44f1c18fca396af55bec3c315b9c009c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1a44f1c18fca396af55bec3c315b9c009c" kindref="member">gpioSonicatorStart</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mock_gpio_initialized;<sp/>}</highlight></codeline>
<codeline lineno="214" refid="d2/d0d/class_mock_hal_1ae4b02fdf0b8e1c4d2cfa9c0adebb1045" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1ae4b02fdf0b8e1c4d2cfa9c0adebb1045" kindref="member">gpioSonicatorStop</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mock_gpio_initialized;<sp/>}</highlight></codeline>
<codeline lineno="215" refid="d2/d0d/class_mock_hal_1acf7099fa13bb352f4e9e3461bc355ed3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1acf7099fa13bb352f4e9e3461bc355ed3" kindref="member">gpioSonicatorReset</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mock_gpio_initialized;<sp/>}</highlight></codeline>
<codeline lineno="216" refid="d2/d0d/class_mock_hal_1acceb7f6aca6366ad3dd623ac6e2f5013" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1acceb7f6aca6366ad3dd623ac6e2f5013" kindref="member">gpioSonicatorReadOverload</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mock_gpio_initialized)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*state<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Mock:<sp/>no<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221" refid="d2/d0d/class_mock_hal_1af095b6ca872fda8d39a60b5bae1e70e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1af095b6ca872fda8d39a60b5bae1e70e5" kindref="member">gpioSonicatorReadFreqLock</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mock_gpio_initialized)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*state<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Mock:<sp/>frequency<sp/>locked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226" refid="d2/d0d/class_mock_hal_1a9dc0a813cf7fd5e56afedf3c118320ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1a9dc0a813cf7fd5e56afedf3c118320ca" kindref="member">gpioStatusLed</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mock_gpio_initialized;<sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ADC<sp/>Mock<sp/>Implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="d2/d0d/class_mock_hal_1aee05dab2558b220a9886934730a605fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1aee05dab2558b220a9886934730a605fb" kindref="member">adcInit</ref>()<sp/>{<sp/>mock_adc_initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="230" refid="d2/d0d/class_mock_hal_1a4dbebac56f72dc31d2763527e5a49bbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1a4dbebac56f72dc31d2763527e5a49bbb" kindref="member">adcReadChannel</ref>(uint8_t<sp/>channel,<sp/>uint16_t*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mock_adc_initialized)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>512;<sp/></highlight><highlight class="comment">//<sp/>Mock:<sp/>mid-scale<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235" refid="d2/d0d/class_mock_hal_1ae4f8a8718a5e93b170521cbc70ad834a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1ae4f8a8718a5e93b170521cbc70ad834a" kindref="member">adcRawToVoltage</ref>(uint16_t<sp/>raw)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(raw<sp/>*<sp/>5.0f)<sp/>/<sp/>1023.0f;<sp/>}</highlight></codeline>
<codeline lineno="236" refid="d2/d0d/class_mock_hal_1affa021fd5c0058d8e7467821900ff8d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1affa021fd5c0058d8e7467821900ff8d9" kindref="member">adcReadSonicatorPower</ref>(uint8_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>power)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mock_adc_initialized)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*power<sp/>=<sp/>500.0f;<sp/></highlight><highlight class="comment">//<sp/>Mock:<sp/>500W</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PWM<sp/>Mock<sp/>Implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="d2/d0d/class_mock_hal_1a025d4d4b158e5c11cdd8c3e98ccd7820" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1a025d4d4b158e5c11cdd8c3e98ccd7820" kindref="member">pwmInit</ref>()<sp/>{<sp/>mock_pwm_initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="244" refid="d2/d0d/class_mock_hal_1acd554e15bceff498fa134bae804aa2c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1acd554e15bceff498fa134bae804aa2c2" kindref="member">pwmSetDutyCycle</ref>(uint8_t<sp/>channel,<sp/>uint8_t<sp/>duty)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mock_pwm_initialized;<sp/>}</highlight></codeline>
<codeline lineno="245" refid="d2/d0d/class_mock_hal_1a935b2b5faee9d2b36df4e7c57b6bac1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1a935b2b5faee9d2b36df4e7c57b6bac1e" kindref="member">pwmSetAmplitude</ref>(uint8_t<sp/>amplitude)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mock_pwm_initialized;<sp/>}</highlight></codeline>
<codeline lineno="246" refid="d2/d0d/class_mock_hal_1a1c5aadc38e3e6ff0b1e7b727f9aba6e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/d0d/class_mock_hal_1a1c5aadc38e3e6ff0b1e7b727f9aba6e7" kindref="member">pwmEmergencyStop</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mock_pwm_initialized;<sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal">};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>member<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MockHal::mock_gpio_initialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MockHal::mock_adc_initialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MockHal::mock_pwm_initialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">uint8_t<sp/>MockHal::mock_pin_states[32]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>USAGE<sp/>EXAMPLES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="da/dd9/hal__template__example_8h_1a4e18e60b01d7a0255195b6f3f81f6ae2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/dd9/hal__template__example_8h_1a4e18e60b01d7a0255195b6f3f81f6ae2" kindref="member">productionExample</ref>()<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>ATmega32A<sp/>HAL<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">MyHal<sp/>=<sp/><ref refid="d1/d54/class_hal_template" kindref="compound">HalTemplate&lt;AtmegaHal&gt;</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>MyHal<sp/>hal;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>all<sp/>peripherals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>hal.<ref refid="d1/d54/class_hal_template_1a1b7a2bc17bbb126417c3f382d9e340d4" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>GPIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>hal.digitalWrite(13,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Direct<sp/>call,<sp/>zero<sp/>overhead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>state<sp/>=<sp/>hal.digitalRead(12);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>ADC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>adc_value;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>hal.readChannel(0,<sp/>&amp;adc_value);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>voltage<sp/>=<sp/>hal.rawToVoltage(adc_value);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>hal.setAmplitude(75);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="da/dd9/hal__template__example_8h_1ad1bd2d596ba706727e0df1cb9991d87d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/dd9/hal__template__example_8h_1ad1bd2d596ba706727e0df1cb9991d87d" kindref="member">testingExample</ref>()<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>Mock<sp/>HAL<sp/>implementation<sp/>for<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="d6/d7c/gpio_8h_1a8f54280a14948a2021c912ac21177e6a" kindref="member">TestHal</ref><sp/>=<sp/><ref refid="d1/d54/class_hal_template" kindref="compound">HalTemplate&lt;MockHal&gt;</ref>;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d6/d7c/gpio_8h_1a8f54280a14948a2021c912ac21177e6a" kindref="member">TestHal</ref><sp/>hal;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>mock<sp/>peripherals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>hal.<ref refid="d1/d54/class_hal_template_1a1b7a2bc17bbb126417c3f382d9e340d4" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>GPIO<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>hal.<ref refid="d9/d2e/class_gpio_hal_1aeb35f4b7481fbce73967fdd512139bca" kindref="member">digitalWrite</ref>(13,<sp/>1);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>state<sp/>=<sp/>hal.<ref refid="d9/d2e/class_gpio_hal_1aa672e7d9f4bb045c5a4f1144dd7a28e7" kindref="member">digitalRead</ref>(13);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(state<sp/>==<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Mock<sp/>returns<sp/>what<sp/>we<sp/>wrote</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ADC<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>adc_value;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>hal.<ref refid="db/daf/class_adc_hal_1ae2010f52b72ee230a65c5bdaa6465b0a" kindref="member">readChannel</ref>(0,<sp/>&amp;adc_value);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(adc_value<sp/>==<sp/>512);<sp/><sp/></highlight><highlight class="comment">//<sp/>Mock<sp/>returns<sp/>known<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="da/dd9/hal__template__example_8h_1a7ba8bf638f85b06584a5543ce0d02752" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/dd9/hal__template__example_8h_1a7ba8bf638f85b06584a5543ce0d02752" kindref="member">componentExample</ref>()<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>just<sp/>GPIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d2e/class_gpio_hal" kindref="compound">GpioHal&lt;AtmegaHal&gt;</ref><sp/>gpio;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio.<ref refid="d9/d2e/class_gpio_hal_1a8ebef7395cb2e0c7482ee16a0feb3512" kindref="member">init</ref>();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio.<ref refid="d9/d2e/class_gpio_hal_1aeb35f4b7481fbce73967fdd512139bca" kindref="member">digitalWrite</ref>(13,<sp/>1);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>just<sp/>ADC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/daf/class_adc_hal" kindref="compound">AdcHal&lt;MockHal&gt;</ref><sp/>adc;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>adc.<ref refid="db/daf/class_adc_hal_1a76fcb8d9943bff509c94fb7813be6dcc" kindref="member">init</ref>();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>value;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>adc.<ref refid="db/daf/class_adc_hal_1ae2010f52b72ee230a65c5bdaa6465b0a" kindref="member">readChannel</ref>(0,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>HAL_TEMPLATE_EXAMPLE_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/modules/hal/hal_template_example.h"/>
  </compounddef>
</doxygen>
