<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="d5/dea/sonicator__modbus__bridge_8cpp" kind="file" language="C++">
    <compoundname>sonicator_modbus_bridge.cpp</compoundname>
    <includes refid="dd/df5/modbus__register__manager_8h" local="yes">modules/communication/modbus_register_manager.h</includes>
    <includes refid="d4/d9a/modbus__registers_8h" local="yes">modules/communication/modbus_registers.h</includes>
    <includes refid="dc/d4d/sonicator__modbus__bridge_8h" local="yes">sonicator_modbus_bridge.h</includes>
    <includes refid="de/d13/sonicator__control_8h" local="yes">sonicator_control.h</includes>
    <includes refid="d6/d4f/register__map_8h" local="yes">register_map.h</includes>
    <includes local="no">Arduino.h</includes>
    <incdepgraph>
      <node id="14">
        <label>register_map.h</label>
        <link refid="d6/d4f/register__map_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sonicator_control.h</label>
        <link refid="de/d13/sonicator__control_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>sonicator_modbus_bridge.h</label>
        <link refid="dc/d4d/sonicator__modbus__bridge_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>modules/communication/modbus_register_manager.h</label>
        <link refid="dd/df5/modbus__register__manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>modbus_registers.h</label>
        <link refid="d4/d9a/modbus__registers_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/modules/control/sonicator_modbus_bridge.cpp</label>
        <link refid="d5/dea/sonicator__modbus__bridge_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>adc.h</label>
        <link refid="d7/d19/adc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>gpio.h</label>
        <link refid="d6/d7c/gpio_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>modules/hal/hal.h</label>
        <link refid="d8/d4b/hal_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>pwm.h</label>
        <link refid="d6/db9/pwm_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>timer.h</label>
        <link refid="d5/dd0/timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>uart.h</label>
        <link refid="d2/d86/uart_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Arduino.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="d5/dea/sonicator__modbus__bridge_8cpp_1adbaed721f5e0da2cd2db79ff6c405da3" prot="public" static="no">
        <name>SONICATOR_4_ID</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/control/sonicator_modbus_bridge.cpp" line="38" column="9" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/dea/sonicator__modbus__bridge_8cpp_1a6bcc2c7e65618cc2e5a63fc73fa61285" prot="public" static="no">
        <name>MODBUS_RESPONSE_TIME_TARGET_MS</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/control/sonicator_modbus_bridge.cpp" line="39" column="9" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="d5/dea/sonicator__modbus__bridge_8cpp_1a3fae530b3d1a20d1edf7ce4de6b98788" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t last_register_update</definition>
        <argsstring></argsstring>
        <name>last_register_update</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/control/sonicator_modbus_bridge.cpp" line="45" column="17" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/dea/sonicator__modbus__bridge_8cpp_1a49036f90399dec4d9d76399b5a905bcc" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t last_control_update</definition>
        <argsstring></argsstring>
        <name>last_control_update</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/control/sonicator_modbus_bridge.cpp" line="46" column="17" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="46" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="d5/dea/sonicator__modbus__bridge_8cpp_1a9a35036b646658cc9003bc643e95d617" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t build_status_flags</definition>
        <argsstring>(const sonicator_state_control_t *status)</argsstring>
        <name>build_status_flags</name>
        <param>
          <type>const <ref refid="df/d70/structsonicator__state__control__t" kindref="compound">sonicator_state_control_t</ref> *</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Convert sonicator status to MODBUS status flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Sonicator status structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MODBUS status flags (bit-mapped) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/control/sonicator_modbus_bridge.cpp" line="57" column="17" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="57" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="d5/dea/sonicator__modbus__bridge_8cpp_1a9045fab5a69e2236ecfaa2b4acba43bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void update_modbus_registers_from_sonicator</definition>
        <argsstring>(void)</argsstring>
        <name>update_modbus_registers_from_sonicator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update MODBUS registers from sonicator status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/control/sonicator_modbus_bridge.cpp" line="88" column="13" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="88" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="d5/dea/sonicator__modbus__bridge_8cpp_1ad4d1ebf594c2087ad59dbbbcf9f5a479" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool update_sonicator_from_modbus_registers</definition>
        <argsstring>(void)</argsstring>
        <name>update_sonicator_from_modbus_registers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update sonicator control from MODBUS registers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if any control action was taken </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/control/sonicator_modbus_bridge.cpp" line="113" column="13" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="113" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="d5/dea/sonicator__modbus__bridge_8cpp_1a025ee107dd733f26d18247c93a57fe9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_modbus_bridge_init</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_modbus_bridge_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize sonicator MODBUS bridge. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true on success, false on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/control/sonicator_modbus_bridge.cpp" line="177" column="6" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="177" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="d5/dea/sonicator__modbus__bridge_8cpp_1a21eb64fd76d39367ac8ead8fd7141350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_modbus_bridge_update</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_modbus_bridge_update</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update sonicator-MODBUS bridge (call from main loop) </para>
        </briefdescription>
        <detaileddescription>
<para>Handles bidirectional communication between sonicator control and MODBUS registers. Must be called regularly to maintain &lt;100ms response time requirement.</para>
<para><simplesect kind="return"><para>true if any control action was taken </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/control/sonicator_modbus_bridge.cpp" line="209" column="6" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="209" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="d5/dea/sonicator__modbus__bridge_8cpp_1a25d0d4028ca77add08f24d50d2a6978e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sonicator_modbus_bridge_get_status</definition>
        <argsstring>(uint32_t *last_register_update_time, uint32_t *last_control_update_time, uint32_t *response_time_ms)</argsstring>
        <name>sonicator_modbus_bridge_get_status</name>
        <param>
          <type>uint32_t *</type>
          <declname>last_register_update_time</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>last_control_update_time</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>response_time_ms</declname>
        </param>
        <briefdescription>
<para>Get bridge status and timing information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>last_register_update_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store last register update time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last_control_update_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store last control update time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>response_time_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store last response time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/control/sonicator_modbus_bridge.cpp" line="234" column="6" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="234" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="d5/dea/sonicator__modbus__bridge_8cpp_1a219a7d60c31b3c06b103ddefa1c86c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_modbus_bridge_is_responsive</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_modbus_bridge_is_responsive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if bridge is meeting response time requirements. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if response time &lt;100ms, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/control/sonicator_modbus_bridge.cpp" line="256" column="6" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="256" bodyend="261"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Bridge between sonicator control and MODBUS registers for Story 1.4. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Cannasol Technologies </para>
</simplesect>
<simplesect kind="date"><para>2025-09-12 </para>
</simplesect>
<simplesect kind="version"><para>1.0.0</para>
</simplesect>
Provides the bridge between sonicator control functions and MODBUS register management. Handles register read/write operations and translates between MODBUS register format and sonicator control API. <blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para>Implements the MODBUS register integration for Sonicator 4 (zero-based ID 3): </para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote><itemizedlist>
<listitem><para>0x0160: Start/Stop control (RW)</para>
</listitem><listitem><para>0x0161: Amplitude setpoint (RW, 20-100%) <linebreak/>
</para>
</listitem><listitem><para>0x0162: Overload reset (RW, write-and-clear)</para>
</listitem><listitem><para>0x0170: Power output (R, watts)</para>
</listitem><listitem><para>0x0171: Frequency (R, Hz)</para>
</listitem><listitem><para>0x0172: Status flags (R, bit-mapped)</para>
</listitem><listitem><para>0x0173: Actual amplitude (R, %) <blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><simplesect kind="note"><para>&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; </para>
</simplesect>
</para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</blockquote></para>
</listitem><listitem><para>Sonicator 4 is zero-based ID 3 in the register map</para>
</listitem><listitem><para>MODBUS response time target is 100ms per Story 1.4 </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dd/df5/modbus__register__manager_8h" kindref="compound">modules/communication/modbus_register_manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d9a/modbus__registers_8h" kindref="compound">modules/communication/modbus_registers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dc/d4d/sonicator__modbus__bridge_8h" kindref="compound">sonicator_modbus_bridge.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/d13/sonicator__control_8h" kindref="compound">sonicator_control.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d6/d4f/register__map_8h" kindref="compound">register_map.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONSTANTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SONICATOR_4_ID<sp/>3<sp/><sp/></highlight><highlight class="comment">//<sp/>Zero-based<sp/>sonicator<sp/>ID<sp/>for<sp/>register<sp/>indexing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MODBUS_RESPONSE_TIME_TARGET_MS<sp/>100<sp/><sp/></highlight><highlight class="comment">//<sp/>Target<sp/>response<sp/>time<sp/>per<sp/>Story<sp/>1.4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PRIVATE<sp/>VARIABLES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a3fae530b3d1a20d1edf7ce4de6b98788" kindref="member">last_register_update</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a49036f90399dec4d9d76399b5a905bcc" kindref="member">last_control_update</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PRIVATE<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a9a35036b646658cc9003bc643e95d617" kindref="member">build_status_flags</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t" kindref="compound">sonicator_state_control_t</ref>*<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1a0d5c51ab2346e7db197ae25fc7260907" kindref="member">is_running</ref>)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>|=<sp/><ref refid="d4/d9a/modbus__registers_8h_1aee1bf5e1be326c7918d8c78d21020a0e" kindref="member">SON_STATUS_RUNNING</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1a97a7e3df02d7732869f5bd7ce6bbe263" kindref="member">overload_active</ref>)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>|=<sp/><ref refid="d4/d9a/modbus__registers_8h_1a1c51c18601c9c7713fccf9f5739ff584" kindref="member">SON_STATUS_OVERLOAD</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1a3995a54ccc06cc04d3279b6cba29caae" kindref="member">frequency_locked</ref>)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>|=<sp/><ref refid="d4/d9a/modbus__registers_8h_1a31bc5afc0053e70eba740bac819e7c06" kindref="member">SON_STATUS_FREQ_LOCK</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1aea26e6db5046274c9b121183c4d1abd8" kindref="member">active_faults</ref><sp/>!=<sp/><ref refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a45f67c744f0a84ef961991bbbcee8cb7" kindref="member">SONICATOR_FAULT_NONE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>|=<sp/><ref refid="d4/d9a/modbus__registers_8h_1a3f73c0cef3963e662bff7bc8c95bc7e6" kindref="member">SON_STATUS_FAULT</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>communication<sp/>fault<sp/>based<sp/>on<sp/>last<sp/>update<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(now<sp/>-<sp/>status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1aa7007812c1aa0b399b4e7624727b5e0d" kindref="member">last_update_time</ref><sp/>&gt;<sp/><ref refid="de/d13/sonicator__control_8h_1a3a8bcea46ab85058d6fd1ad4c3c32ad4" kindref="member">SONICATOR_COMM_TIMEOUT_MS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>|=<sp/><ref refid="d4/d9a/modbus__registers_8h_1a0e393d4bdce51b9d1aa115a4b9f58910" kindref="member">SON_STATUS_COMM_FAULT</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a9045fab5a69e2236ecfaa2b4acba43bc" kindref="member">update_modbus_registers_from_sonicator</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t" kindref="compound">sonicator_state_control_t</ref>*<sp/>status<sp/>=<sp/><ref refid="d2/db9/sonicator_8cpp_1a1ecfcd93a4b2bd32c9cab9f359b831ba" kindref="member">sonicator_get_status</ref>();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>status<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>status_flags<sp/>=<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a9a35036b646658cc9003bc643e95d617" kindref="member">build_status_flags</ref>(status);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>sonicator<sp/>status<sp/>registers<sp/>via<sp/>register<sp/>manager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d0f/modbus__register__manager_8cpp_1a0a9d7d9107de9f0576725cdbeceb21ec" kindref="member">register_manager_update_sonicator_status</ref>(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1adbaed721f5e0da2cd2db79ff6c405da3" kindref="member">SONICATOR_4_ID</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sonicator<sp/>ID<sp/>(zero-based)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint16_t)status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1abcaae5e9e93498e549afd71298e9096b" kindref="member">power_watts</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Power<sp/>in<sp/>watts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1a3021ec989df15e775e6cd13891369875" kindref="member">frequency_hz</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Frequency<sp/>in<sp/>Hz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1afcd4300c11230d9f9b052e12e3f2e112" kindref="member">amplitude_percent</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Actual<sp/>amplitude<sp/>%<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Status<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a3fae530b3d1a20d1edf7ce4de6b98788" kindref="member">last_register_update</ref><sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1ad4d1ebf594c2087ad59dbbbcf9f5a479" kindref="member">update_sonicator_from_modbus_registers</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>current<sp/>register<sp/>values<sp/>for<sp/>Sonicator<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>start_stop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>amplitude_sp<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d0f/modbus__register__manager_8cpp_1a709b2e60133ad61693f7320436aee775" kindref="member">register_manager_get_sonicator_control</ref>(<ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1adbaed721f5e0da2cd2db79ff6c405da3" kindref="member">SONICATOR_4_ID</ref>,<sp/>&amp;start_stop,<sp/>&amp;amplitude_sp))<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>action_taken<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>start/stop<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t" kindref="compound">sonicator_state_control_t</ref>*<sp/>status<sp/>=<sp/><ref refid="d2/db9/sonicator_8cpp_1a1ecfcd93a4b2bd32c9cab9f359b831ba" kindref="member">sonicator_get_status</ref>();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_stop<sp/>&amp;&amp;<sp/>!status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1a0d5c51ab2346e7db197ae25fc7260907" kindref="member">is_running</ref><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1a6cd8bcb50e1b5c930526cb95e0a268ce" kindref="member">state</ref><sp/>==<sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a8aaaacd92fec828be10c02ef2696f0b7" kindref="member">SONICATOR_STATE_IDLE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/db9/sonicator_8cpp_1aab49fb783e216647f53db17fbb6b62b1" kindref="member">sonicator_start</ref>())<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action_taken<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>command<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!start_stop<sp/>&amp;&amp;<sp/>(status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1a0d5c51ab2346e7db197ae25fc7260907" kindref="member">is_running</ref><sp/>||<sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1a6cd8bcb50e1b5c930526cb95e0a268ce" kindref="member">state</ref><sp/>==<sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315aefd4187011c854e789baa073995f0def" kindref="member">SONICATOR_STATE_RUNNING</ref><sp/>||</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;<ref refid="df/d70/structsonicator__state__control__t_1a6cd8bcb50e1b5c930526cb95e0a268ce" kindref="member">state</ref><sp/>==<sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a34a68840cf8e7502193a12370a443e01" kindref="member">SONICATOR_STATE_STARTING</ref>))<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/db9/sonicator_8cpp_1a4c28efedf324a8f71669e203de81ca47" kindref="member">sonicator_stop</ref>())<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action_taken<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>amplitude<sp/>setpoint<sp/>(clamp<sp/>to<sp/>valid<sp/>range)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amplitude_sp<sp/>&gt;=<sp/>20<sp/>&amp;&amp;<sp/>amplitude_sp<sp/>&lt;=<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/db9/sonicator_8cpp_1ad48d366d35d3f9fc640589b2b5623aa2" kindref="member">sonicator_set_amplitude</ref>((uint8_t)amplitude_sp))<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action_taken<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>overload<sp/>reset<sp/>(write-and-clear<sp/>command)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reset_requested<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="db/d0f/modbus__register__manager_8cpp_1a450e4689797a876f706e6e3c8de80534" kindref="member">register_manager_consume_overload_reset</ref>(<ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1adbaed721f5e0da2cd2db79ff6c405da3" kindref="member">SONICATOR_4_ID</ref>,<sp/>&amp;reset_requested))<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reset_requested)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/db9/sonicator_8cpp_1a21c76fda64cb8f4ddaf2f55f3567ec5e" kindref="member">sonicator_reset_overload</ref>())<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action_taken<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action_taken)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a49036f90399dec4d9d76399b5a905bcc" kindref="member">last_control_update</ref><sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>action_taken;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PUBLIC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a025ee107dd733f26d18247c93a57fe9b" kindref="member">sonicator_modbus_bridge_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>timestamps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a3fae530b3d1a20d1edf7ce4de6b98788" kindref="member">last_register_update</ref><sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a49036f90399dec4d9d76399b5a905bcc" kindref="member">last_control_update</ref><sp/>=<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a3fae530b3d1a20d1edf7ce4de6b98788" kindref="member">last_register_update</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>initial<sp/>default<sp/>values<sp/>in<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d1a/structmodbus__register__map__t" kindref="compound">modbus_register_map_t</ref>*<sp/>map<sp/>=<sp/><ref refid="db/d0f/modbus__register__manager_8cpp_1ab07eb4458680115587cf910a7532e6d3" kindref="member">register_manager_get_map</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>safe<sp/>defaults<sp/>for<sp/>Sonicator<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map-&gt;<ref refid="d5/d1a/structmodbus__register__map__t_1ac196ee6c9822e58150632a4a910f9e28" kindref="member">sonicators</ref>[<ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1adbaed721f5e0da2cd2db79ff6c405da3" kindref="member">SONICATOR_4_ID</ref>].<ref refid="d4/d97/structsonicator__registers__t_1a3e0e2424d50debfad86a72d557dbdd6a" kindref="member">start_stop</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stopped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map-&gt;<ref refid="d5/d1a/structmodbus__register__map__t_1ac196ee6c9822e58150632a4a910f9e28" kindref="member">sonicators</ref>[<ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1adbaed721f5e0da2cd2db79ff6c405da3" kindref="member">SONICATOR_4_ID</ref>].<ref refid="d4/d97/structsonicator__registers__t_1a93efadf71cb1059be8f8b2927bc04f67" kindref="member">amplitude_setpoint</ref><sp/>=<sp/>50;<sp/></highlight><highlight class="comment">//<sp/>50%<sp/>amplitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map-&gt;<ref refid="d5/d1a/structmodbus__register__map__t_1ac196ee6c9822e58150632a4a910f9e28" kindref="member">sonicators</ref>[<ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1adbaed721f5e0da2cd2db79ff6c405da3" kindref="member">SONICATOR_4_ID</ref>].<ref refid="d4/d97/structsonicator__registers__t_1a1272f5c84e823d8a0fc64ee6ead65f45" kindref="member">overload_reset</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>status<sp/>registers<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map-&gt;<ref refid="d5/d1a/structmodbus__register__map__t_1ac196ee6c9822e58150632a4a910f9e28" kindref="member">sonicators</ref>[<ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1adbaed721f5e0da2cd2db79ff6c405da3" kindref="member">SONICATOR_4_ID</ref>].<ref refid="d4/d97/structsonicator__registers__t_1a147a2fb453612d64ac43d310f93474db" kindref="member">power_watts</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map-&gt;<ref refid="d5/d1a/structmodbus__register__map__t_1ac196ee6c9822e58150632a4a910f9e28" kindref="member">sonicators</ref>[<ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1adbaed721f5e0da2cd2db79ff6c405da3" kindref="member">SONICATOR_4_ID</ref>].<ref refid="d4/d97/structsonicator__registers__t_1aea500acd0c3fd52141f5ba8c03ee9c7f" kindref="member">frequency_hz</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map-&gt;<ref refid="d5/d1a/structmodbus__register__map__t_1ac196ee6c9822e58150632a4a910f9e28" kindref="member">sonicators</ref>[<ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1adbaed721f5e0da2cd2db79ff6c405da3" kindref="member">SONICATOR_4_ID</ref>].<ref refid="d4/d97/structsonicator__registers__t_1a508b8326b9499f811ac08dbcc91771a4" kindref="member">status_flags</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map-&gt;<ref refid="d5/d1a/structmodbus__register__map__t_1ac196ee6c9822e58150632a4a910f9e28" kindref="member">sonicators</ref>[<ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1adbaed721f5e0da2cd2db79ff6c405da3" kindref="member">SONICATOR_4_ID</ref>].<ref refid="d4/d97/structsonicator__registers__t_1a87e1602268c284fc3f6a06def9c67e01" kindref="member">amplitude_actual</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a21eb64fd76d39367ac8ead8fd7141350" kindref="member">sonicator_modbus_bridge_update</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>action_taken<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>sonicator<sp/>control<sp/>from<sp/>MODBUS<sp/>registers<sp/>(higher<sp/>priority)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>every<sp/>loop<sp/>iteration<sp/>for<sp/>responsive<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1ad4d1ebf594c2087ad59dbbbcf9f5a479" kindref="member">update_sonicator_from_modbus_registers</ref>())<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action_taken<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>MODBUS<sp/>registers<sp/>from<sp/>sonicator<sp/>status<sp/>(lower<sp/>frequency)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>at<sp/>10Hz<sp/>to<sp/>avoid<sp/>overwhelming<sp/>the<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(now<sp/>-<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a3fae530b3d1a20d1edf7ce4de6b98788" kindref="member">last_register_update</ref><sp/>&gt;=<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a9045fab5a69e2236ecfaa2b4acba43bc" kindref="member">update_modbus_registers_from_sonicator</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>action_taken;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a25d0d4028ca77add08f24d50d2a6978e" kindref="member">sonicator_modbus_bridge_get_status</ref>(uint32_t*<sp/>last_register_update_time,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t*<sp/>last_control_update_time,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t*<sp/>response_time_ms)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_register_update_time)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*last_register_update_time<sp/>=<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a3fae530b3d1a20d1edf7ce4de6b98788" kindref="member">last_register_update</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_control_update_time)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*last_control_update_time<sp/>=<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a49036f90399dec4d9d76399b5a905bcc" kindref="member">last_control_update</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(response_time_ms)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*response_time_ms<sp/>=<sp/>(now<sp/>&gt;<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a49036f90399dec4d9d76399b5a905bcc" kindref="member">last_control_update</ref>)<sp/>?<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(now<sp/>-<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a49036f90399dec4d9d76399b5a905bcc" kindref="member">last_control_update</ref>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a219a7d60c31b3c06b103ddefa1c86c9a" kindref="member">sonicator_modbus_bridge_is_responsive</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>response_time<sp/>=<sp/>(now<sp/>&gt;<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a49036f90399dec4d9d76399b5a905bcc" kindref="member">last_control_update</ref>)<sp/>?<sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(now<sp/>-<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a49036f90399dec4d9d76399b5a905bcc" kindref="member">last_control_update</ref>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(response_time<sp/>&lt;<sp/><ref refid="d5/dea/sonicator__modbus__bridge_8cpp_1a6bcc2c7e65618cc2e5a63fc73fa61285" kindref="member">MODBUS_RESPONSE_TIME_TARGET_MS</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/modules/control/sonicator_modbus_bridge.cpp"/>
  </compounddef>
</doxygen>
