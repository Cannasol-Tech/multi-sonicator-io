<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="dc/d4d/sonicator__modbus__bridge_8h" kind="file" language="C++">
    <compoundname>sonicator_modbus_bridge.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includedby refid="df/d0a/main_8cpp" local="yes">src/main.cpp</includedby>
    <includedby refid="d5/dea/sonicator__modbus__bridge_8cpp" local="yes">src/modules/control/sonicator_modbus_bridge.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/sonicator_modbus_bridge.h</label>
        <link refid="dc/d4d/sonicator__modbus__bridge_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/sonicator_modbus_bridge.h</label>
        <link refid="dc/d4d/sonicator__modbus__bridge_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/main.cpp</label>
        <link refid="df/d0a/main_8cpp"/>
      </node>
      <node id="3">
        <label>src/modules/control/sonicator_modbus_bridge.cpp</label>
        <link refid="d5/dea/sonicator__modbus__bridge_8cpp"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="dc/d4d/sonicator__modbus__bridge_8h_1a025ee107dd733f26d18247c93a57fe9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_modbus_bridge_init</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_modbus_bridge_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize sonicator MODBUS bridge. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets up the bridge between sonicator control functions and MODBUS register management. Must be called after both sonicator control and MODBUS systems are initialized.</para>
<para><simplesect kind="return"><para>true on success, false on failure</para>
</simplesect>
<simplesect kind="return"><para>true on success, false on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_modbus_bridge.h" line="40" column="6" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="177" bodyend="198" declfile="include/sonicator_modbus_bridge.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/sonicator__modbus__bridge_8h_1a21eb64fd76d39367ac8ead8fd7141350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_modbus_bridge_update</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_modbus_bridge_update</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update sonicator-MODBUS bridge (call from main loop) </para>
        </briefdescription>
        <detaileddescription>
<para>Handles bidirectional communication between sonicator control and MODBUS registers. Must be called regularly to maintain &lt;100ms response time requirement.</para>
<para>This function:<itemizedlist>
<listitem><para>Reads MODBUS control registers and executes sonicator commands</para>
</listitem><listitem><para>Updates MODBUS status registers with current sonicator state</para>
</listitem><listitem><para>Maintains response time tracking for compliance monitoring</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="return"><para>true if any control action was taken, false otherwise</para>
</simplesect>
Handles bidirectional communication between sonicator control and MODBUS registers. Must be called regularly to maintain &lt;100ms response time requirement.</para>
<para><simplesect kind="return"><para>true if any control action was taken </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_modbus_bridge.h" line="56" column="6" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="209" bodyend="226" declfile="include/sonicator_modbus_bridge.h" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/sonicator__modbus__bridge_8h_1a25d0d4028ca77add08f24d50d2a6978e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sonicator_modbus_bridge_get_status</definition>
        <argsstring>(uint32_t *last_register_update_time, uint32_t *last_control_update_time, uint32_t *response_time_ms)</argsstring>
        <name>sonicator_modbus_bridge_get_status</name>
        <param>
          <type>uint32_t *</type>
          <declname>last_register_update_time</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>last_control_update_time</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>response_time_ms</declname>
        </param>
        <briefdescription>
<para>Get bridge status and timing information. </para>
        </briefdescription>
        <detaileddescription>
<para>Provides timing information for monitoring bridge performance and compliance with response time requirements.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>last_register_update_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store last register update time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last_control_update_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store last control update time <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>response_time_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store last response time in milliseconds</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last_register_update_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store last register update time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last_control_update_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store last control update time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>response_time_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store last response time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_modbus_bridge.h" line="68" column="6" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="234" bodyend="250" declfile="include/sonicator_modbus_bridge.h" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4d/sonicator__modbus__bridge_8h_1a219a7d60c31b3c06b103ddefa1c86c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_modbus_bridge_is_responsive</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_modbus_bridge_is_responsive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if bridge is meeting response time requirements. </para>
        </briefdescription>
        <detaileddescription>
<para>Verifies that the bridge is responding to MODBUS control commands within the required &lt;100ms response time per Story 1.4 acceptance criteria.</para>
<para><simplesect kind="return"><para>true if response time &lt;100ms, false otherwise</para>
</simplesect>
<simplesect kind="return"><para>true if response time &lt;100ms, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_modbus_bridge.h" line="80" column="6" bodyfile="src/modules/control/sonicator_modbus_bridge.cpp" bodystart="256" bodyend="261" declfile="include/sonicator_modbus_bridge.h" declline="80" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Bridge between sonicator control and MODBUS registers for Story 1.4. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Cannasol Technologies </para>
</simplesect>
<simplesect kind="date"><para>2025-09-12 </para>
</simplesect>
<simplesect kind="version"><para>1.0.0</para>
</simplesect>
Provides the interface for the bridge between sonicator control functions and MODBUS register management. Enables integration of sonicator control with industrial automation systems via MODBUS RTU.</para>
<para>Key features:<itemizedlist>
<listitem><para>Bidirectional MODBUS register synchronization</para>
</listitem><listitem><para>&lt;100ms response time compliance</para>
</listitem><listitem><para>Status flag mapping and translation</para>
</listitem><listitem><para>Write-and-clear command handling</para>
</listitem><listitem><para>Real-time telemetry updates </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SONICATOR_MODBUS_BRIDGE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SONICATOR_MODBUS_BRIDGE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dc/d4d/sonicator__modbus__bridge_8h_1a025ee107dd733f26d18247c93a57fe9b" kindref="member">sonicator_modbus_bridge_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dc/d4d/sonicator__modbus__bridge_8h_1a21eb64fd76d39367ac8ead8fd7141350" kindref="member">sonicator_modbus_bridge_update</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/d4d/sonicator__modbus__bridge_8h_1a25d0d4028ca77add08f24d50d2a6978e" kindref="member">sonicator_modbus_bridge_get_status</ref>(uint32_t*<sp/>last_register_update_time,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t*<sp/>last_control_update_time,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t*<sp/>response_time_ms);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dc/d4d/sonicator__modbus__bridge_8h_1a219a7d60c31b3c06b103ddefa1c86c9a" kindref="member">sonicator_modbus_bridge_is_responsive</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>SONICATOR_MODBUS_BRIDGE_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/sonicator_modbus_bridge.h"/>
  </compounddef>
</doxygen>
