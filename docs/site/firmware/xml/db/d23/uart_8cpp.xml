<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="db/d23/uart_8cpp" kind="file" language="C++">
    <compoundname>uart.cpp</compoundname>
    <includes refid="d2/d86/uart_8h" local="yes">uart.h</includes>
    <includes refid="db/d16/config_8h" local="yes">config.h</includes>
    <includes local="no">Arduino.h</includes>
    <includes local="no">avr/interrupt.h</includes>
    <incdepgraph>
      <node id="5">
        <label>config.h</label>
        <link refid="db/d16/config_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/modules/hal/uart.cpp</label>
        <link refid="db/d23/uart_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>uart.h</label>
        <link refid="d2/d86/uart_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Arduino.h</label>
      </node>
      <node id="7">
        <label>avr/interrupt.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool uart_initialized</definition>
        <argsstring></argsstring>
        <name>uart_initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="20" column="13" bodyfile="src/modules/hal/uart.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1a4790bbcb2a6e50845f2cb3fe3a85d0cc" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t current_baud_rate</definition>
        <argsstring></argsstring>
        <name>current_baud_rate</name>
        <initializer>= <ref refid="d2/d86/uart_8h_1a67405a6e6e4427b2fb7ca73182212bf1" kindref="member">UART_DEFAULT_BAUD</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="21" column="17" bodyfile="src/modules/hal/uart.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1a26dba6adaf4930eb26ee8f0bf869797a" prot="public" static="yes" mutable="no">
        <type>volatile uint8_t</type>
        <definition>volatile uint8_t tx_buffer[UART_TX_BUFFER_SIZE]</definition>
        <argsstring>[UART_TX_BUFFER_SIZE]</argsstring>
        <name>tx_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="24" column="25" bodyfile="src/modules/hal/uart.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1ae8eef4f4c48941c2e3d49565926ea8c2" prot="public" static="yes" mutable="no">
        <type>volatile uint16_t</type>
        <definition>volatile uint16_t tx_head</definition>
        <argsstring></argsstring>
        <name>tx_head</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="25" column="26" bodyfile="src/modules/hal/uart.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1ae7122c16560ea0b0045043a553b270d6" prot="public" static="yes" mutable="no">
        <type>volatile uint16_t</type>
        <definition>volatile uint16_t tx_tail</definition>
        <argsstring></argsstring>
        <name>tx_tail</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="26" column="26" bodyfile="src/modules/hal/uart.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1a6206972d5d1a80ed81cd3aec5543d4c9" prot="public" static="yes" mutable="no">
        <type>volatile uint8_t</type>
        <definition>volatile uint8_t rx_buffer[UART_RX_BUFFER_SIZE]</definition>
        <argsstring>[UART_RX_BUFFER_SIZE]</argsstring>
        <name>rx_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="27" column="25" bodyfile="src/modules/hal/uart.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1a41858b503d36fe5186ae7034da867fad" prot="public" static="yes" mutable="no">
        <type>volatile uint16_t</type>
        <definition>volatile uint16_t rx_head</definition>
        <argsstring></argsstring>
        <name>rx_head</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="28" column="26" bodyfile="src/modules/hal/uart.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1aace368ec3f8fd8ed460175fa3a85bf87" prot="public" static="yes" mutable="no">
        <type>volatile uint16_t</type>
        <definition>volatile uint16_t rx_tail</definition>
        <argsstring></argsstring>
        <name>rx_tail</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="29" column="26" bodyfile="src/modules/hal/uart.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1a8b9682c4c0897c35f9e60b20e473210d" prot="public" static="yes" mutable="no">
        <type>volatile bool</type>
        <definition>volatile bool tx_busy</definition>
        <argsstring></argsstring>
        <name>tx_busy</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="32" column="22" bodyfile="src/modules/hal/uart.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1a854e3e6c9be5a2748e88235db8274c03" prot="public" static="yes" mutable="no">
        <type>volatile bool</type>
        <definition>volatile bool rx_overflow</definition>
        <argsstring></argsstring>
        <name>rx_overflow</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="33" column="22" bodyfile="src/modules/hal/uart.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1a2e7fe25823c47c43b987be6cf4275282" prot="public" static="yes" mutable="no">
        <type>volatile bool</type>
        <definition>volatile bool frame_error</definition>
        <argsstring></argsstring>
        <name>frame_error</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="34" column="22" bodyfile="src/modules/hal/uart.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1a024ae533cc0baf8b1dba9f83f10a714c" prot="public" static="yes" mutable="no">
        <type>volatile bool</type>
        <definition>volatile bool parity_error</definition>
        <argsstring></argsstring>
        <name>parity_error</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="35" column="22" bodyfile="src/modules/hal/uart.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1a683d45ca289424e1d2085bd8c1277f69" prot="public" static="yes" mutable="no">
        <type>volatile uint32_t</type>
        <definition>volatile uint32_t last_rx_time</definition>
        <argsstring></argsstring>
        <name>last_rx_time</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="38" column="26" bodyfile="src/modules/hal/uart.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d23/uart_8cpp_1a8eef656f756f781fd823edd1df257b04" prot="public" static="yes" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t char_time_us</definition>
        <argsstring></argsstring>
        <name>char_time_us</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="39" column="17" bodyfile="src/modules/hal/uart.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="db/d23/uart_8cpp_1a69267654e8774d836530c36eb5da9f72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>static uart_result_t calculate_baud_settings</definition>
        <argsstring>(uint32_t baud_rate, uint16_t *ubrr_value)</argsstring>
        <name>calculate_baud_settings</name>
        <param>
          <type>uint32_t</type>
          <declname>baud_rate</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>ubrr_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="537" column="22" bodyfile="src/modules/hal/uart.cpp" bodystart="537" bodyend="555" declfile="src/modules/hal/uart.cpp" declline="45" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a8926ab0f3f0e4ede68baf690eee33244" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t next_buffer_index</definition>
        <argsstring>(uint16_t index, uint16_t size)</argsstring>
        <name>next_buffer_index</name>
        <param>
          <type>uint16_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="557" column="17" bodyfile="src/modules/hal/uart.cpp" bodystart="557" bodyend="559" declfile="src/modules/hal/uart.cpp" declline="46" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a180f8f5cb51dcd445c6acc098160f038" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool is_tx_buffer_full</definition>
        <argsstring>(void)</argsstring>
        <name>is_tx_buffer_full</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="561" column="13" bodyfile="src/modules/hal/uart.cpp" bodystart="561" bodyend="563" declfile="src/modules/hal/uart.cpp" declline="47" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1ab494c265362a20fac836d6a2ef7ac259" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool is_rx_buffer_empty</definition>
        <argsstring>(void)</argsstring>
        <name>is_rx_buffer_empty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="565" column="13" bodyfile="src/modules/hal/uart.cpp" bodystart="565" bodyend="567" declfile="src/modules/hal/uart.cpp" declline="48" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1ae3fdf8dc6102f22acc3f682449277f38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t get_tx_buffer_count</definition>
        <argsstring>(void)</argsstring>
        <name>get_tx_buffer_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="569" column="17" bodyfile="src/modules/hal/uart.cpp" bodystart="569" bodyend="575" declfile="src/modules/hal/uart.cpp" declline="49" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1aee8dadbd6e8f8252c456f07f3b5f6335" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t get_rx_buffer_count</definition>
        <argsstring>(void)</argsstring>
        <name>get_rx_buffer_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="577" column="17" bodyfile="src/modules/hal/uart.cpp" bodystart="577" bodyend="583" declfile="src/modules/hal/uart.cpp" declline="50" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a48b8ffe1350c02ddd1bc1d4791f3c8ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void calculate_char_time</definition>
        <argsstring>(void)</argsstring>
        <name>calculate_char_time</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="585" column="13" bodyfile="src/modules/hal/uart.cpp" bodystart="585" bodyend="588" declfile="src/modules/hal/uart.cpp" declline="51" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a291c562f366dda51665637a2d8cc8447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_init</definition>
        <argsstring>(void)</argsstring>
        <name>uart_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize UART hardware abstraction layer. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures USART0 with default settings:<itemizedlist>
<listitem><para>115200 baud, 8N1 (8 data, no parity, 1 stop)</para>
</listitem><listitem><para>Interrupt-driven RX/TX with circular buffers</para>
</listitem><listitem><para>MODBUS RTU compatible timing</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="64" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="64" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1aa933dceadce526b41a736197e3093005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_init_config</definition>
        <argsstring>(const uart_config_t *config)</argsstring>
        <name>uart_init_config</name>
        <param>
          <type>const <ref refid="d1/dce/structuart__config__t" kindref="compound">uart_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialize UART with custom configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to UART configuration structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="75" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="75" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1ad94b530602f07127f460511015915700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_set_baud_rate</definition>
        <argsstring>(uint32_t baud_rate)</argsstring>
        <name>uart_set_baud_rate</name>
        <param>
          <type>uint32_t</type>
          <declname>baud_rate</declname>
        </param>
        <briefdescription>
<para>Configure UART baud rate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baud_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired baud rate (9600-230400) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="181" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="181" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1aa76cf405135227baee4370fa3707d3c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_send_byte</definition>
        <argsstring>(uint8_t data)</argsstring>
        <name>uart_send_byte</name>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Send single byte via UART. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte to transmit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure</para>
</simplesect>
<simplesect kind="note"><para>Non-blocking if TX buffer has space </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="205" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="205" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1aa5e3b4f3521be702d022ceb3bc1fe56e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_receive_byte</definition>
        <argsstring>(uint8_t *data)</argsstring>
        <name>uart_receive_byte</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Receive single byte from UART. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store received byte </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, UART_ERROR_BUFFER_EMPTY if no data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="221" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="221" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a40c5f34c4b43d068db84cd9afa24bc89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_data_available</definition>
        <argsstring>(bool *available)</argsstring>
        <name>uart_data_available</name>
        <param>
          <type>bool *</type>
          <declname>available</declname>
        </param>
        <briefdescription>
<para>Check if UART data is available for reading. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>available</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store availability status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="244" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="244" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a8c78732609067ae2bd35ef44120aa6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_get_rx_count</definition>
        <argsstring>(uint16_t *count)</argsstring>
        <name>uart_get_rx_count</name>
        <param>
          <type>uint16_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Get number of bytes available in receive buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store byte count </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="262" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="262" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1aae390a43a1728bf2f345bfb1ac2e0ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_send_buffer</definition>
        <argsstring>(const uint8_t *buffer, uint16_t length)</argsstring>
        <name>uart_send_buffer</name>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Send buffer of bytes via UART. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure</para>
</simplesect>
<simplesect kind="note"><para>Blocks if buffer cannot accommodate all data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="275" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="275" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a39e1c2f3baa35c209847b249e9cdb49c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_receive_buffer</definition>
        <argsstring>(uint8_t *buffer, uint16_t max_length, uint16_t *received)</argsstring>
        <name>uart_receive_buffer</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>received</declname>
        </param>
        <briefdescription>
<para>Receive buffer of bytes from UART. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to destination buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum bytes to receive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>received</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store actual bytes received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="295" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="295" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1aca0ce44bb4b9fedc156ffd006bccbc95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_flush_tx</definition>
        <argsstring>(void)</argsstring>
        <name>uart_flush_tx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Flush transmit buffer (wait for all data to be sent) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>UART_OK on success, UART_ERROR_TIMEOUT on timeout </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="323" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="323" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1aa0ba1394c3e54d2bba6d501db9ee7660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_flush_rx</definition>
        <argsstring>(void)</argsstring>
        <name>uart_flush_rx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear receive buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="337" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="337" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a2b8b8eea4fec91f6fd7c6773f4d08511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_send_modbus_frame</definition>
        <argsstring>(const uint8_t *frame, uint16_t length)</argsstring>
        <name>uart_send_modbus_frame</name>
        <param>
          <type>const uint8_t *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Send MODBUS RTU frame. </para>
        </briefdescription>
        <detaileddescription>
<para>Handles proper frame timing with 3.5 character gaps. Automatically calculates and appends CRC16.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to MODBUS frame (without CRC) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame length (excluding CRC) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="357" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="357" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a0b8696fe9a133f2130d7fb795d19273f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_receive_modbus_frame</definition>
        <argsstring>(uint8_t *frame, uint16_t max_length, uint16_t *received, uint32_t timeout_ms)</argsstring>
        <name>uart_receive_modbus_frame</name>
        <param>
          <type>uint8_t *</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>received</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Receive MODBUS RTU frame. </para>
        </briefdescription>
        <detaileddescription>
<para>Waits for frame with proper inter-character timing. Validates CRC16 and removes it from returned frame.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to destination buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum frame length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>received</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store actual frame length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="379" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="379" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1ae6f8e525675dfbc78c5c44a9298b1beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_modbus_gap_detected</definition>
        <argsstring>(bool *gap_detected)</argsstring>
        <name>uart_modbus_gap_detected</name>
        <param>
          <type>bool *</type>
          <declname>gap_detected</declname>
        </param>
        <briefdescription>
<para>Check for MODBUS frame gap (3.5 character silence) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gap_detected</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store gap detection status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="412" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="412" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1ae8fefb7831fe3654b5fae24f5978bf3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_get_idle_time</definition>
        <argsstring>(uint32_t *time_us)</argsstring>
        <name>uart_get_idle_time</name>
        <param>
          <type>uint32_t *</type>
          <declname>time_us</declname>
        </param>
        <briefdescription>
<para>Get time since last received character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_us</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store time in microseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="427" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="427" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1ac95c1eb9f418305b09c61288a640b077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_get_status</definition>
        <argsstring>(bool *tx_busy_status, bool *rx_overflow_status, bool *frame_error_status, bool *parity_error_status)</argsstring>
        <name>uart_get_status</name>
        <param>
          <type>bool *</type>
          <declname>tx_busy</declname>
          <defname>tx_busy_status</defname>
        </param>
        <param>
          <type>bool *</type>
          <declname>rx_overflow</declname>
          <defname>rx_overflow_status</defname>
        </param>
        <param>
          <type>bool *</type>
          <declname>frame_error</declname>
          <defname>frame_error_status</defname>
        </param>
        <param>
          <type>bool *</type>
          <declname>parity_error</declname>
          <defname>parity_error_status</defname>
        </param>
        <briefdescription>
<para>Get UART status flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx_busy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store TX busy status </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_overflow</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store RX overflow status </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store frame error status </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parity_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store parity error status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="444" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="444" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a77f2f49b95f115fcb9e2be99657c9c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_get_tx_free</definition>
        <argsstring>(uint16_t *free_bytes)</argsstring>
        <name>uart_get_tx_free</name>
        <param>
          <type>uint16_t *</type>
          <declname>free_bytes</declname>
        </param>
        <briefdescription>
<para>Get TX buffer space available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>free_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store free byte count </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="458" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="458" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a79ad1801b886ffa306c7c27e2a2cc80f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_clear_errors</definition>
        <argsstring>(void)</argsstring>
        <name>uart_clear_errors</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear error flags. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="471" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="471" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1aaa1b5b340b31a04d3cc965b7423ada02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_get_char_time</definition>
        <argsstring>(uint16_t *char_time_us_ptr)</argsstring>
        <name>uart_get_char_time</name>
        <param>
          <type>uint16_t *</type>
          <declname>char_time_us</declname>
          <defname>char_time_us_ptr</defname>
        </param>
        <briefdescription>
<para>Calculate character time for current baud rate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>char_time_us</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store character time in microseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="489" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="489" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="db/d23/uart_8cpp_1a5af63458c33759ed51ed861621a87cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref></type>
        <definition>uart_result_t uart_test_loopback</definition>
        <argsstring>(bool *success)</argsstring>
        <name>uart_test_loopback</name>
        <param>
          <type>bool *</type>
          <declname>success</declname>
        </param>
        <briefdescription>
<para>Test UART loopback (TX connected to RX) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>success</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store test result </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UART_OK on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/modules/hal/uart.cpp" line="502" column="15" bodyfile="src/modules/hal/uart.cpp" bodystart="502" bodyend="531"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>UART Hardware Abstraction Layer Implementation for ATmega32A. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Cannasol Technologies </para>
</simplesect>
<simplesect kind="date"><para>2025-09-02 </para>
</simplesect>
<simplesect kind="version"><para>1.0.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/d86/uart_8h" kindref="compound">uart.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/d16/config_8h" kindref="compound">config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;avr/interrupt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PRIVATE<sp/>VARIABLES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="db/d23/uart_8cpp_1a4790bbcb2a6e50845f2cb3fe3a85d0cc" kindref="member">current_baud_rate</ref><sp/>=<sp/><ref refid="d2/d86/uart_8h_1a67405a6e6e4427b2fb7ca73182212bf1" kindref="member">UART_DEFAULT_BAUD</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Circular<sp/>buffer<sp/>structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="d8/d00/modbus_8cpp_1ae840344c23f22df92cf8c83b4e69c26b" kindref="member">tx_buffer</ref>[<ref refid="d2/d86/uart_8h_1a05f5d709605c6317c97e4974bec3402a" kindref="member">UART_TX_BUFFER_SIZE</ref>];</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="db/d23/uart_8cpp_1ae8eef4f4c48941c2e3d49565926ea8c2" kindref="member">tx_head</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="db/d23/uart_8cpp_1ae7122c16560ea0b0045043a553b270d6" kindref="member">tx_tail</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="d8/d00/modbus_8cpp_1a004a0fcb6c93970c88f150c66add249f" kindref="member">rx_buffer</ref>[<ref refid="d2/d86/uart_8h_1a5bdd6772c246436bb14377095de79b31" kindref="member">UART_RX_BUFFER_SIZE</ref>];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="db/d23/uart_8cpp_1a41858b503d36fe5186ae7034da867fad" kindref="member">rx_head</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="db/d23/uart_8cpp_1aace368ec3f8fd8ed460175fa3a85bf87" kindref="member">rx_tail</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Status<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a8b9682c4c0897c35f9e60b20e473210d" kindref="member">tx_busy</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a854e3e6c9be5a2748e88235db8274c03" kindref="member">rx_overflow</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a2e7fe25823c47c43b987be6cf4275282" kindref="member">frame_error</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a024ae533cc0baf8b1dba9f83f10a714c" kindref="member">parity_error</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MODBUS<sp/>timing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="db/d23/uart_8cpp_1a683d45ca289424e1d2085bd8c1277f69" kindref="member">last_rx_time</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="db/d23/uart_8cpp_1a8eef656f756f781fd823edd1df257b04" kindref="member">char_time_us</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PRIVATE<sp/>FUNCTION<sp/>DECLARATIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1a69267654e8774d836530c36eb5da9f72" kindref="member">calculate_baud_settings</ref>(uint32_t<sp/>baud_rate,<sp/>uint16_t*<sp/>ubrr_value);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="db/d23/uart_8cpp_1a8926ab0f3f0e4ede68baf690eee33244" kindref="member">next_buffer_index</ref>(uint16_t<sp/>index,<sp/>uint16_t<sp/>size);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a180f8f5cb51dcd445c6acc098160f038" kindref="member">is_tx_buffer_full</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1ab494c265362a20fac836d6a2ef7ac259" kindref="member">is_rx_buffer_empty</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="db/d23/uart_8cpp_1ae3fdf8dc6102f22acc3f682449277f38" kindref="member">get_tx_buffer_count</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="db/d23/uart_8cpp_1aee8dadbd6e8f8252c456f07f3b5f6335" kindref="member">get_rx_buffer_count</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a48b8ffe1350c02ddd1bc1d4791f3c8ac" kindref="member">calculate_char_time</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERRUPT<sp/>SERVICE<sp/>ROUTINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>When<sp/>building<sp/>with<sp/>Arduino<sp/>core,<sp/>we<sp/>rely<sp/>on<sp/>HardwareSerial<sp/>for<sp/>UART.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>HAL<sp/>functions<sp/>below<sp/>can<sp/>delegate<sp/>to<sp/>Serial<sp/>to<sp/>avoid<sp/>ISR<sp/>conflicts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PUBLIC<sp/>FUNCTION<sp/>IMPLEMENTATIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1a291c562f366dda51665637a2d8cc8447" kindref="member">uart_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dce/structuart__config__t" kindref="compound">uart_config_t</ref><sp/>default_config<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.baud_rate<sp/>=<sp/><ref refid="d2/d86/uart_8h_1a67405a6e6e4427b2fb7ca73182212bf1" kindref="member">UART_DEFAULT_BAUD</ref>,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.data_bits<sp/>=<sp/><ref refid="d2/d86/uart_8h_1adc68b8fd9ded3990f84129df23fee798a92bcb9dce0caedc782f09b55b28e0856" kindref="member">UART_DATA_8BIT</ref>,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.parity<sp/>=<sp/><ref refid="d2/d86/uart_8h_1a6bcc37e31dd40c204b4ac6f6189e8878aa80d2d8ea61454045ebe71d155e85b3d" kindref="member">UART_PARITY_NONE</ref>,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stop_bits<sp/>=<sp/><ref refid="d2/d86/uart_8h_1a6da57a73bbdbf830b845d4116f8341d7ab82524ae02e9a2f83a2879afe1c49c98" kindref="member">UART_STOP_1BIT</ref></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1aa933dceadce526b41a736197e3093005" kindref="member">uart_init_config</ref>(&amp;default_config);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1aa933dceadce526b41a736197e3093005" kindref="member">uart_init_config</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/dce/structuart__config__t" kindref="compound">uart_config_t</ref>*<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>baud<sp/>rate<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>ubrr_value;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/>result<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1a69267654e8774d836530c36eb5da9f72" kindref="member">calculate_baud_settings</ref>(config-&gt;<ref refid="d1/dce/structuart__config__t_1a988fe3be69cba628a241033f1b16f35e" kindref="member">baud_rate</ref>,<sp/>&amp;ubrr_value);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>UART<sp/>during<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>UCSRB<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>baud<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>UBRRH<sp/>=<sp/>(uint8_t)(ubrr_value<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>UBRRL<sp/>=<sp/>(uint8_t)ubrr_value;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>frame<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ucsrc_value<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>URSEL);<sp/></highlight><highlight class="comment">//<sp/>Select<sp/>UCSRC<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>Arduino<sp/>Serial<sp/>if<sp/>not<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>real<sp/>Serial<sp/>in<sp/>native<sp/>tests;<sp/>mark<sp/>initialized<sp/>and<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a4790bbcb2a6e50845f2cb3fe3a85d0cc" kindref="member">current_baud_rate</ref><sp/>=<sp/>config-&gt;<ref refid="d1/dce/structuart__config__t_1a988fe3be69cba628a241033f1b16f35e" kindref="member">baud_rate</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.begin(config-&gt;<ref refid="d1/dce/structuart__config__t_1a988fe3be69cba628a241033f1b16f35e" kindref="member">baud_rate</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a4790bbcb2a6e50845f2cb3fe3a85d0cc" kindref="member">current_baud_rate</ref><sp/>=<sp/>config-&gt;<ref refid="d1/dce/structuart__config__t_1a988fe3be69cba628a241033f1b16f35e" kindref="member">baud_rate</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Data<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(config-&gt;<ref refid="d1/dce/structuart__config__t_1ae568b92a4a64a148c136dd511a3aefe1" kindref="member">data_bits</ref>)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1adc68b8fd9ded3990f84129df23fee798a550737a56f9f06a10b5aa2faab1b0d26" kindref="member">UART_DATA_5BIT</ref>:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UCSZ2:0<sp/>=<sp/>000<sp/>(default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1adc68b8fd9ded3990f84129df23fee798a522546f06cc688d7614b1cc16ef79b57" kindref="member">UART_DATA_6BIT</ref>:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucsrc_value<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>UCSZ0);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1adc68b8fd9ded3990f84129df23fee798adef31df2de2eea36b9958a2b4e772311" kindref="member">UART_DATA_7BIT</ref>:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucsrc_value<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>UCSZ1);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1adc68b8fd9ded3990f84129df23fee798a92bcb9dce0caedc782f09b55b28e0856" kindref="member">UART_DATA_8BIT</ref>:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucsrc_value<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>UCSZ1)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>UCSZ0);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1adc68b8fd9ded3990f84129df23fee798aaaf9e74e13d7f283dec97a5d26a63b17" kindref="member">UART_DATA_9BIT</ref>:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UCSRB<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>UCSZ2);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucsrc_value<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>UCSZ1)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>UCSZ0);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(config-&gt;<ref refid="d1/dce/structuart__config__t_1a157fe675a803f44325017b6b32a20824" kindref="member">parity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1a6bcc37e31dd40c204b4ac6f6189e8878aa80d2d8ea61454045ebe71d155e85b3d" kindref="member">UART_PARITY_NONE</ref>:</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UPM1:0<sp/>=<sp/>00<sp/>(default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1a6bcc37e31dd40c204b4ac6f6189e8878ad908a637b1dd23f93b149dd2d8bdfdb8" kindref="member">UART_PARITY_EVEN</ref>:</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucsrc_value<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>UPM1);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1a6bcc37e31dd40c204b4ac6f6189e8878ad90cc425f5ba447773a44a75be6593e2" kindref="member">UART_PARITY_ODD</ref>:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucsrc_value<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>UPM1)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>UPM0);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config-&gt;<ref refid="d1/dce/structuart__config__t_1ac90c1cc43e3e84befa5f6e98d63bb2d8" kindref="member">stop_bits</ref><sp/>==<sp/><ref refid="d2/d86/uart_8h_1a6da57a73bbdbf830b845d4116f8341d7ac161d02326b891764627425309c51b53" kindref="member">UART_STOP_2BIT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucsrc_value<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>USBS);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>configuration<sp/>to<sp/>UCSRC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>UCSRC<sp/>=<sp/>ucsrc_value;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>RX,<sp/>TX,<sp/>and<sp/>RX<sp/>interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>UCSRB<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>RXEN)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TXEN)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>RXCIE);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1ae8eef4f4c48941c2e3d49565926ea8c2" kindref="member">tx_head</ref><sp/>=<sp/><ref refid="db/d23/uart_8cpp_1ae7122c16560ea0b0045043a553b270d6" kindref="member">tx_tail</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a41858b503d36fe5186ae7034da867fad" kindref="member">rx_head</ref><sp/>=<sp/><ref refid="db/d23/uart_8cpp_1aace368ec3f8fd8ed460175fa3a85bf87" kindref="member">rx_tail</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>status<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a8b9682c4c0897c35f9e60b20e473210d" kindref="member">tx_busy</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a854e3e6c9be5a2748e88235db8274c03" kindref="member">rx_overflow</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a2e7fe25823c47c43b987be6cf4275282" kindref="member">frame_error</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a024ae533cc0baf8b1dba9f83f10a714c" kindref="member">parity_error</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>current<sp/>baud<sp/>rate<sp/>and<sp/>calculate<sp/>timing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a4790bbcb2a6e50845f2cb3fe3a85d0cc" kindref="member">current_baud_rate</ref><sp/>=<sp/>config-&gt;<ref refid="d1/dce/structuart__config__t_1a988fe3be69cba628a241033f1b16f35e" kindref="member">baud_rate</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a48b8ffe1350c02ddd1bc1d4791f3c8ac" kindref="member">calculate_char_time</ref>();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>global<sp/>interrupts<sp/>if<sp/>not<sp/>already<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>sei();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1ad94b530602f07127f460511015915700" kindref="member">uart_set_baud_rate</ref>(uint32_t<sp/>baud_rate)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>ubrr_value;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/>result<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1a69267654e8774d836530c36eb5da9f72" kindref="member">calculate_baud_settings</ref>(baud_rate,<sp/>&amp;ubrr_value);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>transmission<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1aca0ce44bb4b9fedc156ffd006bccbc95" kindref="member">uart_flush_tx</ref>();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>baud<sp/>rate<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>UBRRH<sp/>=<sp/>(uint8_t)(ubrr_value<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>UBRRL<sp/>=<sp/>(uint8_t)ubrr_value;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a4790bbcb2a6e50845f2cb3fe3a85d0cc" kindref="member">current_baud_rate</ref><sp/>=<sp/>baud_rate;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a48b8ffe1350c02ddd1bc1d4791f3c8ac" kindref="member">calculate_char_time</ref>();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1aa76cf405135227baee4370fa3707d3c8" kindref="member">uart_send_byte</ref>(uint8_t<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>native<sp/>tests,<sp/>simulate<sp/>success<sp/>without<sp/>real<sp/>UART</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)data;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Directly<sp/>use<sp/>Arduino<sp/>Serial<sp/>in<sp/>Arduino<sp/>build<sp/>to<sp/>save<sp/>RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)Serial.write(&amp;data,<sp/>1);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1aa5e3b4f3521be702d022ceb3bc1fe56e" kindref="member">uart_receive_byte</ref>(uint8_t*<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/><ref refid="db/d23/uart_8cpp_1ab494c265362a20fac836d6a2ef7ac259" kindref="member">is_rx_buffer_empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2ac8723155b4e7bfb98ef671c9aade95b3" kindref="member">UART_ERROR_BUFFER_EMPTY</ref>;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>real<sp/>RX<sp/>data<sp/>in<sp/>native<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)data;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2ac8723155b4e7bfb98ef671c9aade95b3" kindref="member">UART_ERROR_BUFFER_EMPTY</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Serial.available()<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2ac8723155b4e7bfb98ef671c9aade95b3" kindref="member">UART_ERROR_BUFFER_EMPTY</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>*data<sp/>=<sp/>(uint8_t)Serial.read();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1a40c5f34c4b43d068db84cd9afa24bc89" kindref="member">uart_data_available</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>available)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(available<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>*available<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>*available<sp/>=<sp/>(Serial.available()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1a8c78732609067ae2bd35ef44120aa6d7" kindref="member">uart_get_rx_count</ref>(uint16_t*<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>*count<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1aee8dadbd6e8f8252c456f07f3b5f6335" kindref="member">get_rx_buffer_count</ref>();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1aae390a43a1728bf2f345bfb1ac2e0ede" kindref="member">uart_send_buffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>buffer,<sp/>uint16_t<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Direct<sp/>write<sp/>in<sp/>Arduino<sp/>build</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/>result<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1aa76cf405135227baee4370fa3707d3c8" kindref="member">uart_send_byte</ref>(buffer[i]);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1a39e1c2f3baa35c209847b249e9cdb49c" kindref="member">uart_receive_buffer</ref>(uint8_t*<sp/>buffer,<sp/>uint16_t<sp/>max_length,<sp/>uint16_t*<sp/>received)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>received<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>*received<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)buffer;<sp/>(void)max_length;<sp/>(void)received;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*received<sp/>&lt;<sp/>max_length<sp/>&amp;&amp;<sp/>Serial.available()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/>result<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1aa5e3b4f3521be702d022ceb3bc1fe56e" kindref="member">uart_receive_byte</ref>(&amp;buffer[*received]);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*received)++;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1aca0ce44bb4b9fedc156ffd006bccbc95" kindref="member">uart_flush_tx</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>Arduino<sp/>build,<sp/>flush<sp/>the<sp/>Serial<sp/>TX<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.flush();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1aa0ba1394c3e54d2bba6d501db9ee7660" kindref="member">uart_flush_rx</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>cli();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a41858b503d36fe5186ae7034da867fad" kindref="member">rx_head</ref><sp/>=<sp/><ref refid="db/d23/uart_8cpp_1aace368ec3f8fd8ed460175fa3a85bf87" kindref="member">rx_tail</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>sei();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MODBUS<sp/>RTU<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1a2b8b8eea4fec91f6fd7c6773f4d08511" kindref="member">uart_send_modbus_frame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>frame,<sp/>uint16_t<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>3.5<sp/>character<sp/>gap<sp/>before<sp/>transmission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>delayMicroseconds(<ref refid="d2/d86/uart_8h_1a93535c98d400695ea6330bd51843e4e6" kindref="member">UART_MODBUS_T3_5_US</ref>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>frame<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/>result<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1aae390a43a1728bf2f345bfb1ac2e0ede" kindref="member">uart_send_buffer</ref>(frame,<sp/>length);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>transmission<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1aca0ce44bb4b9fedc156ffd006bccbc95" kindref="member">uart_flush_tx</ref>();</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1a0b8696fe9a133f2130d7fb795d19273f" kindref="member">uart_receive_modbus_frame</ref>(uint8_t*<sp/>frame,<sp/>uint16_t<sp/>max_length,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>received,<sp/>uint32_t<sp/>timeout_ms)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>received<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>*received<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>start_time<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>last_char_time<sp/>=<sp/>micros();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(millis()<sp/>-<sp/>start_time<sp/>&lt;<sp/>timeout_ms)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>data;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="db/d23/uart_8cpp_1aa5e3b4f3521be702d022ceb3bc1fe56e" kindref="member">uart_receive_byte</ref>(&amp;data)<sp/>==<sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*received<sp/>&lt;<sp/>max_length)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame[*received]<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*received)++;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_char_time<sp/>=<sp/>micros();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>frame<sp/>gap<sp/>(3.5<sp/>character<sp/>times)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*received<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(micros()<sp/>-<sp/>last_char_time)<sp/>&gt;<sp/><ref refid="d2/d86/uart_8h_1a93535c98d400695ea6330bd51843e4e6" kindref="member">UART_MODBUS_T3_5_US</ref>)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>frame<sp/>detected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*received<sp/>&gt;<sp/>0)<sp/>?<sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref><sp/>:<sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a62c2571e244067bcd6d45dc89d45e4b2" kindref="member">UART_ERROR_TIMEOUT</ref>;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1ae6f8e525675dfbc78c5c44a9298b1beb" kindref="member">uart_modbus_gap_detected</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>gap_detected)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gap_detected<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>idle_time<sp/>=<sp/>micros()<sp/>-<sp/><ref refid="db/d23/uart_8cpp_1a683d45ca289424e1d2085bd8c1277f69" kindref="member">last_rx_time</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>*gap_detected<sp/>=<sp/>(idle_time<sp/>&gt;<sp/><ref refid="d2/d86/uart_8h_1a93535c98d400695ea6330bd51843e4e6" kindref="member">UART_MODBUS_T3_5_US</ref>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1ae8fefb7831fe3654b5fae24f5978bf3d" kindref="member">uart_get_idle_time</ref>(uint32_t*<sp/>time_us)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time_us<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>*time_us<sp/>=<sp/>micros()<sp/>-<sp/><ref refid="db/d23/uart_8cpp_1a683d45ca289424e1d2085bd8c1277f69" kindref="member">last_rx_time</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DIAGNOSTIC<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1ac95c1eb9f418305b09c61288a640b077" kindref="member">uart_get_status</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>tx_busy_status,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>rx_overflow_status,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>frame_error_status,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>parity_error_status)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx_busy_status)<sp/>*tx_busy_status<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1a8b9682c4c0897c35f9e60b20e473210d" kindref="member">tx_busy</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx_overflow_status)<sp/>*rx_overflow_status<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1a854e3e6c9be5a2748e88235db8274c03" kindref="member">rx_overflow</ref>;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame_error_status)<sp/>*frame_error_status<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1a2e7fe25823c47c43b987be6cf4275282" kindref="member">frame_error</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parity_error_status)<sp/>*parity_error_status<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1a024ae533cc0baf8b1dba9f83f10a714c" kindref="member">parity_error</ref>;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1a77f2f49b95f115fcb9e2be99657c9c75" kindref="member">uart_get_tx_free</ref>(uint16_t*<sp/>free_bytes)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(free_bytes<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>*free_bytes<sp/>=<sp/><ref refid="d2/d86/uart_8h_1a05f5d709605c6317c97e4974bec3402a" kindref="member">UART_TX_BUFFER_SIZE</ref><sp/>-<sp/><ref refid="db/d23/uart_8cpp_1ae3fdf8dc6102f22acc3f682449277f38" kindref="member">get_tx_buffer_count</ref>()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1a79ad1801b886ffa306c7c27e2a2cc80f" kindref="member">uart_clear_errors</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>cli();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a854e3e6c9be5a2748e88235db8274c03" kindref="member">rx_overflow</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a2e7fe25823c47c43b987be6cf4275282" kindref="member">frame_error</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a024ae533cc0baf8b1dba9f83f10a714c" kindref="member">parity_error</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>sei();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1aaa1b5b340b31a04d3cc965b7423ada02" kindref="member">uart_get_char_time</ref>(uint16_t*<sp/>char_time_us_ptr)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(char_time_us_ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>*char_time_us_ptr<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1a8eef656f756f781fd823edd1df257b04" kindref="member">char_time_us</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1a5af63458c33759ed51ed861621a87cce" kindref="member">uart_test_loopback</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>success)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="db/d23/uart_8cpp_1a6dbfcc1eb52516b318ea9a987f893d38" kindref="member">uart_initialized</ref>)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2aab0d25ae60a715cab154d889092fba90" kindref="member">UART_ERROR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1aa0ba1394c3e54d2bba6d501db9ee7660" kindref="member">uart_flush_rx</ref>();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>test<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>test_data<sp/>=<sp/>0x55;<sp/></highlight><highlight class="comment">//<sp/>Alternating<sp/>bit<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/>result<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1aa76cf405135227baee4370fa3707d3c8" kindref="member">uart_send_byte</ref>(test_data);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>transmission<sp/>and<sp/>potential<sp/>reception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(10);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>data<sp/>was<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>received_data;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="db/d23/uart_8cpp_1aa5e3b4f3521be702d022ceb3bc1fe56e" kindref="member">uart_receive_byte</ref>(&amp;received_data);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>*success<sp/>=<sp/>(result<sp/>==<sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>)<sp/>&amp;&amp;<sp/>(received_data<sp/>==<sp/>test_data);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PRIVATE<sp/>FUNCTION<sp/>IMPLEMENTATIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2" kindref="member">uart_result_t</ref><sp/><ref refid="db/d23/uart_8cpp_1a69267654e8774d836530c36eb5da9f72" kindref="member">calculate_baud_settings</ref>(uint32_t<sp/>baud_rate,<sp/>uint16_t*<sp/>ubrr_value)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ubrr_value<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a4c8e3a233531175bd36386d24f6fdaca" kindref="member">UART_ERROR_INVALID_CONFIG</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baud_rate<sp/>&lt;<sp/>UART_MIN_BAUD<sp/>||<sp/>baud_rate<sp/>&gt;<sp/><ref refid="d2/d86/uart_8h_1aa0394fc6f4ab8e23d754833bff3a0c72" kindref="member">UART_MAX_BAUD</ref>)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a3683e0576febb2329261685a69c94c52" kindref="member">UART_ERROR_INVALID_BAUD</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>UBRR<sp/>value<sp/>for<sp/>normal<sp/>mode<sp/>(U2X<sp/>=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ubrr<sp/>=<sp/>(F_CPU<sp/>/<sp/>(16UL<sp/>*<sp/>baud_rate))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ubrr<sp/>&gt;<sp/>4095)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>12-bit<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a3683e0576febb2329261685a69c94c52" kindref="member">UART_ERROR_INVALID_BAUD</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>*ubrr_value<sp/>=<sp/>(uint16_t)ubrr;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1aabc3f7837eaa0a3c2604229c376e88e2a525187963c0aaa465f2a35b30b894d07" kindref="member">UART_OK</ref>;</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="db/d23/uart_8cpp_1a8926ab0f3f0e4ede68baf690eee33244" kindref="member">next_buffer_index</ref>(uint16_t<sp/>index,<sp/>uint16_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(index<sp/>+<sp/>1)<sp/>%<sp/>size;</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a180f8f5cb51dcd445c6acc098160f038" kindref="member">is_tx_buffer_full</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a8926ab0f3f0e4ede68baf690eee33244" kindref="member">next_buffer_index</ref>(<ref refid="db/d23/uart_8cpp_1ae8eef4f4c48941c2e3d49565926ea8c2" kindref="member">tx_head</ref>,<sp/><ref refid="d2/d86/uart_8h_1a05f5d709605c6317c97e4974bec3402a" kindref="member">UART_TX_BUFFER_SIZE</ref>)<sp/>==<sp/><ref refid="db/d23/uart_8cpp_1ae7122c16560ea0b0045043a553b270d6" kindref="member">tx_tail</ref>;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1ab494c265362a20fac836d6a2ef7ac259" kindref="member">is_rx_buffer_empty</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a41858b503d36fe5186ae7034da867fad" kindref="member">rx_head</ref><sp/>==<sp/><ref refid="db/d23/uart_8cpp_1aace368ec3f8fd8ed460175fa3a85bf87" kindref="member">rx_tail</ref>;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="db/d23/uart_8cpp_1ae3fdf8dc6102f22acc3f682449277f38" kindref="member">get_tx_buffer_count</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="db/d23/uart_8cpp_1ae8eef4f4c48941c2e3d49565926ea8c2" kindref="member">tx_head</ref><sp/>&gt;=<sp/><ref refid="db/d23/uart_8cpp_1ae7122c16560ea0b0045043a553b270d6" kindref="member">tx_tail</ref>)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1ae8eef4f4c48941c2e3d49565926ea8c2" kindref="member">tx_head</ref><sp/>-<sp/><ref refid="db/d23/uart_8cpp_1ae7122c16560ea0b0045043a553b270d6" kindref="member">tx_tail</ref>;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1a05f5d709605c6317c97e4974bec3402a" kindref="member">UART_TX_BUFFER_SIZE</ref><sp/>-<sp/><ref refid="db/d23/uart_8cpp_1ae7122c16560ea0b0045043a553b270d6" kindref="member">tx_tail</ref><sp/>+<sp/><ref refid="db/d23/uart_8cpp_1ae8eef4f4c48941c2e3d49565926ea8c2" kindref="member">tx_head</ref>;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="db/d23/uart_8cpp_1aee8dadbd6e8f8252c456f07f3b5f6335" kindref="member">get_rx_buffer_count</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="db/d23/uart_8cpp_1a41858b503d36fe5186ae7034da867fad" kindref="member">rx_head</ref><sp/>&gt;=<sp/><ref refid="db/d23/uart_8cpp_1aace368ec3f8fd8ed460175fa3a85bf87" kindref="member">rx_tail</ref>)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a41858b503d36fe5186ae7034da867fad" kindref="member">rx_head</ref><sp/>-<sp/><ref refid="db/d23/uart_8cpp_1aace368ec3f8fd8ed460175fa3a85bf87" kindref="member">rx_tail</ref>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/d86/uart_8h_1a5bdd6772c246436bb14377095de79b31" kindref="member">UART_RX_BUFFER_SIZE</ref><sp/>-<sp/><ref refid="db/d23/uart_8cpp_1aace368ec3f8fd8ed460175fa3a85bf87" kindref="member">rx_tail</ref><sp/>+<sp/><ref refid="db/d23/uart_8cpp_1a41858b503d36fe5186ae7034da867fad" kindref="member">rx_head</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d23/uart_8cpp_1a48b8ffe1350c02ddd1bc1d4791f3c8ac" kindref="member">calculate_char_time</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>time<sp/>for<sp/>one<sp/>character<sp/>(11<sp/>bits:<sp/>1<sp/>start<sp/>+<sp/>8<sp/>data<sp/>+<sp/>1<sp/>parity<sp/>+<sp/>1<sp/>stop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d23/uart_8cpp_1a8eef656f756f781fd823edd1df257b04" kindref="member">char_time_us</ref><sp/>=<sp/>(11<sp/>*<sp/>1000000UL)<sp/>/<sp/><ref refid="db/d23/uart_8cpp_1a4790bbcb2a6e50845f2cb3fe3a85d0cc" kindref="member">current_baud_rate</ref>;</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/modules/hal/uart.cpp"/>
  </compounddef>
</doxygen>
