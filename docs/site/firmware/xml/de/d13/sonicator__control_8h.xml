<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="de/d13/sonicator__control_8h" kind="file" language="C++">
    <compoundname>sonicator_control.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="d8/d4b/hal_8h" local="yes">modules/hal/hal.h</includes>
    <includedby refid="df/d0a/main_8cpp" local="yes">src/main.cpp</includedby>
    <includedby refid="d2/db9/sonicator_8cpp" local="yes">src/modules/control/sonicator.cpp</includedby>
    <includedby refid="d5/dea/sonicator__modbus__bridge_8cpp" local="yes">src/modules/control/sonicator_modbus_bridge.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/sonicator_control.h</label>
        <link refid="de/d13/sonicator__control_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>adc.h</label>
        <link refid="d7/d19/adc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>gpio.h</label>
        <link refid="d6/d7c/gpio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>modules/hal/hal.h</label>
        <link refid="d8/d4b/hal_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pwm.h</label>
        <link refid="d6/db9/pwm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>timer.h</label>
        <link refid="d5/dd0/timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>uart.h</label>
        <link refid="d2/d86/uart_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/sonicator_control.h</label>
        <link refid="de/d13/sonicator__control_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/main.cpp</label>
        <link refid="df/d0a/main_8cpp"/>
      </node>
      <node id="3">
        <label>src/modules/control/sonicator.cpp</label>
        <link refid="d2/db9/sonicator_8cpp"/>
      </node>
      <node id="4">
        <label>src/modules/control/sonicator_modbus_bridge.cpp</label>
        <link refid="d5/dea/sonicator__modbus__bridge_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="df/d70/structsonicator__state__control__t" prot="public">sonicator_state_control_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="de/d13/sonicator__control_8h_1a73ff3fa20f363956206243467723cfdb" prot="public" static="no">
        <name>SONICATOR_START_DELAY_MS</name>
        <initializer>50</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="80" column="9" bodyfile="include/sonicator_control.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="de/d13/sonicator__control_8h_1a0f1d094ebabfc54ecb3292163fbb97b7" prot="public" static="no">
        <name>SONICATOR_STOP_DELAY_MS</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="81" column="9" bodyfile="include/sonicator_control.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="de/d13/sonicator__control_8h_1a91c49141120b41b4039582f54a59d839" prot="public" static="no">
        <name>SONICATOR_RESET_PULSE_MS</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="82" column="9" bodyfile="include/sonicator_control.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="de/d13/sonicator__control_8h_1aa1c769c234868a66d06b393acfbf20cb" prot="public" static="no">
        <name>SONICATOR_FAULT_DEBOUNCE_MS</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="83" column="9" bodyfile="include/sonicator_control.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="de/d13/sonicator__control_8h_1aafedba2f7dd17703f2fee746b1096bcf" prot="public" static="no">
        <name>SONICATOR_WATCHDOG_TIMEOUT_MS</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="84" column="9" bodyfile="include/sonicator_control.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="de/d13/sonicator__control_8h_1a3a8bcea46ab85058d6fd1ad4c3c32ad4" prot="public" static="no">
        <name>SONICATOR_COMM_TIMEOUT_MS</name>
        <initializer>2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="85" column="9" bodyfile="include/sonicator_control.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="de/d13/sonicator__control_8h_1abe06b5505cf15123b31cf8b029b59679" prot="public" static="no">
        <name>SONICATOR_MIN_AMPLITUDE_PERCENT</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="88" column="9" bodyfile="include/sonicator_control.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="de/d13/sonicator__control_8h_1a9266e0128c993063b7b3aac98faf4e9b" prot="public" static="no">
        <name>SONICATOR_MAX_AMPLITUDE_PERCENT</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="89" column="9" bodyfile="include/sonicator_control.h" bodystart="89" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315" prot="public" static="no" strong="no">
        <type></type>
        <name>sonicator_state_t</name>
        <enumvalue id="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a8aaaacd92fec828be10c02ef2696f0b7" prot="public">
          <name>SONICATOR_STATE_IDLE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a34a68840cf8e7502193a12370a443e01" prot="public">
          <name>SONICATOR_STATE_STARTING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315aefd4187011c854e789baa073995f0def" prot="public">
          <name>SONICATOR_STATE_RUNNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a68fc7fb7e15c844aa2c6cda43bcc8d09" prot="public">
          <name>SONICATOR_STATE_STOPPING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a7ef335199557a3658616b70275094a47" prot="public">
          <name>SONICATOR_STATE_FAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a02f13d1f0ad8e9fc52f93cf9c25ad0cf" prot="public">
          <name>SONICATOR_STATE_UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Sonicator control states. </para>
        </briefdescription>
        <detaileddescription>
<para>State transitions follow safety requirements with proper debouncing: IDLE → STARTING (50ms delay) → RUNNING → STOPPING (100ms) → IDLE Any state → FAULT (immediate) → IDLE (after fault cleared) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="44" column="1" bodyfile="include/sonicator_control.h" bodystart="44" bodyend="51"/>
      </memberdef>
      <memberdef kind="enum" id="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4" prot="public" static="no" strong="no">
        <type></type>
        <name>sonicator_command_t</name>
        <enumvalue id="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a987db97b0e167389251f476d7c8c22d0" prot="public">
          <name>SONICATOR_CMD_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a67e775d5c114ee423be652c23762b4e5" prot="public">
          <name>SONICATOR_CMD_START</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a59cde013ea811598dfd6c4e8f3d3fc44" prot="public">
          <name>SONICATOR_CMD_STOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4ae468797997229d74ba359310b851b758" prot="public">
          <name>SONICATOR_CMD_RESET_OVERLOAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a46c3d8fff15b619067de0d72192b4ae0" prot="public">
          <name>SONICATOR_CMD_EMERGENCY_STOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Sonicator control commands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="56" column="1" bodyfile="include/sonicator_control.h" bodystart="56" bodyend="62"/>
      </memberdef>
      <memberdef kind="enum" id="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99" prot="public" static="no" strong="no">
        <type></type>
        <name>sonicator_fault_t</name>
        <enumvalue id="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a45f67c744f0a84ef961991bbbcee8cb7" prot="public">
          <name>SONICATOR_FAULT_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a73567def603bb6f8f77826552276d5ec" prot="public">
          <name>SONICATOR_FAULT_OVERLOAD</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a5de4021b7d7257f7229804ea8c159aa8" prot="public">
          <name>SONICATOR_FAULT_FREQ_UNLOCK</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a6b2e009dc023f729b34c1387dd3ec373" prot="public">
          <name>SONICATOR_FAULT_COMM_TIMEOUT</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a46b1755f047e81751b29ae6787e7d594" prot="public">
          <name>SONICATOR_FAULT_HARDWARE</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99ab5b14d7067e124bcf3c19b309db532e1" prot="public">
          <name>SONICATOR_FAULT_WATCHDOG</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Sonicator fault conditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="67" column="1" bodyfile="include/sonicator_control.h" bodystart="67" bodyend="74"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1ac88614577067020f420441ba689e7241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_begin</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_begin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize sonicator control system. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets up state machine, HAL interfaces, and safety systems. Must be called before any other sonicator control functions.</para>
<para><simplesect kind="return"><para>true if initialization successful, false on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="145" column="6" bodyfile="src/modules/control/sonicator.cpp" bodystart="422" bodyend="447" declfile="include/sonicator_control.h" declline="145" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1aab49fb783e216647f53db17fbb6b62b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_start</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_start</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Start sonicator operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Commands sonicator to start with current amplitude setting. State transition: IDLE → STARTING → RUNNING</para>
<para><simplesect kind="return"><para>true if start command accepted, false if unable to start </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="155" column="6" bodyfile="src/modules/control/sonicator.cpp" bodystart="449" bodyend="463" declfile="include/sonicator_control.h" declline="155" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1a4c28efedf324a8f71669e203de81ca47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_stop</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Stop sonicator operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Commands sonicator to stop gracefully. State transition: RUNNING → STOPPING → IDLE</para>
<para><simplesect kind="return"><para>true if stop command accepted, false if already stopped </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="165" column="6" bodyfile="src/modules/control/sonicator.cpp" bodystart="465" bodyend="479" declfile="include/sonicator_control.h" declline="165" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1ad48d366d35d3f9fc640589b2b5623aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_set_amplitude</definition>
        <argsstring>(uint8_t amplitude_percent)</argsstring>
        <name>sonicator_set_amplitude</name>
        <param>
          <type>uint8_t</type>
          <declname>amplitude_percent</declname>
        </param>
        <briefdescription>
<para>Set sonicator amplitude. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets amplitude setpoint for sonicator operation. Valid range: 20-100% (CT2000 specification)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amplitude_percent</parametername>
</parameternamelist>
<parameterdescription>
<para>Amplitude setting (20-100%) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if amplitude set successfully, false if out of range </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="176" column="6" bodyfile="src/modules/control/sonicator.cpp" bodystart="481" bodyend="490" declfile="include/sonicator_control.h" declline="176" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1a21c76fda64cb8f4ddaf2f55f3567ec5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_reset_overload</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_reset_overload</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reset overload condition. </para>
        </briefdescription>
        <detaileddescription>
<para>Sends reset pulse to clear overload fault condition. Only effective when sonicator is in FAULT state due to overload.</para>
<para><simplesect kind="return"><para>true if reset command sent, false if not applicable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="186" column="6" bodyfile="src/modules/control/sonicator.cpp" bodystart="492" bodyend="510" declfile="include/sonicator_control.h" declline="186" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1a626ecb2d4d66e32401478259cfe3595f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_emergency_stop</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_emergency_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Emergency stop (immediate) </para>
        </briefdescription>
        <detaileddescription>
<para>Immediately stops sonicator regardless of current state. Used for safety-critical situations.</para>
<para><simplesect kind="return"><para>true always (cannot fail) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="196" column="6" bodyfile="src/modules/control/sonicator.cpp" bodystart="512" bodyend="532" declfile="include/sonicator_control.h" declline="196" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1adfd3a8b6450a1a09bf17d4865c32569c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315" kindref="member">sonicator_state_t</ref></type>
        <definition>sonicator_state_t sonicator_update</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_update</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Main control update function. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>CRITICAL</bold>: Must be called at 1kHz (every 1ms) from main loop. Handles state machine transitions, safety monitoring, and telemetry updates.</para>
<para>Non-blocking execution guaranteed &lt;100μs typical.</para>
<para><simplesect kind="return"><para>Current sonicator state after update </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="208" column="19" bodyfile="src/modules/control/sonicator.cpp" bodystart="534" bodyend="562" declfile="include/sonicator_control.h" declline="208" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1a1ecfcd93a4b2bd32c9cab9f359b831ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="df/d70/structsonicator__state__control__t" kindref="compound">sonicator_state_control_t</ref> *</type>
        <definition>const sonicator_state_control_t * sonicator_get_status</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_get_status</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get current sonicator status. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns complete sonicator status structure for MODBUS or diagnostics. Safe to call from any context.</para>
<para><simplesect kind="return"><para>Pointer to current status structure (read-only) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="218" column="33" bodyfile="src/modules/control/sonicator.cpp" bodystart="564" bodyend="566" declfile="include/sonicator_control.h" declline="218" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1abe828539c1f97df3497b972c3c72c75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * sonicator_state_to_string</definition>
        <argsstring>(sonicator_state_t state)</argsstring>
        <name>sonicator_state_to_string</name>
        <param>
          <type><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315" kindref="member">sonicator_state_t</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Get current state as string (for debugging) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>State to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String representation of state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="226" column="12" bodyfile="src/modules/control/sonicator.cpp" bodystart="568" bodyend="578" declfile="include/sonicator_control.h" declline="226" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1a2309ace8e76b3132b8b2f0e7d0df9956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_is_safe</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_is_safe</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if sonicator is in safe state. </para>
        </briefdescription>
        <detaileddescription>
<para>Verifies all safety conditions are met:<itemizedlist>
<listitem><para>No active faults</para>
</listitem><listitem><para>Watchdog not expired</para>
</listitem><listitem><para>Communication active</para>
</listitem><listitem><para>Hardware responding</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="return"><para>true if safe, false if safety concern exists </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="239" column="6" bodyfile="src/modules/control/sonicator.cpp" bodystart="580" bodyend="594" declfile="include/sonicator_control.h" declline="239" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1a85b84eadaf4c625391673e214901144f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sonicator_reset_statistics</definition>
        <argsstring>(void)</argsstring>
        <name>sonicator_reset_statistics</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Reset all statistics and counters. </para>
        </briefdescription>
        <detaileddescription>
<para>Clears runtime counters, fault counts, and statistics. Does not affect current operational state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="247" column="6" bodyfile="src/modules/control/sonicator.cpp" bodystart="596" bodyend="609" declfile="include/sonicator_control.h" declline="247" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1a4519e53de39614ddb883a4c2db06ea19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_force_state</definition>
        <argsstring>(sonicator_state_t new_state)</argsstring>
        <name>sonicator_force_state</name>
        <param>
          <type><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315" kindref="member">sonicator_state_t</ref></type>
          <declname>new_state</declname>
        </param>
        <briefdescription>
<para>Force state transition (testing only) </para>
        </briefdescription>
        <detaileddescription>
<para><bold>WARNING</bold>: Bypasses safety checks. Use only for unit testing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Target state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if transition completed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="261" column="6" bodyfile="src/modules/control/sonicator.cpp" bodystart="615" bodyend="627" declfile="include/sonicator_control.h" declline="261" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1a79b77d91a6416dd0447f9c6c9741ec36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sonicator_inject_fault</definition>
        <argsstring>(sonicator_fault_t fault_mask)</argsstring>
        <name>sonicator_inject_fault</name>
        <param>
          <type><ref refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99" kindref="member">sonicator_fault_t</ref></type>
          <declname>fault_mask</declname>
        </param>
        <briefdescription>
<para>Inject fault condition (testing only) </para>
        </briefdescription>
        <detaileddescription>
<para><bold>WARNING</bold>: For testing only. Injects artificial fault condition.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fault_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Fault condition to inject </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if fault injected </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="271" column="6" bodyfile="src/modules/control/sonicator.cpp" bodystart="629" bodyend="637" declfile="include/sonicator_control.h" declline="271" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="de/d13/sonicator__control_8h_1abe9ba511a647d9236e12897ce8cf7271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sonicator_set_simulation_mode</definition>
        <argsstring>(bool enable)</argsstring>
        <name>sonicator_set_simulation_mode</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable/disable simulation mode. </para>
        </briefdescription>
        <detaileddescription>
<para>When enabled, bypasses HAL calls for unit testing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>true to enable simulation, false for normal operation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sonicator_control.h" line="280" column="6" bodyfile="src/modules/control/sonicator.cpp" bodystart="639" bodyend="642" declfile="include/sonicator_control.h" declline="280" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Single Sonicator Control API for Epic 1 Story 1.4. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Developed by Cannasol Technologies @project Multi Sonicator IO Controller </para>
</simplesect>
<simplesect kind="date"><para>2025-09-12 </para>
</simplesect>
<simplesect kind="version"><para>1.0.0</para>
</simplesect>
Provides clean API for single sonicator control with proper state machine, safety requirements, and HAL integration. Designed for Story 1.4: Single Sonicator Control Implementation.</para>
<para>Features:<itemizedlist>
<listitem><para>State machine with proper safety transitions</para>
</listitem><listitem><para>Non-blocking update() for 1kHz main loop</para>
</listitem><listitem><para>HAL abstraction for testability</para>
</listitem><listitem><para>MODBUS register integration ready</para>
</listitem><listitem><para>Comprehensive error handling </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SONICATOR_CONTROL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SONICATOR_CONTROL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/d4b/hal_8h" kindref="compound">modules/hal/hal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&gt;•Cannasol•Technologies•&lt;<sp/>STATE<sp/>MACHINE<sp/>DEFINITIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45" refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a8aaaacd92fec828be10c02ef2696f0b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a8aaaacd92fec828be10c02ef2696f0b7" kindref="member">SONICATOR_STATE_IDLE</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Sonicator<sp/>stopped,<sp/>ready<sp/>for<sp/>commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a34a68840cf8e7502193a12370a443e01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a34a68840cf8e7502193a12370a443e01" kindref="member">SONICATOR_STATE_STARTING</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Start<sp/>sequence<sp/>in<sp/>progress<sp/>(50ms)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315aefd4187011c854e789baa073995f0def" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315aefd4187011c854e789baa073995f0def" kindref="member">SONICATOR_STATE_RUNNING</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Sonicator<sp/>operating<sp/>normally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a68fc7fb7e15c844aa2c6cda43bcc8d09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a68fc7fb7e15c844aa2c6cda43bcc8d09" kindref="member">SONICATOR_STATE_STOPPING</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Stop<sp/>sequence<sp/>in<sp/>progress<sp/>(100ms)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a7ef335199557a3658616b70275094a47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a7ef335199557a3658616b70275094a47" kindref="member">SONICATOR_STATE_FAULT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Fault<sp/>condition<sp/>detected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a02f13d1f0ad8e9fc52f93cf9c25ad0cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315a02f13d1f0ad8e9fc52f93cf9c25ad0cf" kindref="member">SONICATOR_STATE_UNKNOWN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>State<sp/>unknown<sp/>(initialization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">}<sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315" kindref="member">sonicator_state_t</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57" refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a987db97b0e167389251f476d7c8c22d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a987db97b0e167389251f476d7c8c22d0" kindref="member">SONICATOR_CMD_NONE</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>No<sp/>command<sp/>pending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a67e775d5c114ee423be652c23762b4e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a67e775d5c114ee423be652c23762b4e5" kindref="member">SONICATOR_CMD_START</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Start<sp/>sonicator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a59cde013ea811598dfd6c4e8f3d3fc44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a59cde013ea811598dfd6c4e8f3d3fc44" kindref="member">SONICATOR_CMD_STOP</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Stop<sp/>sonicator<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4ae468797997229d74ba359310b851b758" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4ae468797997229d74ba359310b851b758" kindref="member">SONICATOR_CMD_RESET_OVERLOAD</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Reset<sp/>overload<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a46c3d8fff15b619067de0d72192b4ae0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4a46c3d8fff15b619067de0d72192b4ae0" kindref="member">SONICATOR_CMD_EMERGENCY_STOP</ref><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Emergency<sp/>stop<sp/>(immediate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/><ref refid="de/d13/sonicator__control_8h_1a235d05e692f1aa44c0a7770ba5f87eb4" kindref="member">sonicator_command_t</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68" refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a45f67c744f0a84ef961991bbbcee8cb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a45f67c744f0a84ef961991bbbcee8cb7" kindref="member">SONICATOR_FAULT_NONE</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>No<sp/>fault</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a73567def603bb6f8f77826552276d5ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a73567def603bb6f8f77826552276d5ec" kindref="member">SONICATOR_FAULT_OVERLOAD</ref><sp/>=<sp/>0x01,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Overload<sp/>detected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a5de4021b7d7257f7229804ea8c159aa8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a5de4021b7d7257f7229804ea8c159aa8" kindref="member">SONICATOR_FAULT_FREQ_UNLOCK</ref><sp/>=<sp/>0x02,<sp/></highlight><highlight class="comment">//&lt;<sp/>Frequency<sp/>lock<sp/>lost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a6b2e009dc023f729b34c1387dd3ec373" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a6b2e009dc023f729b34c1387dd3ec373" kindref="member">SONICATOR_FAULT_COMM_TIMEOUT</ref><sp/>=<sp/>0x04,<sp/></highlight><highlight class="comment">//&lt;<sp/>Communication<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a46b1755f047e81751b29ae6787e7d594" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99a46b1755f047e81751b29ae6787e7d594" kindref="member">SONICATOR_FAULT_HARDWARE</ref><sp/>=<sp/>0x08,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Hardware<sp/>fault</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99ab5b14d7067e124bcf3c19b309db532e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99ab5b14d7067e124bcf3c19b309db532e1" kindref="member">SONICATOR_FAULT_WATCHDOG</ref><sp/>=<sp/>0x10<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Watchdog<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}<sp/><ref refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99" kindref="member">sonicator_fault_t</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TIMING<sp/>CONSTANTS<sp/>(Story<sp/>1.4<sp/>Safety<sp/>Requirements)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="de/d13/sonicator__control_8h_1a73ff3fa20f363956206243467723cfdb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SONICATOR_START_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>50<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Start<sp/>sequence<sp/>delay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="de/d13/sonicator__control_8h_1a0f1d094ebabfc54ecb3292163fbb97b7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SONICATOR_STOP_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Stop<sp/>sequence<sp/>delay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="de/d13/sonicator__control_8h_1a91c49141120b41b4039582f54a59d839" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SONICATOR_RESET_PULSE_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Reset<sp/>pulse<sp/>duration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="de/d13/sonicator__control_8h_1aa1c769c234868a66d06b393acfbf20cb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SONICATOR_FAULT_DEBOUNCE_MS<sp/><sp/><sp/><sp/><sp/>10<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Fault<sp/>signal<sp/>debounce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="de/d13/sonicator__control_8h_1aafedba2f7dd17703f2fee746b1096bcf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SONICATOR_WATCHDOG_TIMEOUT_MS<sp/><sp/><sp/>1000<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Watchdog<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="de/d13/sonicator__control_8h_1a3a8bcea46ab85058d6fd1ad4c3c32ad4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SONICATOR_COMM_TIMEOUT_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2000<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Communication<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Amplitude<sp/>limits<sp/>(CT2000<sp/>specifications)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="de/d13/sonicator__control_8h_1abe06b5505cf15123b31cf8b029b59679" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SONICATOR_MIN_AMPLITUDE_PERCENT<sp/>20<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Minimum<sp/>amplitude<sp/>(20%)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="de/d13/sonicator__control_8h_1a9266e0128c993063b7b3aac98faf4e9b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SONICATOR_MAX_AMPLITUDE_PERCENT<sp/>100<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Maximum<sp/>amplitude<sp/>(100%)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SONICATOR<sp/>CONTROL<sp/>STRUCTURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="df/d70/structsonicator__state__control__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="df/d70/structsonicator__state__control__t_1a6cd8bcb50e1b5c930526cb95e0a268ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315" kindref="member">sonicator_state_t</ref><sp/><ref refid="df/d70/structsonicator__state__control__t_1a6cd8bcb50e1b5c930526cb95e0a268ce" kindref="member">state</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Current<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="df/d70/structsonicator__state__control__t_1a901de2eae303626f6398b04a41e1c0bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315" kindref="member">sonicator_state_t</ref><sp/><ref refid="df/d70/structsonicator__state__control__t_1a901de2eae303626f6398b04a41e1c0bf" kindref="member">previous_state</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Previous<sp/>state<sp/>(for<sp/>transitions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="df/d70/structsonicator__state__control__t_1ac9189d4a7addd0a1424450e59036e713" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="df/d70/structsonicator__state__control__t_1ac9189d4a7addd0a1424450e59036e713" kindref="member">state_entry_time</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>When<sp/>current<sp/>state<sp/>was<sp/>entered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Control<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="df/d70/structsonicator__state__control__t_1afcd4300c11230d9f9b052e12e3f2e112" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="df/d70/structsonicator__state__control__t_1afcd4300c11230d9f9b052e12e3f2e112" kindref="member">amplitude_percent</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Amplitude<sp/>setpoint<sp/>(20-100%)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="df/d70/structsonicator__state__control__t_1aa84df142871608374a7fa8c1896fe4b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t_1aa84df142871608374a7fa8c1896fe4b3" kindref="member">start_requested</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Start<sp/>command<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="df/d70/structsonicator__state__control__t_1ab8ced15f04b13bb1d6a77a5afc2be801" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t_1ab8ced15f04b13bb1d6a77a5afc2be801" kindref="member">stop_requested</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Stop<sp/>command<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="df/d70/structsonicator__state__control__t_1a564ae0b4b90fc1410ad2ca17b78419ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t_1a564ae0b4b90fc1410ad2ca17b78419ea" kindref="member">reset_requested</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Reset<sp/>overload<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Status<sp/>and<sp/>telemetry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="df/d70/structsonicator__state__control__t_1a0d5c51ab2346e7db197ae25fc7260907" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t_1a0d5c51ab2346e7db197ae25fc7260907" kindref="member">is_running</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Sonicator<sp/>is<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="df/d70/structsonicator__state__control__t_1a97a7e3df02d7732869f5bd7ce6bbe263" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t_1a97a7e3df02d7732869f5bd7ce6bbe263" kindref="member">overload_active</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Overload<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="df/d70/structsonicator__state__control__t_1a3995a54ccc06cc04d3279b6cba29caae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t_1a3995a54ccc06cc04d3279b6cba29caae" kindref="member">frequency_locked</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Frequency<sp/>lock<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="df/d70/structsonicator__state__control__t_1abcaae5e9e93498e549afd71298e9096b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t_1abcaae5e9e93498e549afd71298e9096b" kindref="member">power_watts</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Current<sp/>power<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="df/d70/structsonicator__state__control__t_1a3021ec989df15e775e6cd13891369875" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="df/d70/structsonicator__state__control__t_1a3021ec989df15e775e6cd13891369875" kindref="member">frequency_hz</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Operating<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fault<sp/>tracking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="df/d70/structsonicator__state__control__t_1aea26e6db5046274c9b121183c4d1abd8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99" kindref="member">sonicator_fault_t</ref><sp/><ref refid="df/d70/structsonicator__state__control__t_1aea26e6db5046274c9b121183c4d1abd8" kindref="member">active_faults</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Active<sp/>fault<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="df/d70/structsonicator__state__control__t_1a0faeb93a22f6239bd9ac1803cfda4ee9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="df/d70/structsonicator__state__control__t_1a0faeb93a22f6239bd9ac1803cfda4ee9" kindref="member">fault_count</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Total<sp/>fault<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="df/d70/structsonicator__state__control__t_1ac810ff8433cec8225356eefabcdcf810" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="df/d70/structsonicator__state__control__t_1ac810ff8433cec8225356eefabcdcf810" kindref="member">last_fault_time</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Last<sp/>fault<sp/>timestamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Safety<sp/>and<sp/>timing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="df/d70/structsonicator__state__control__t_1aa7007812c1aa0b399b4e7624727b5e0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="df/d70/structsonicator__state__control__t_1aa7007812c1aa0b399b4e7624727b5e0d" kindref="member">last_update_time</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Last<sp/>update()<sp/>call<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="df/d70/structsonicator__state__control__t_1a81faba2b646684d9911224bccf329353" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="df/d70/structsonicator__state__control__t_1a81faba2b646684d9911224bccf329353" kindref="member">watchdog_last_reset</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Watchdog<sp/>last<sp/>reset<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="df/d70/structsonicator__state__control__t_1a8f109c10ee2156084fe94757e665480d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t_1a8f109c10ee2156084fe94757e665480d" kindref="member">safety_override</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Emergency<sp/>safety<sp/>override</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="df/d70/structsonicator__state__control__t_1a189d2cb7b5214386dead8021cbccdfa7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="df/d70/structsonicator__state__control__t_1a189d2cb7b5214386dead8021cbccdfa7" kindref="member">start_count</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Number<sp/>of<sp/>start<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="df/d70/structsonicator__state__control__t_1a9b3b5c28ba93ade6dd7a6b89ec2386d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="df/d70/structsonicator__state__control__t_1a9b3b5c28ba93ade6dd7a6b89ec2386d7" kindref="member">total_runtime_ms</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Total<sp/>running<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="df/d70/structsonicator__state__control__t_1aef9c8009b1353420849b57fd8629cf2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="df/d70/structsonicator__state__control__t_1aef9c8009b1353420849b57fd8629cf2c" kindref="member">last_start_time</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>Last<sp/>start<sp/>timestamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">}<sp/><ref refid="df/d70/structsonicator__state__control__t" kindref="compound">sonicator_state_control_t</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PUBLIC<sp/>API<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d13/sonicator__control_8h_1ac88614577067020f420441ba689e7241" kindref="member">sonicator_begin</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d13/sonicator__control_8h_1aab49fb783e216647f53db17fbb6b62b1" kindref="member">sonicator_start</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d13/sonicator__control_8h_1a4c28efedf324a8f71669e203de81ca47" kindref="member">sonicator_stop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d13/sonicator__control_8h_1ad48d366d35d3f9fc640589b2b5623aa2" kindref="member">sonicator_set_amplitude</ref>(uint8_t<sp/>amplitude_percent);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d13/sonicator__control_8h_1a21c76fda64cb8f4ddaf2f55f3567ec5e" kindref="member">sonicator_reset_overload</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d13/sonicator__control_8h_1a626ecb2d4d66e32401478259cfe3595f" kindref="member">sonicator_emergency_stop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315" kindref="member">sonicator_state_t</ref><sp/><ref refid="de/d13/sonicator__control_8h_1adfd3a8b6450a1a09bf17d4865c32569c" kindref="member">sonicator_update</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d70/structsonicator__state__control__t" kindref="compound">sonicator_state_control_t</ref>*<sp/><ref refid="de/d13/sonicator__control_8h_1a1ecfcd93a4b2bd32c9cab9f359b831ba" kindref="member">sonicator_get_status</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="de/d13/sonicator__control_8h_1abe828539c1f97df3497b972c3c72c75f" kindref="member">sonicator_state_to_string</ref>(<ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315" kindref="member">sonicator_state_t</ref><sp/>state);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d13/sonicator__control_8h_1a2309ace8e76b3132b8b2f0e7d0df9956" kindref="member">sonicator_is_safe</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d13/sonicator__control_8h_1a85b84eadaf4c625391673e214901144f" kindref="member">sonicator_reset_statistics</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ADVANCED<sp/>FUNCTIONS<sp/>(for<sp/>testing<sp/>and<sp/>diagnostics)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d13/sonicator__control_8h_1a4519e53de39614ddb883a4c2db06ea19" kindref="member">sonicator_force_state</ref>(<ref refid="de/d13/sonicator__control_8h_1ad0aeab8703f3a1439806186cba759315" kindref="member">sonicator_state_t</ref><sp/>new_state);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d13/sonicator__control_8h_1a79b77d91a6416dd0447f9c6c9741ec36" kindref="member">sonicator_inject_fault</ref>(<ref refid="de/d13/sonicator__control_8h_1a361c37dbeedf89f2fe09845eab7f0a99" kindref="member">sonicator_fault_t</ref><sp/>fault_mask);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d13/sonicator__control_8h_1abe9ba511a647d9236e12897ce8cf7271" kindref="member">sonicator_set_simulation_mode</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>SONICATOR_CONTROL_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/sonicator_control.h"/>
  </compounddef>
</doxygen>
