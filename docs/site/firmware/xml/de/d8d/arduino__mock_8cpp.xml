<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="de/d8d/arduino__mock_8cpp" kind="file" language="C++">
    <compoundname>arduino_mock.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifdef<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arduino<sp/>mock<sp/>implementation<sp/>compiled<sp/>as<sp/>part<sp/>of<sp/>src<sp/>for<sp/>native<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Arduino.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">uint8_t<sp/>mock_PORTA<sp/>=<sp/>0,<sp/>mock_PORTB<sp/>=<sp/>0,<sp/>mock_PORTC<sp/>=<sp/>0,<sp/>mock_PORTD<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9"><highlight class="normal">uint8_t<sp/>mock_DDRA<sp/>=<sp/>0,<sp/>mock_DDRB<sp/>=<sp/>0,<sp/>mock_DDRC<sp/>=<sp/>0,<sp/>mock_DDRD<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">uint8_t<sp/>mock_PINA<sp/>=<sp/>0,<sp/>mock_PINB<sp/>=<sp/>0,<sp/>mock_PINC<sp/>=<sp/>0,<sp/>mock_PIND<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">uint8_t<sp/>mock_TCCR0<sp/>=<sp/>0,<sp/>mock_TCCR1A<sp/>=<sp/>0,<sp/>mock_TCCR1B<sp/>=<sp/>0,<sp/>mock_TCCR2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">uint8_t<sp/>mock_TCNT0<sp/>=<sp/>0,<sp/>mock_TCNT1<sp/>=<sp/>0,<sp/>mock_OCR0<sp/>=<sp/>0,<sp/>mock_OCR1A<sp/>=<sp/>0,<sp/>mock_OCR2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">uint8_t<sp/>mock_TIMSK<sp/>=<sp/>0,<sp/>mock_UCSRA<sp/>=<sp/>0,<sp/>mock_UCSRB<sp/>=<sp/>0,<sp/>mock_UCSRC<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">uint8_t<sp/>mock_UBRRH<sp/>=<sp/>0,<sp/>mock_UBRRL<sp/>=<sp/>0,<sp/>mock_UDR<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">uint8_t<sp/>mock_ADMUX<sp/>=<sp/>0,<sp/>mock_ADCSRA<sp/>=<sp/>0,<sp/>mock_ADCL<sp/>=<sp/>0,<sp/>mock_ADCH<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;uint8_t,<sp/>uint8_t&gt;<sp/>s_pinMode;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;uint8_t,<sp/>uint8_t&gt;<sp/>s_pinState;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;uint8_t,<sp/>uint16_t&gt;<sp/>s_analogValues;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_start<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>millis(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::chrono;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)duration_cast&lt;milliseconds&gt;(steady_clock::now()<sp/>-<sp/>s_start).count();</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>micros(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::chrono;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)duration_cast&lt;microseconds&gt;(steady_clock::now()<sp/>-<sp/>s_start).count();</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>delay(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ms)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::milliseconds(ms));</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>delayMicroseconds(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>us)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::microseconds(us));</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sei(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cli(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pinMode(uint8_t<sp/>pin,<sp/>uint8_t<sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>s_pinMode[pin]<sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>digitalWrite(uint8_t<sp/>pin,<sp/>uint8_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>s_pinState[pin]<sp/>=<sp/>(value<sp/>?<sp/>HIGH<sp/>:<sp/>LOW);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digitalRead(uint8_t<sp/>pin)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>s_pinState.find(pin);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>s_pinState.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LOW;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second<sp/>?<sp/>HIGH<sp/>:<sp/>LOW;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>analogRead(uint8_t<sp/>pin)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>s_analogValues.find(pin);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>s_analogValues.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)it-&gt;second;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>analogReference(uint8_t<sp/></highlight><highlight class="comment">/*type*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arduino_mock_reset(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>s_pinMode.clear();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>s_pinState.clear();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>s_analogValues.clear();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>mock_PORTA<sp/>=<sp/>mock_PORTB<sp/>=<sp/>mock_PORTC<sp/>=<sp/>mock_PORTD<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>mock_DDRA<sp/>=<sp/>mock_DDRB<sp/>=<sp/>mock_DDRC<sp/>=<sp/>mock_DDRD<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>mock_PINA<sp/>=<sp/>mock_PINB<sp/>=<sp/>mock_PINC<sp/>=<sp/>mock_PIND<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>mock_TCCR0<sp/>=<sp/>mock_TCCR1A<sp/>=<sp/>mock_TCCR1B<sp/>=<sp/>mock_TCCR2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>mock_TCNT0<sp/>=<sp/>mock_TCNT1<sp/>=<sp/>mock_OCR0<sp/>=<sp/>mock_OCR1A<sp/>=<sp/>mock_OCR2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>mock_TIMSK<sp/>=<sp/>mock_UCSRA<sp/>=<sp/>mock_UCSRB<sp/>=<sp/>mock_UCSRC<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>mock_UBRRH<sp/>=<sp/>mock_UBRRL<sp/>=<sp/>mock_UDR<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>mock_ADMUX<sp/>=<sp/>mock_ADCSRA<sp/>=<sp/>mock_ADCL<sp/>=<sp/>mock_ADCH<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arduino_mock_set_analog_value(uint8_t<sp/>pin,<sp/>uint16_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>s_analogValues[pin]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">uint16_t<sp/>arduino_mock_get_analog_value(uint8_t<sp/>pin)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>s_analogValues.find(pin);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>s_analogValues.end())<sp/>?<sp/>0<sp/>:<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NATIVE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/compat/arduino_mock.cpp"/>
  </compounddef>
</doxygen>
