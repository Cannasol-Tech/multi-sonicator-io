<testsuite name="features.hil_pwm_generation.PWM Generation Hardware Verification" tests="6" errors="0" failures="0" skipped="6" time="0.0" timestamp="2025-09-05T12:14:59.131547" hostname="Corbans-Mini.home"><testcase classname="features.hil_pwm_generation.PWM Generation Hardware Verification" name="Basic PWM output generation" status="skipped" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @hil @hardware @pwm
  Scenario: Basic PWM output generation
    Given the HIL framework is connected to ATmega32A ... skipped in 0.000s
    And the PWM subsystem is initialized ... skipped in 0.000s
    And pin "AMPLITUDE_ALL" is configured for PWM output ... skipped in 0.000s
    When I set PWM on pin "AMPLITUDE_ALL" to 50% duty cycle at 1kHz ... skipped in 0.000s
    Then the HIL framework should measure approximately 50% duty cycle ... skipped in 0.000s
    And the frequency should be approximately 1000Hz ± 10Hz ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="features.hil_pwm_generation.PWM Generation Hardware Verification" name="PWM duty cycle variation" status="skipped" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @hil @hardware @pwm
  Scenario: PWM duty cycle variation
    Given the HIL framework is connected to ATmega32A ... skipped in 0.000s
    And the PWM subsystem is initialized ... skipped in 0.000s
    And pin "AMPLITUDE_ALL" is configured for PWM output ... skipped in 0.000s
    When I set PWM duty cycle to 25% on pin "AMPLITUDE_ALL" ... skipped in 0.000s
    Then the measured duty cycle should be 25% ± 2% ... skipped in 0.000s
    When I set PWM duty cycle to 75% on pin "AMPLITUDE_ALL" ... skipped in 0.000s
    Then the measured duty cycle should be 75% ± 2% ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="features.hil_pwm_generation.PWM Generation Hardware Verification" name="PWM frequency accuracy" status="skipped" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @hil @hardware @pwm
  Scenario: PWM frequency accuracy
    Given the HIL framework is connected to ATmega32A ... skipped in 0.000s
    And the PWM subsystem is initialized ... skipped in 0.000s
    And pin "AMPLITUDE_ALL" is configured for PWM output ... skipped in 0.000s
    When I set PWM frequency to 500Hz on pin "AMPLITUDE_ALL" ... skipped in 0.000s
    Then the measured frequency should be 500Hz ± 5Hz ... skipped in 0.000s
    When I set PWM frequency to 2000Hz on pin "AMPLITUDE_ALL" ... skipped in 0.000s
    Then the measured frequency should be 2000Hz ± 20Hz ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="features.hil_pwm_generation.PWM Generation Hardware Verification" name="PWM voltage levels" status="skipped" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @hil @hardware @pwm
  Scenario: PWM voltage levels
    Given the HIL framework is connected to ATmega32A ... skipped in 0.000s
    And the PWM subsystem is initialized ... skipped in 0.000s
    And pin "AMPLITUDE_ALL" is configured for PWM output ... skipped in 0.000s
    When I set PWM to 0% duty cycle on pin "AMPLITUDE_ALL" ... skipped in 0.000s
    Then the average voltage should be approximately 0V ... skipped in 0.000s
    When I set PWM to 100% duty cycle on pin "AMPLITUDE_ALL" ... skipped in 0.000s
    Then the average voltage should be approximately 5V ... skipped in 0.000s
    When I set PWM to 50% duty cycle on pin "AMPLITUDE_ALL" ... skipped in 0.000s
    Then the average voltage should be approximately 2.5V ± 0.2V ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="features.hil_pwm_generation.PWM Generation Hardware Verification" name="PWM signal stability" status="skipped" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @hil @hardware @pwm
  Scenario: PWM signal stability
    Given the HIL framework is connected to ATmega32A ... skipped in 0.000s
    And the PWM subsystem is initialized ... skipped in 0.000s
    And pin "AMPLITUDE_ALL" is configured for PWM output ... skipped in 0.000s
    When I set PWM to 60% duty cycle at 1kHz on pin "AMPLITUDE_ALL" ... skipped in 0.000s
    And I measure PWM for 10 seconds continuously ... skipped in 0.000s
    Then the duty cycle should remain stable within ±1% ... skipped in 0.000s
    And the frequency should remain stable within ±5Hz ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="features.hil_pwm_generation.PWM Generation Hardware Verification" name="PWM disable and enable" status="skipped" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @hil @hardware @pwm
  Scenario: PWM disable and enable
    Given the HIL framework is connected to ATmega32A ... skipped in 0.000s
    And the PWM subsystem is initialized ... skipped in 0.000s
    And pin "AMPLITUDE_ALL" is configured for PWM output ... skipped in 0.000s
    When PWM is enabled on pin "AMPLITUDE_ALL" with 40% duty cycle ... skipped in 0.000s
    Then I should measure PWM signal ... skipped in 0.000s
    When I disable PWM on pin "AMPLITUDE_ALL" ... skipped in 0.000s
    Then the pin should be in a static state ... skipped in 0.000s
    When I re-enable PWM with the same settings ... skipped in 0.000s
    Then I should measure the same PWM signal again ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase></testsuite>